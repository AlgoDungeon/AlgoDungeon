{"version":3,"sources":["../../src/use-callback-ref.ts"],"names":["React","useSafeLayoutEffect","useCallbackRef","fn","ref","useRef","current","useCallback","args"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,cAAT,CACLC,EADK,EAEF;AACH,MAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,CAAaF,EAAb,CAAZ;AAEAF,EAAAA,mBAAmB,CAAC,MAAM;AACxBG,IAAAA,GAAG,CAACE,OAAJ,GAAcH,EAAd;AACD,GAFkB,CAAnB,CAHG,CAOH;;AACA,SAAOH,KAAK,CAACO,WAAN,CAAmB;AAAA,sCAAIC,IAAJ;AAAIA,MAAAA,IAAJ;AAAA;;AAAA,WAAaJ,GAAG,CAACE,OAAjB,oBAAaF,GAAG,CAACE,OAAJ,CAAc,GAAGE,IAAjB,CAAb;AAAA,GAAnB,EAA8D,EAA9D,CAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\"\n\n/**\n * React hook to persist any value between renders,\n * but keeps it up-to-date if it changes.\n *\n * @param value the value or function to persist\n */\nexport function useCallbackRef<T extends (...args: any[]) => any>(\n  fn: T | undefined,\n): T {\n  const ref = React.useRef(fn)\n\n  useSafeLayoutEffect(() => {\n    ref.current = fn\n  })\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(((...args) => ref.current?.(...args)) as T, [])\n}\n"],"file":"use-callback-ref.js"}