{"version":3,"sources":["../../src/use-controllable.ts"],"names":["runIfFn","warn","React","useControllableProp","prop","state","current","isControlled","useRef","undefined","value","defaultPropsMap","defaultValue","onChange","useControllableState","props","valueProp","name","propsMap","valueState","setValue","useState","useEffect","nextIsControlled","nextMode","mode","condition","message","initialDefaultValue","JSON","stringify","updateValue","useCallback","next","nextValue"],"mappings":"AAAA;AACA,SAASA,OAAT,EAAkBC,IAAlB,QAA8B,kBAA9B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,OAAO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;AACpE,MAAM;AAAEC,IAAAA,OAAO,EAAEC;AAAX,MAA4BL,KAAK,CAACM,MAAN,CAAaJ,IAAI,KAAKK,SAAtB,CAAlC;AACA,MAAMC,KAAK,GAAGH,YAAY,IAAI,OAAOH,IAAP,KAAgB,WAAhC,GAA8CA,IAA9C,GAAqDC,KAAnE;AACA,SAAO,CAACE,YAAD,EAAeG,KAAf,CAAP;AACD;AAiCD,IAAMC,eAAe,GAAG;AACtBD,EAAAA,KAAK,EAAE,OADe;AAEtBE,EAAAA,YAAY,EAAE,cAFQ;AAGtBC,EAAAA,QAAQ,EAAE;AAHY,CAAxB;AAMA;AACA;AACA;AACA;;AACA,OAAO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;AAC3E,MAAM;AACJL,IAAAA,KAAK,EAAEM,SADH;AAEJJ,IAAAA,YAFI;AAGJC,IAAAA,QAHI;AAIJI,IAAAA,IAAI,GAAG,WAJH;AAKJC,IAAAA,QAAQ,GAAGP;AALP,MAMFI,KANJ;AAQA,MAAM,CAACI,UAAD,EAAaC,QAAb,IAAyBlB,KAAK,CAACmB,QAAN,CAAeT,YAAf,CAA/B;AACA,MAAM;AAAEN,IAAAA,OAAO,EAAEC;AAAX,MAA4BL,KAAK,CAACM,MAAN,CAAaQ,SAAS,KAAKP,SAA3B,CAAlC,CAV2E,CAY3E;;AACAP,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAMC,gBAAgB,GAAGP,SAAS,KAAKP,SAAvC;AAEA,QAAMe,QAAQ,GAAGD,gBAAgB,GAAG,cAAH,GAAoB,iBAArD;AACA,QAAME,IAAI,GAAGlB,YAAY,GAAG,cAAH,GAAoB,iBAA7C;AAEAN,IAAAA,IAAI,CAAC;AACHyB,MAAAA,SAAS,EAAEnB,YAAY,KAAKgB,gBADzB;AAEHI,MAAAA,OAAO,EACL,cAAYV,IAAZ,0BAAqCQ,IAArC,YAAgDD,QAAhD,sHAEYN,QAAQ,CAACR,KAFrB,mBAEwCQ,QAAQ,CAACL,QAFjD,4EAGqDK,QAAQ,CAACR,KAH9D,uBAGqFQ,QAAQ,CAACN,YAH9F;AAHC,KAAD,CAAJ;AASD,GAfD,EAeG,CAACI,SAAD,EAAYT,YAAZ,EAA0BU,IAA1B,CAfH;AAiBA,MAAM;AAAEX,IAAAA,OAAO,EAAEsB;AAAX,MAAmC1B,KAAK,CAACM,MAAN,CAAaI,YAAb,CAAzC;AAEAV,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpBrB,IAAAA,IAAI,CAAC;AACHyB,MAAAA,SAAS,EAAEE,mBAAmB,KAAKhB,YADhC;AAEHe,MAAAA,OAAO,EACL,2EAAyEV,IAAzE,yFACoDA,IADpD;AAHC,KAAD,CAAJ;AAMD,GAPD,EAOG,CAACY,IAAI,CAACC,SAAL,CAAelB,YAAf,CAAD,CAPH;AASA,MAAMF,KAAK,GAAGH,YAAY,GAAIS,SAAJ,GAAsBG,UAAhD;AAEA,MAAMY,WAAW,GAAG7B,KAAK,CAAC8B,WAAN,CACjBC,IAAD,IAAmC;AACjC,QAAMC,SAAS,GAAGlC,OAAO,CAACiC,IAAD,EAAOvB,KAAP,CAAzB;AACA,QAAI,CAACH,YAAL,EAAmBa,QAAQ,CAACc,SAAD,CAAR;AACnBrB,IAAAA,QAAQ,QAAR,YAAAA,QAAQ,CAAGqB,SAAH,CAAR;AACD,GALiB,EAMlB,CAACrB,QAAD,EAAWH,KAAX,CANkB,CAApB;AASA,SAAO,CAACA,KAAD,EAAQqB,WAAR,CAAP;AACD","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { runIfFn, warn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined)\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n  /**\n   * A mapping for the props to give more contextual warning messages.\n   *\n   * In some components `value` might be called `index`, and defaultValue\n   * might be called `defaultIndex`, so this map helps us generate\n   * contextual warning messages\n   */\n  propsMap?: {\n    value: string\n    defaultValue: string\n    onChange: string\n  }\n}\n\nconst defaultPropsMap = {\n  value: \"value\",\n  defaultValue: \"defaultValue\",\n  onChange: \"onChange\",\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    name = \"Component\",\n    propsMap = defaultPropsMap,\n  } = props\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const { current: isControlled } = React.useRef(valueProp !== undefined)\n\n  // don't switch from controlled to uncontrolled\n  React.useEffect(() => {\n    const nextIsControlled = valueProp !== undefined\n\n    const nextMode = nextIsControlled ? \"a controlled\" : \"an uncontrolled\"\n    const mode = isControlled ? \"a controlled\" : \"an uncontrolled\"\n\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message:\n        `Warning: ${name} is changing from ${mode} to ${nextMode} component. ` +\n        `Components should not switch from controlled to uncontrolled (or vice versa). ` +\n        `Use the '${propsMap.value}' with an '${propsMap.onChange}' handler. ` +\n        `If you want an uncontrolled component, remove the ${propsMap.value} prop and use '${propsMap.defaultValue}' instead. \"` +\n        `More info: https://fb.me/react-controlled-components`,\n    })\n  }, [valueProp, isControlled, name])\n\n  const { current: initialDefaultValue } = React.useRef(defaultValue)\n\n  React.useEffect(() => {\n    warn({\n      condition: initialDefaultValue !== defaultValue,\n      message:\n        `Warning: A component is changing the default value of an uncontrolled ${name} after being initialized. ` +\n        `To suppress this warning opt to use a controlled ${name}.`,\n    })\n  }, [JSON.stringify(defaultValue)])\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) setValue(nextValue)\n      onChange?.(nextValue)\n    },\n    [onChange, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}