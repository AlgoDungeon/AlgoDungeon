{"version":3,"sources":["../../src/use-focus-on-show.ts"],"names":["contains","focus","getAllFocusable","React","useEventListener","useUpdateEffect","defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocus","onFocus","useCallback","document","activeElement","tabbableEls","length"],"mappings":"AAAA,SACEA,QADF,EAEEC,KAFF,EAIEC,eAJF,QAKO,kBALP;AAMA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AASA,IAAMC,cAAqC,GAAG;AAC5CC,EAAAA,aAAa,EAAE,IAD6B;AAE5CC,EAAAA,WAAW,EAAE;AAF+B,CAA9C;AAKA,OAAO,SAASC,cAAT,CACLC,MADK,EAELC,OAFK,EAGL;AAAA,MADAA,OACA;AADAA,IAAAA,OACA,GADUL,cACV;AAAA;;AACA,MAAM;AAAEM,IAAAA,QAAF;AAAYL,IAAAA,aAAZ;AAA2BC,IAAAA,WAA3B;AAAwCK,IAAAA;AAAxC,MAAoDF,OAA1D;AACA,MAAMG,OAAO,GAAGJ,MAAM,IAAI,aAAaA,MAAvB,GAAgCA,MAAM,CAACK,OAAvC,GAAiDL,MAAjE;AAEA,MAAMM,SAAS,GAAGR,WAAW,IAAIK,OAAjC;AAEA,MAAMI,OAAO,GAAGd,KAAK,CAACe,WAAN,CAAkB,MAAM;AACtC,QAAI,CAACJ,OAAD,IAAY,CAACE,SAAjB,EAA4B;AAE5B,QAAIhB,QAAQ,CAACc,OAAD,EAAUK,QAAQ,CAACC,aAAnB,CAAZ,EAA8D;;AAE9D,QAAIR,QAAJ,YAAIA,QAAQ,CAAEG,OAAd,EAAuB;AACrBd,MAAAA,KAAK,CAACW,QAAQ,CAACG,OAAV,EAAmB;AAAER,QAAAA;AAAF,OAAnB,CAAL;AACD,KAFD,MAEO;AACL,UAAMc,WAAW,GAAGnB,eAAe,CAACY,OAAD,CAAnC;;AACA,UAAIO,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BrB,QAAAA,KAAK,CAACoB,WAAW,CAAC,CAAD,CAAZ,EAAiB;AAAEd,UAAAA;AAAF,SAAjB,CAAL;AACD;AACF;AACF,GAbe,EAab,CAACS,SAAD,EAAYT,aAAZ,EAA2BO,OAA3B,EAAoCF,QAApC,CAba,CAAhB;AAeAP,EAAAA,eAAe,CAAC,MAAM;AACpBY,IAAAA,OAAO;AACR,GAFc,EAEZ,CAACA,OAAD,CAFY,CAAf;AAIAb,EAAAA,gBAAgB,CAAC,eAAD,EAAkBa,OAAlB,EAA2BH,OAA3B,CAAhB;AACD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = target && \"current\" in target ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = React.useCallback(() => {\n    if (!element || !autoFocus) return\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll })\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"],"file":"use-focus-on-show.js"}