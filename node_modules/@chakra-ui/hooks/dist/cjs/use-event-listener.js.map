{"version":3,"sources":["../../src/use-event-listener.ts"],"names":["useEventListener","event","handler","env","options","isBrowser","document","fn","React","useEffect","undefined","addEventListener","removeEventListener"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CACLC,KADK,EAELC,OAFK,EAGLC,GAHK,EAILC,OAJK,EAKL;AAAA,MAFAD,GAEA;AAFAA,IAAAA,GAEA,GAFqCE,mBAAYC,QAAZ,GAAuB,IAE5D;AAAA;;AACA,MAAMC,EAAE,GAAG,oCAAeL,OAAf,CAAX;AAEAM,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAM;AACpB,QAAI,CAACN,GAAL,EAAU,OAAOO,SAAP;AACVP,IAAAA,GAAG,CAACQ,gBAAJ,CAAqBV,KAArB,EAA4BM,EAA5B,EAAgCH,OAAhC;AACA,WAAO,YAAM;AACXD,MAAAA,GAAG,CAACS,mBAAJ,CAAwBX,KAAxB,EAA+BM,EAA/B,EAAmCH,OAAnC;AACD,KAFD;AAGD,GAND,EAMG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBG,EAAtB,CANH;AAQA,SAAO,YAAM;AAAA;;AACX,YAAAJ,GAAG,SAAH,iBAAKS,mBAAL,CAAyBX,KAAzB,EAAgCM,EAAhC,EAAoCH,OAApC;AACD,GAFD;AAGD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\nimport { useCallbackRef } from \"./use-callback-ref\"\n\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\nexport function useEventListener<K extends keyof DocumentEventMap>(\n  event: K,\n  handler: (event: DocumentEventMap[K]) => void,\n  env: Document | HTMLElement | null = isBrowser ? document : null,\n  options?: boolean | AddEventListenerOptions,\n) {\n  const fn = useCallbackRef(handler) as any\n\n  React.useEffect(() => {\n    if (!env) return undefined\n    env.addEventListener(event, fn, options)\n    return () => {\n      env.removeEventListener(event, fn, options)\n    }\n  }, [event, env, options, fn])\n\n  return () => {\n    env?.removeEventListener(event, fn, options)\n  }\n}\n"],"file":"use-event-listener.js"}