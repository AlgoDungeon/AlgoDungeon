{"version":3,"sources":["../../src/use-focus-effect.ts"],"names":["useFocusEffect","ref","options","shouldFocus","preventScroll","node","current"],"mappings":";;;;;AACA;;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CACLC,GADK,EAELC,OAFK,EAGL;AAAA,MACQC,WADR,GACuCD,OADvC,CACQC,WADR;AAAA,MACqBC,aADrB,GACuCF,OADvC,CACqBE,aADrB;AAGA,wCAAgB,YAAM;AACpB,QAAMC,IAAI,GAAGJ,GAAG,CAACK,OAAjB;AAEA,QAAI,CAACD,IAAD,IAAS,CAACF,WAAd,EAA2B;;AAE3B,QAAI,CAAC,2BAAeE,IAAf,CAAL,EAA2B;AACzB,wBAAMA,IAAN,EAAY;AAAED,QAAAA,aAAa,EAAbA;AAAF,OAAZ;AACD;AACF,GARD,EAQG,CAACD,WAAD,EAAcF,GAAd,EAAmBG,aAAnB,CARH;AASD","sourcesContent":["import * as React from \"react\"\nimport { hasFocusWithin, focus } from \"@chakra-ui/utils\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport type UseFocusEffectOptions = {\n  shouldFocus: boolean\n  preventScroll?: boolean\n}\n/**\n * React hook to focus an element conditionally\n *\n * @param ref the ref of the element to focus\n * @param options focus management options\n */\nexport function useFocusEffect<T extends HTMLElement>(\n  ref: React.RefObject<T>,\n  options: UseFocusEffectOptions,\n) {\n  const { shouldFocus, preventScroll } = options\n\n  useUpdateEffect(() => {\n    const node = ref.current\n\n    if (!node || !shouldFocus) return\n\n    if (!hasFocusWithin(node)) {\n      focus(node, { preventScroll })\n    }\n  }, [shouldFocus, ref, preventScroll])\n}\n"],"file":"use-focus-effect.js"}