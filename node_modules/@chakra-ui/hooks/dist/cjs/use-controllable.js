"use strict";

exports.__esModule = true;
exports.useControllableProp = useControllableProp;
exports.useControllableState = useControllableState;

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable react-hooks/exhaustive-deps */
function useControllableProp(prop, state) {
  var _React$useRef = React.useRef(prop !== undefined),
      isControlled = _React$useRef.current;

  var value = isControlled && typeof prop !== "undefined" ? prop : state;
  return [isControlled, value];
}

var defaultPropsMap = {
  value: "value",
  defaultValue: "defaultValue",
  onChange: "onChange"
};
/**
 * React hook for using controlling component state.
 * @param props
 */

function useControllableState(props) {
  var valueProp = props.value,
      defaultValue = props.defaultValue,
      onChange = props.onChange,
      _props$name = props.name,
      name = _props$name === void 0 ? "Component" : _props$name,
      _props$propsMap = props.propsMap,
      propsMap = _props$propsMap === void 0 ? defaultPropsMap : _props$propsMap;

  var _React$useState = React.useState(defaultValue),
      valueState = _React$useState[0],
      setValue = _React$useState[1];

  var _React$useRef2 = React.useRef(valueProp !== undefined),
      isControlled = _React$useRef2.current; // don't switch from controlled to uncontrolled


  React.useEffect(function () {
    var nextIsControlled = valueProp !== undefined;
    var nextMode = nextIsControlled ? "a controlled" : "an uncontrolled";
    var mode = isControlled ? "a controlled" : "an uncontrolled";
    (0, _utils.warn)({
      condition: isControlled !== nextIsControlled,
      message: "Warning: " + name + " is changing from " + mode + " to " + nextMode + " component. " + "Components should not switch from controlled to uncontrolled (or vice versa). " + ("Use the '" + propsMap.value + "' with an '" + propsMap.onChange + "' handler. ") + ("If you want an uncontrolled component, remove the " + propsMap.value + " prop and use '" + propsMap.defaultValue + "' instead. \"") + "More info: https://fb.me/react-controlled-components"
    });
  }, [valueProp, isControlled, name]);

  var _React$useRef3 = React.useRef(defaultValue),
      initialDefaultValue = _React$useRef3.current;

  React.useEffect(function () {
    (0, _utils.warn)({
      condition: initialDefaultValue !== defaultValue,
      message: "Warning: A component is changing the default value of an uncontrolled " + name + " after being initialized. " + ("To suppress this warning opt to use a controlled " + name + ".")
    });
  }, [JSON.stringify(defaultValue)]);
  var value = isControlled ? valueProp : valueState;
  var updateValue = React.useCallback(function (next) {
    var nextValue = (0, _utils.runIfFn)(next, value);
    if (!isControlled) setValue(nextValue);
    onChange == null ? void 0 : onChange(nextValue);
  }, [onChange, value]);
  return [value, updateValue];
}
//# sourceMappingURL=use-controllable.js.map