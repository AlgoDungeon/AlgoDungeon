{"version":3,"sources":["../../src/use-focus-on-show.ts"],"names":["defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocus","onFocus","React","useCallback","document","activeElement","tabbableEls","length"],"mappings":";;;;;AAAA;;AAMA;;AACA;;AACA;;;;;;AASA,IAAMA,cAAqC,GAAG;AAC5CC,EAAAA,aAAa,EAAE,IAD6B;AAE5CC,EAAAA,WAAW,EAAE;AAF+B,CAA9C;;AAKO,SAASC,cAAT,CACLC,MADK,EAELC,OAFK,EAGL;AAAA,MADAA,OACA;AADAA,IAAAA,OACA,GADUL,cACV;AAAA;;AAAA,iBAC0DK,OAD1D;AAAA,MACQC,QADR,YACQA,QADR;AAAA,MACkBL,aADlB,YACkBA,aADlB;AAAA,MACiCC,WADjC,YACiCA,WADjC;AAAA,MAC8CK,OAD9C,YAC8CA,OAD9C;AAEA,MAAMC,OAAO,GAAGJ,MAAM,IAAI,aAAaA,MAAvB,GAAgCA,MAAM,CAACK,OAAvC,GAAiDL,MAAjE;AAEA,MAAMM,SAAS,GAAGR,WAAW,IAAIK,OAAjC;AAEA,MAAMI,OAAO,GAAGC,KAAK,CAACC,WAAN,CAAkB,YAAM;AACtC,QAAI,CAACL,OAAD,IAAY,CAACE,SAAjB,EAA4B;AAE5B,QAAI,qBAASF,OAAT,EAAkBM,QAAQ,CAACC,aAA3B,CAAJ,EAA8D;;AAE9D,QAAIT,QAAJ,YAAIA,QAAQ,CAAEG,OAAd,EAAuB;AACrB,wBAAMH,QAAQ,CAACG,OAAf,EAAwB;AAAER,QAAAA,aAAa,EAAbA;AAAF,OAAxB;AACD,KAFD,MAEO;AACL,UAAMe,WAAW,GAAG,4BAAgBR,OAAhB,CAApB;;AACA,UAAIQ,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,0BAAMD,WAAW,CAAC,CAAD,CAAjB,EAAsB;AAAEf,UAAAA,aAAa,EAAbA;AAAF,SAAtB;AACD;AACF;AACF,GAbe,EAab,CAACS,SAAD,EAAYT,aAAZ,EAA2BO,OAA3B,EAAoCF,QAApC,CAba,CAAhB;AAeA,wCAAgB,YAAM;AACpBK,IAAAA,OAAO;AACR,GAFD,EAEG,CAACA,OAAD,CAFH;AAIA,0CAAiB,eAAjB,EAAkCA,OAAlC,EAA2CH,OAA3C;AACD","sourcesContent":["import {\n  contains,\n  focus,\n  FocusableElement,\n  getAllFocusable,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useEventListener } from \"./use-event-listener\"\nimport { useUpdateEffect } from \"./use-update-effect\"\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = target && \"current\" in target ? target.current : target\n\n  const autoFocus = shouldFocus && visible\n\n  const onFocus = React.useCallback(() => {\n    if (!element || !autoFocus) return\n\n    if (contains(element, document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      focus(focusRef.current, { preventScroll })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], { preventScroll })\n      }\n    }\n  }, [autoFocus, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(\"transitionend\", onFocus, element)\n}\n"],"file":"use-focus-on-show.js"}