{"version":3,"sources":["../../src/use-controllable.ts"],"names":["useControllableProp","prop","state","React","useRef","undefined","isControlled","current","value","defaultPropsMap","defaultValue","onChange","useControllableState","props","valueProp","name","propsMap","useState","valueState","setValue","useEffect","nextIsControlled","nextMode","mode","condition","message","initialDefaultValue","JSON","stringify","updateValue","useCallback","next","nextValue"],"mappings":"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","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport { runIfFn, warn } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const { current: isControlled } = React.useRef(prop !== undefined)\n  const value = isControlled && typeof prop !== \"undefined\" ? prop : state\n  return [isControlled, value] as const\n}\n\nexport interface UseControllableStateProps<T> {\n  /**\n   * The value to used in controlled mode\n   */\n  value?: T\n  /**\n   * The initial value to be used, in uncontrolled mode\n   */\n  defaultValue?: T | (() => T)\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?: (value: T) => void\n  /**\n   * The component name (for warnings)\n   */\n  name?: string\n  /**\n   * A mapping for the props to give more contextual warning messages.\n   *\n   * In some components `value` might be called `index`, and defaultValue\n   * might be called `defaultIndex`, so this map helps us generate\n   * contextual warning messages\n   */\n  propsMap?: {\n    value: string\n    defaultValue: string\n    onChange: string\n  }\n}\n\nconst defaultPropsMap = {\n  value: \"value\",\n  defaultValue: \"defaultValue\",\n  onChange: \"onChange\",\n}\n\n/**\n * React hook for using controlling component state.\n * @param props\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    name = \"Component\",\n    propsMap = defaultPropsMap,\n  } = props\n\n  const [valueState, setValue] = React.useState(defaultValue as T)\n  const { current: isControlled } = React.useRef(valueProp !== undefined)\n\n  // don't switch from controlled to uncontrolled\n  React.useEffect(() => {\n    const nextIsControlled = valueProp !== undefined\n\n    const nextMode = nextIsControlled ? \"a controlled\" : \"an uncontrolled\"\n    const mode = isControlled ? \"a controlled\" : \"an uncontrolled\"\n\n    warn({\n      condition: isControlled !== nextIsControlled,\n      message:\n        `Warning: ${name} is changing from ${mode} to ${nextMode} component. ` +\n        `Components should not switch from controlled to uncontrolled (or vice versa). ` +\n        `Use the '${propsMap.value}' with an '${propsMap.onChange}' handler. ` +\n        `If you want an uncontrolled component, remove the ${propsMap.value} prop and use '${propsMap.defaultValue}' instead. \"` +\n        `More info: https://fb.me/react-controlled-components`,\n    })\n  }, [valueProp, isControlled, name])\n\n  const { current: initialDefaultValue } = React.useRef(defaultValue)\n\n  React.useEffect(() => {\n    warn({\n      condition: initialDefaultValue !== defaultValue,\n      message:\n        `Warning: A component is changing the default value of an uncontrolled ${name} after being initialized. ` +\n        `To suppress this warning opt to use a controlled ${name}.`,\n    })\n  }, [JSON.stringify(defaultValue)])\n\n  const value = isControlled ? (valueProp as T) : valueState\n\n  const updateValue = React.useCallback(\n    (next: React.SetStateAction<T>) => {\n      const nextValue = runIfFn(next, value)\n      if (!isControlled) setValue(nextValue)\n      onChange?.(nextValue)\n    },\n    [onChange, value],\n  )\n\n  return [value, updateValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"],"file":"use-controllable.js"}