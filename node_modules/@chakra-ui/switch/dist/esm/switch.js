function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useCheckbox } from "@chakra-ui/checkbox";
import { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from "@chakra-ui/system";
import { cx, dataAttr, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
export var Switch = /*#__PURE__*/forwardRef((props, ref) => {
  var styles = useMultiStyleConfig("Switch", props);
  var ownProps = omitThemingProps(props);
  var {
    state,
    getInputProps,
    getCheckboxProps,
    htmlProps
  } = useCheckbox(ownProps);
  var inputProps = getInputProps({}, ref);
  var checkboxProps = getCheckboxProps();
  var labelStyles = {
    display: "inline-block",
    verticalAlign: "middle",
    lineHeight: "normal"
  };

  var trackStyles = _extends({
    display: "inline-flex",
    flexShrink: 0,
    justifyContent: "flex-start",
    boxSizing: "content-box",
    cursor: "pointer"
  }, styles.track);

  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, htmlProps, {
    className: cx("chakra-switch", props.className),
    __css: labelStyles
  }), /*#__PURE__*/React.createElement("input", _extends({
    className: "chakra-switch__input"
  }, inputProps)), /*#__PURE__*/React.createElement(chakra.span, _extends({}, checkboxProps, {
    className: "chakra-switch__track",
    __css: trackStyles
  }), /*#__PURE__*/React.createElement(chakra.span, {
    __css: styles.thumb,
    className: "chakra-switch__thumb",
    "data-checked": dataAttr(state.isChecked),
    "data-hover": dataAttr(state.isHovered)
  })));
});

if (__DEV__) {
  Switch.displayName = "Switch";
}
//# sourceMappingURL=switch.js.map