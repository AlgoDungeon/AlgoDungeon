{"version":3,"sources":["../../src/use-tabs.ts"],"names":["useClickable","useDescendant","useDescendants","useControllableState","useId","useSafeLayoutEffect","callAllHandlers","createContext","getValidChildren","isUndefined","mergeRefs","normalizeEventKey","React","useTabs","props","defaultIndex","onChange","index","isManual","isLazy","orientation","htmlProps","focusedIndex","setFocusedIndex","useState","selectedIndex","setSelectedIndex","defaultValue","value","propsMap","useEffect","enabledDomContext","domContext","id","TabsProvider","useTabsContext","name","errorMessage","useTabList","count","descendants","length","setIndex","useCallback","tab","element","focus","onKeyDown","event","nextTab","prevTab","firstTab","lastTab","isHorizontal","isVertical","eventKey","keyMap","ArrowRight","ArrowLeft","ArrowDown","ArrowUp","Home","End","action","preventDefault","role","useTab","isDisabled","isFocusable","ref","useRef","enabledIndex","disabled","Boolean","focusable","context","current","isSelected","onClick","onFocus","isDisabledButFocusable","shouldSelect","clickableProps","type","makeTabId","tabIndex","makeTabPanelId","undefined","useTabPanels","validChildren","children","map","child","cloneElement","useTabPanel","hidden","useTabIndicator","rect","setRect","left","width","top","height","hasMeasured","setHasMeasured","tabRect","getBoundingClientRect","requestAnimationFrame","cancelAnimationFrame","position","transition"],"mappings":";;;;AAAA,SAASA,YAAT,QAAgD,sBAAhD;AACA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,uBAA9C;AACA,SACEC,oBADF,EAEEC,KAFF,EAGEC,mBAHF,QAIO,kBAJP;AAKA,SACEC,eADF,EAEEC,aAFF,EAKEC,gBALF,EAMEC,WANF,EAOEC,SAPF,EAQEC,iBARF,QASO,kBATP;AAUA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAAsC;AAC3C,MAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,WAAW,GAAG;AANV,MAQFN,KARJ;AAAA,MAOKO,SAPL,iCAQIP,KARJ;AAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,MAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCX,KAAK,CAACY,QAAN,CAAeT,YAAf,WAAeA,YAAf,GAA+B,CAA/B,CAAxC;AAEA,MAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCvB,oBAAoB,CAAC;AAC7DwB,IAAAA,YAAY,EAAEZ,YAAF,WAAEA,YAAF,GAAkB,CAD+B;AAE7Da,IAAAA,KAAK,EAAEX,KAFsD;AAG7DD,IAAAA,QAH6D;AAI7Da,IAAAA,QAAQ,EAAE;AACRD,MAAAA,KAAK,EAAE,OADC;AAERD,MAAAA,YAAY,EAAE,cAFN;AAGRX,MAAAA,QAAQ,EAAE;AAHF;AAJmD,GAAD,CAA9D;AAWA;AACF;AACA;;AACEJ,EAAAA,KAAK,CAACkB,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACrB,WAAW,CAACQ,KAAD,CAAhB,EAAyB;AACvBM,MAAAA,eAAe,CAACN,KAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACA,KAAD,CAJH;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAMc,iBAAiB,GAAG7B,cAAc,EAAxC;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,MAAM8B,UAAU,GAAG9B,cAAc,EAAjC;AAEA;AACF;AACA;AACA;;AACE,MAAM+B,EAAE,GAAG7B,KAAK,CAACU,KAAK,CAACmB,EAAP,SAAhB;AAEA,SAAO;AACLA,IAAAA,EADK;AAELR,IAAAA,aAFK;AAGLH,IAAAA,YAHK;AAILI,IAAAA,gBAJK;AAKLH,IAAAA,eALK;AAMLL,IAAAA,QANK;AAOLC,IAAAA,MAPK;AAQLC,IAAAA,WARK;AASLW,IAAAA,iBATK;AAULC,IAAAA,UAVK;AAWLX,IAAAA;AAXK,GAAP;AAaD;AAID,IAAM,CAACa,YAAD,EAAeC,cAAf,IAAiC5B,aAAa,CAAgB;AAClE6B,EAAAA,IAAI,EAAE,aAD4D;AAElEC,EAAAA,YAAY,EACV;AAHgE,CAAhB,CAApD;AAMA,SAASH,YAAT;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,UAAT,CAA+CxB,KAA/C,EAAyD;AAC9D,MAAM;AACJS,IAAAA,eADI;AAEJD,IAAAA,YAFI;AAGJF,IAAAA,WAHI;AAIJW,IAAAA;AAJI,MAKFI,cAAc,EALlB;AAOA,MAAMI,KAAK,GAAGR,iBAAiB,CAACS,WAAlB,CAA8BC,MAA5C;AAEA;AACF;AACA;;AACE,MAAMC,QAAQ,GAAG9B,KAAK,CAAC+B,WAAN,CACd1B,KAAD,IAAmB;AACjB,QAAM2B,GAAG,GAAGb,iBAAiB,CAACS,WAAlB,CAA8BvB,KAA9B,CAAZ;;AACA,QAAI2B,GAAJ,YAAIA,GAAG,CAAEC,OAAT,EAAkB;AAChBD,MAAAA,GAAG,CAACC,OAAJ,CAAYC,KAAZ;AACAvB,MAAAA,eAAe,CAACN,KAAD,CAAf;AACD;AACF,GAPc,EAQf,CAACc,iBAAiB,CAACS,WAAnB,EAAgCjB,eAAhC,CARe,CAAjB;AAWA,MAAMwB,SAAS,GAAGnC,KAAK,CAAC+B,WAAN,CACfK,KAAD,IAAgC;AAC9B,QAAMC,OAAO,GAAG,MAAMP,QAAQ,CAAC,CAACpB,YAAY,GAAG,CAAhB,IAAqBiB,KAAtB,CAA9B;;AACA,QAAMW,OAAO,GAAG,MAAMR,QAAQ,CAAC,CAACpB,YAAY,GAAG,CAAf,GAAmBiB,KAApB,IAA6BA,KAA9B,CAA9B;;AACA,QAAMY,QAAQ,GAAG,MAAMT,QAAQ,CAAC,CAAD,CAA/B;;AACA,QAAMU,OAAO,GAAG,MAAMV,QAAQ,CAACH,KAAK,GAAG,CAAT,CAA9B;;AAEA,QAAMc,YAAY,GAAGjC,WAAW,KAAK,YAArC;AACA,QAAMkC,UAAU,GAAGlC,WAAW,KAAK,UAAnC;AAEA,QAAMmC,QAAQ,GAAG5C,iBAAiB,CAACqC,KAAD,CAAlC;AACA,QAAMQ,MAAmB,GAAG;AAC1BC,MAAAA,UAAU,EAAE,MAAMJ,YAAY,IAAIJ,OAAO,EADf;AAE1BS,MAAAA,SAAS,EAAE,MAAML,YAAY,IAAIH,OAAO,EAFd;AAG1BS,MAAAA,SAAS,EAAE,MAAML,UAAU,IAAIL,OAAO,EAHZ;AAI1BW,MAAAA,OAAO,EAAE,MAAMN,UAAU,IAAIJ,OAAO,EAJV;AAK1BW,MAAAA,IAAI,EAAEV,QALoB;AAM1BW,MAAAA,GAAG,EAAEV;AANqB,KAA5B;AASA,QAAMW,MAAM,GAAGP,MAAM,CAACD,QAAD,CAArB;;AAEA,QAAIQ,MAAJ,EAAY;AACVf,MAAAA,KAAK,CAACgB,cAAN;AACAD,MAAAA,MAAM,CAACf,KAAD,CAAN;AACD;AACF,GA1Be,EA2BhB,CAACT,KAAD,EAAQjB,YAAR,EAAsBF,WAAtB,EAAmCsB,QAAnC,CA3BgB,CAAlB;AA8BA,sBACK5B,KADL;AAEEmD,IAAAA,IAAI,EAAE,SAFR;AAGE,wBAAoB7C,WAHtB;AAIE2B,IAAAA,SAAS,EAAEzC,eAAe,CAACQ,KAAK,CAACiC,SAAP,EAAkBA,SAAlB;AAJ5B;AAMD;;AAkBD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmB,MAAT,CAAuCpD,KAAvC,EAAiD;AACtD,MAAM;AAAEqD,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA4CtD,KAAlD;AAAA,MAAoCO,SAApC,iCAAkDP,KAAlD;;AAEA,MAAM;AACJY,IAAAA,gBADI;AAEJR,IAAAA,QAFI;AAGJe,IAAAA,EAHI;AAIJV,IAAAA,eAJI;AAKJQ,IAAAA,iBALI;AAMJC,IAAAA,UANI;AAOJP,IAAAA;AAPI,MAQFU,cAAc,EARlB;AAUA,MAAMkC,GAAG,GAAGzD,KAAK,CAAC0D,MAAN,CAA0B,IAA1B,CAAZ;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,MAAMC,YAAY,GAAGtE,aAAa,CAAC;AACjCuE,IAAAA,QAAQ,EAAEC,OAAO,CAACN,UAAD,CADgB;AAEjCO,IAAAA,SAAS,EAAED,OAAO,CAACL,WAAD,CAFe;AAGjCO,IAAAA,OAAO,EAAE5C,iBAHwB;AAIjCc,IAAAA,OAAO,EAAEwB,GAAG,CAACO;AAJoB,GAAD,CAAlC;AAOA;AACF;AACA;;AACE,MAAM3D,KAAK,GAAGhB,aAAa,CAAC;AAC1B0E,IAAAA,OAAO,EAAE3C,UADiB;AAE1Ba,IAAAA,OAAO,EAAEwB,GAAG,CAACO;AAFa,GAAD,CAA3B;AAKA,MAAMC,UAAU,GAAG5D,KAAK,KAAKQ,aAA7B;;AAEA,MAAMqD,OAAO,GAAG,MAAM;AACpBvD,IAAAA,eAAe,CAACgD,YAAD,CAAf;AACA7C,IAAAA,gBAAgB,CAACT,KAAD,CAAhB;AACD,GAHD;;AAKA,MAAM8D,OAAO,GAAG,MAAM;AACpB,QAAMC,sBAAsB,GAAGb,UAAU,IAAIC,WAA7C;AACA,QAAMa,YAAY,GAAG,CAAC/D,QAAD,IAAa,CAAC8D,sBAAnC;;AAEA,QAAIC,YAAJ,EAAkB;AAChBvD,MAAAA,gBAAgB,CAACT,KAAD,CAAhB;AACD;AACF,GAPD;;AASA,MAAMiE,cAAc,GAAGlF,YAAY,cAC9BqB,SAD8B;AAEjCgD,IAAAA,GAAG,EAAE3D,SAAS,CAAC2D,GAAD,EAAMvD,KAAK,CAACuD,GAAZ,CAFmB;AAGjCF,IAAAA,UAHiC;AAIjCC,IAAAA,WAJiC;AAKjCU,IAAAA,OAAO,EAAExE,eAAe,CAACQ,KAAK,CAACgE,OAAP,EAAgBA,OAAhB;AALS,KAAnC;AAQA,MAAMK,IAAmC,GAAG,QAA5C;AAEA,sBACKD,cADL;AAEEjD,IAAAA,EAAE,EAAEmD,SAAS,CAACnD,EAAD,EAAKhB,KAAL,CAFf;AAGEgD,IAAAA,IAAI,EAAE,KAHR;AAIEoB,IAAAA,QAAQ,EAAER,UAAU,GAAG,CAAH,GAAO,CAAC,CAJ9B;AAKEM,IAAAA,IALF;AAME,qBAAiBN,UANnB;AAOE,qBAAiBS,cAAc,CAACrD,EAAD,EAAKhB,KAAL,CAPjC;AAQE8D,IAAAA,OAAO,EAAEZ,UAAU,GAAGoB,SAAH,GAAejF,eAAe,CAACQ,KAAK,CAACiE,OAAP,EAAgBA,OAAhB;AARnD;AAUD;;AAMD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASS,YAAT,CAAmD1E,KAAnD,EAA6D;AAClE,MAAM6D,OAAO,GAAGxC,cAAc,EAA9B;AAEA,MAAM;AAAEF,IAAAA,EAAF;AAAMR,IAAAA;AAAN,MAAwBkD,OAA9B;AAEA,MAAMc,aAAa,GAAGjF,gBAAgB,CAACM,KAAK,CAAC4E,QAAP,CAAtC;AAEA,MAAMA,QAAQ,GAAGD,aAAa,CAACE,GAAd,CAAkB,CAACC,KAAD,EAAQ3E,KAAR,kBACjCL,KAAK,CAACiF,YAAN,CAAmBD,KAAnB,EAAmC;AACjCf,IAAAA,UAAU,EAAE5D,KAAK,KAAKQ,aADW;AAEjCQ,IAAAA,EAAE,EAAEqD,cAAc,CAACrD,EAAD,EAAKhB,KAAL,CAFe;;AAGjC;AACN;AACA;AACM,uBAAmBmE,SAAS,CAACnD,EAAD,EAAKhB,KAAL;AANK,GAAnC,CADe,CAAjB;AAWA,sBAAYH,KAAZ;AAAmB4E,IAAAA;AAAnB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,WAAT,CAAqBhF,KAArB,EAAkC;AACvC,MAAM;AAAE+D,IAAAA,UAAF;AAAc5C,IAAAA,EAAd;AAAkByD,IAAAA;AAAlB,MAA6C5E,KAAnD;AAAA,MAAqCO,SAArC,iCAAmDP,KAAnD;;AACA,MAAM;AAAEK,IAAAA;AAAF,MAAagB,cAAc,EAAjC;AAEA;AACE;AACJ;AACA;AACIkD,IAAAA,QAAQ,EAAE;AAJZ,KAKKhE,SALL;AAMEqE,IAAAA,QAAQ,EAAE,CAACvE,MAAD,IAAW0D,UAAX,GAAwBa,QAAxB,GAAmC,IAN/C;AAOEzB,IAAAA,IAAI,EAAE,UAPR;AAQE8B,IAAAA,MAAM,EAAE,CAAClB,UARX;AASE5C,IAAAA;AATF;AAWD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+D,eAAT,GAAgD;AACrD,MAAMrB,OAAO,GAAGxC,cAAc,EAA9B;AAEA,MAAM;AAAEV,IAAAA,aAAF;AAAiBL,IAAAA,WAAjB;AAA8BY,IAAAA;AAA9B,MAA6C2C,OAAnD;AAEA,MAAMtB,YAAY,GAAGjC,WAAW,KAAK,YAArC;AACA,MAAMkC,UAAU,GAAGlC,WAAW,KAAK,UAAnC,CANqD,CAQrD;;AACA,MAAM,CAAC6E,IAAD,EAAOC,OAAP,IAAkBtF,KAAK,CAACY,QAAN,CAAe,MAAM;AAC3C,QAAI6B,YAAJ,EAAkB,OAAO;AAAE8C,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,KAAK,EAAE;AAAlB,KAAP;AAClB,QAAI9C,UAAJ,EAAgB,OAAO;AAAE+C,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,MAAM,EAAE;AAAlB,KAAP;AAChB,WAAOf,SAAP;AACD,GAJuB,CAAxB;AAMA,MAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgC5F,KAAK,CAACY,QAAN,CAAe,KAAf,CAAtC,CAfqD,CAiBrD;;AACAnB,EAAAA,mBAAmB,CAAC,MAAM;AAAA;;AACxB,QAAII,WAAW,CAACgB,aAAD,CAAf,EAAgC,OAAO8D,SAAP;AAEhC,QAAM3C,GAAG,GAAGZ,UAAU,CAACQ,WAAX,CAAuBf,aAAvB,CAAZ;AACA,QAAMgF,OAAO,GAAG7D,GAAH,oCAAGA,GAAG,CAAEC,OAAR,qBAAG,aAAc6D,qBAAd,EAAhB,CAJwB,CAMxB;;AACA,QAAIrD,YAAY,IAAIoD,OAApB,EAA6B;AAC3B,UAAM;AAAEN,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAkBK,OAAxB;AACAP,MAAAA,OAAO,CAAC;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAD,CAAP;AACD,KAVuB,CAYxB;;;AACA,QAAI9C,UAAU,IAAImD,OAAlB,EAA2B;AACzB,UAAM;AAAEJ,QAAAA,GAAF;AAAOC,QAAAA;AAAP,UAAkBG,OAAxB;AACAP,MAAAA,OAAO,CAAC;AAAEG,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD,CAAP;AACD,KAhBuB,CAkBxB;AACA;;;AACA,QAAMrE,EAAE,GAAG0E,qBAAqB,CAAC,MAAM;AACrCH,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAF+B,CAAhC;AAIA,WAAO,MAAM;AACX,UAAIvE,EAAJ,EAAQ;AACN2E,QAAAA,oBAAoB,CAAC3E,EAAD,CAApB;AACD;AACF,KAJD;AAKD,GA7BkB,EA6BhB,CAACR,aAAD,EAAgB4B,YAAhB,EAA8BC,UAA9B,EAA0CtB,UAAU,CAACQ,WAArD,CA7BgB,CAAnB;AA+BA;AACEqE,IAAAA,QAAQ,EAAE,UADZ;AAEEC,IAAAA,UAAU,EAAEP,WAAW,GAAG,sCAAH,GAA4C;AAFrE,KAGKN,IAHL;AAKD;;AAED,SAASb,SAAT,CAAmBnD,EAAnB,EAA+BhB,KAA/B,EAA8C;AAC5C,SAAUgB,EAAV,cAAqBhB,KAArB;AACD;;AAED,SAASqE,cAAT,CAAwBrD,EAAxB,EAAoChB,KAApC,EAAmD;AACjD,SAAUgB,EAAV,mBAA0BhB,KAA1B;AACD","sourcesContent":["import { useClickable, UseClickableProps } from \"@chakra-ui/clickable\"\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\"\nimport {\n  useControllableState,\n  useId,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  createContext,\n  Dict,\n  EventKeyMap,\n  getValidChildren,\n  isUndefined,\n  mergeRefs,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface UseTabsProps {\n  /**\n   * The orientation of the tab list.\n   */\n  orientation?: \"vertical\" | \"horizontal\"\n  /**\n   * If `true`, the tabs will be manually activated and\n   * display its panel by pressing Space or Enter.\n   *\n   * If `false`, the tabs will be automatically activated\n   * and their panel is displayed when they receive focus.\n   */\n  isManual?: boolean\n  /**\n   * Callback when the index (controlled or un-controlled) changes.\n   */\n  onChange?: (index: number) => void\n  /**\n   * The index of the selected tab (in controlled mode)\n   */\n  index?: number\n  /**\n   * The initial index of the selected tab (in uncontrolled mode)\n   */\n  defaultIndex?: number\n  /**\n   * The id of the tab\n   */\n  id?: string\n  /**\n   * Performance 🚀:\n   * If `true`, the TabPanel rendering will be deferred\n   * until it is open.\n   */\n  isLazy?: boolean\n}\n\n/**\n * Tabs hooks that provides all the states, and accessibility\n * helpers to keep all things working properly.\n *\n * Its returned object will be passed unto a Context Provider\n * so all child components can read from it.\n * There is no document link yet\n * @see Docs https://chakra-ui.com/docs/components/useTabs\n */\nexport function useTabs(props: UseTabsProps) {\n  const {\n    defaultIndex,\n    onChange,\n    index,\n    isManual,\n    isLazy,\n    orientation = \"horizontal\",\n    ...htmlProps\n  } = props\n\n  /**\n   * We use this to keep track of the index of the focused tab.\n   *\n   * Tabs can be automatically activated, this means selection follows focus.\n   * When we navigate with the arrow keys, we move focus and selection to next/prev tab\n   *\n   * Tabs can also be manually activated, this means selection does not follow focus.\n   * When we navigate with the arrow keys, we only move focus NOT selection. The user\n   * will need not manually activate the tab using `Enter` or `Space`.\n   *\n   * This is why we need to keep track of the `focusedIndex` and `selectedIndex`\n   */\n  const [focusedIndex, setFocusedIndex] = React.useState(defaultIndex ?? 0)\n\n  const [selectedIndex, setSelectedIndex] = useControllableState({\n    defaultValue: defaultIndex ?? 0,\n    value: index,\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n      onChange: \"onChange\",\n    },\n  })\n\n  /**\n   * Sync focused `index` with controlled `selectedIndex` (which is the `props.index`)\n   */\n  React.useEffect(() => {\n    if (!isUndefined(index)) {\n      setFocusedIndex(index)\n    }\n  }, [index])\n\n  /**\n   * Think of `useDescendants` as a register for the tab nodes.\n   *\n   * This manager is used to store only the tab nodes that are not disabled, and focusable.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\" and \"Tab 3\", since `Tab 2` is disabled\n   */\n  const enabledDomContext = useDescendants()\n\n  /**\n   * This manager is used to store all tab nodes whether disabled or not.\n   * If we have the following code\n   *\n   * ```jsx\n   * <Tab>Tab 1</Tab>\n   * <Tab isDisabled>Tab 2</Tab>\n   * <Tab>Tab 3</Tab>\n   * ```\n   *\n   * The manager will only hold references to \"Tab 1\", \"Tab 2\" \"Tab 3\".\n   *\n   * We need this for correct indexing of tabs in event a tab is disabled\n   */\n  const domContext = useDescendants()\n\n  /**\n   * generate a unique id or use user-provided id for\n   * the tabs widget\n   */\n  const id = useId(props.id, `tabs`)\n\n  return {\n    id,\n    selectedIndex,\n    focusedIndex,\n    setSelectedIndex,\n    setFocusedIndex,\n    isManual,\n    isLazy,\n    orientation,\n    enabledDomContext,\n    domContext,\n    htmlProps,\n  }\n}\n\nexport type UseTabsReturn = Omit<ReturnType<typeof useTabs>, \"htmlProps\">\n\nconst [TabsProvider, useTabsContext] = createContext<UseTabsReturn>({\n  name: \"TabsContext\",\n  errorMessage:\n    \"useTabsContext: `context` is undefined. Seems you forgot to wrap all tabs components within <Tabs />\",\n})\n\nexport { TabsProvider }\n\ntype Child = React.ReactElement<any>\n\nexport interface UseTabListProps {\n  children?: React.ReactNode\n  onKeyDown?: React.KeyboardEventHandler\n  ref?: React.Ref<any>\n}\n\n/**\n * Tabs hook to manage multiple tab buttons,\n * and ensures only one tab is selected per time.\n *\n * @param props props object for the tablist\n */\nexport function useTabList<P extends UseTabListProps>(props: P) {\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    orientation,\n    enabledDomContext,\n  } = useTabsContext()\n\n  const count = enabledDomContext.descendants.length\n\n  /**\n   * Function to update the selected tab index\n   */\n  const setIndex = React.useCallback(\n    (index: number) => {\n      const tab = enabledDomContext.descendants[index]\n      if (tab?.element) {\n        tab.element.focus()\n        setFocusedIndex(index)\n      }\n    },\n    [enabledDomContext.descendants, setFocusedIndex],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      const nextTab = () => setIndex((focusedIndex + 1) % count)\n      const prevTab = () => setIndex((focusedIndex - 1 + count) % count)\n      const firstTab = () => setIndex(0)\n      const lastTab = () => setIndex(count - 1)\n\n      const isHorizontal = orientation === \"horizontal\"\n      const isVertical = orientation === \"vertical\"\n\n      const eventKey = normalizeEventKey(event)\n      const keyMap: EventKeyMap = {\n        ArrowRight: () => isHorizontal && nextTab(),\n        ArrowLeft: () => isHorizontal && prevTab(),\n        ArrowDown: () => isVertical && nextTab(),\n        ArrowUp: () => isVertical && prevTab(),\n        Home: firstTab,\n        End: lastTab,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [count, focusedIndex, orientation, setIndex],\n  )\n\n  return {\n    ...props,\n    role: \"tablist\",\n    \"aria-orientation\": orientation,\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nexport type UseTabListReturn = ReturnType<typeof useTabList>\n\nexport interface UseTabOptions {\n  id?: string\n  isSelected?: boolean\n  panelId?: string\n  /**\n   * If `true`, the `Tab` won't be toggleable\n   */\n  isDisabled?: boolean\n}\n\nexport interface UseTabProps\n  extends Omit<UseClickableProps, \"color\">,\n    UseTabOptions {}\n\n/**\n * Tabs hook to manage each tab button.\n *\n * A tab can be disabled and focusable, or both,\n * hence the use of `useClickable` to handle this scenario\n */\nexport function useTab<P extends UseTabProps>(props: P) {\n  const { isDisabled, isFocusable, ...htmlProps } = props\n\n  const {\n    setSelectedIndex,\n    isManual,\n    id,\n    setFocusedIndex,\n    enabledDomContext,\n    domContext,\n    selectedIndex,\n  } = useTabsContext()\n\n  const ref = React.useRef<HTMLElement>(null)\n\n  /**\n   * Think of `useDescendant` as the function that registers tab node\n   * to the `enabledDomContext`, and returns its index.\n   *\n   * Tab is registered if it is enabled or focusable\n   */\n  const enabledIndex = useDescendant({\n    disabled: Boolean(isDisabled),\n    focusable: Boolean(isFocusable),\n    context: enabledDomContext,\n    element: ref.current,\n  })\n\n  /**\n   * Registers all tabs (whether disabled or not)\n   */\n  const index = useDescendant({\n    context: domContext,\n    element: ref.current,\n  })\n\n  const isSelected = index === selectedIndex\n\n  const onClick = () => {\n    setFocusedIndex(enabledIndex)\n    setSelectedIndex(index)\n  }\n\n  const onFocus = () => {\n    const isDisabledButFocusable = isDisabled && isFocusable\n    const shouldSelect = !isManual && !isDisabledButFocusable\n\n    if (shouldSelect) {\n      setSelectedIndex(index)\n    }\n  }\n\n  const clickableProps = useClickable({\n    ...htmlProps,\n    ref: mergeRefs(ref, props.ref),\n    isDisabled,\n    isFocusable,\n    onClick: callAllHandlers(props.onClick, onClick),\n  })\n\n  const type: \"button\" | \"submit\" | \"reset\" = \"button\"\n\n  return {\n    ...clickableProps,\n    id: makeTabId(id, index),\n    role: \"tab\",\n    tabIndex: isSelected ? 0 : -1,\n    type,\n    \"aria-selected\": isSelected,\n    \"aria-controls\": makeTabPanelId(id, index),\n    onFocus: isDisabled ? undefined : callAllHandlers(props.onFocus, onFocus),\n  }\n}\n\nexport interface UseTabPanelsProps {\n  children?: React.ReactNode\n}\n\n/**\n * Tabs hook for managing the visibility of multiple tab panels.\n *\n * Since only one panel can be show at a time, we use `cloneElement`\n * to inject `selected` panel to each TabPanel.\n *\n * It returns a cloned version of its children with\n * all functionality included.\n */\nexport function useTabPanels<P extends UseTabPanelsProps>(props: P) {\n  const context = useTabsContext()\n\n  const { id, selectedIndex } = context\n\n  const validChildren = getValidChildren(props.children)\n\n  const children = validChildren.map((child, index) =>\n    React.cloneElement(child as Child, {\n      isSelected: index === selectedIndex,\n      id: makeTabPanelId(id, index),\n      /**\n       * Refers to the associated tab element, and also provides an accessible name to the tab panel.\n       */\n      \"aria-labelledby\": makeTabId(id, index),\n    }),\n  )\n\n  return { ...props, children }\n}\n\n/**\n * Tabs hook for managing the visible/hidden states\n * of the tab panel.\n *\n * @param props props object for the tab panel\n */\nexport function useTabPanel(props: Dict) {\n  const { isSelected, id, children, ...htmlProps } = props\n  const { isLazy } = useTabsContext()\n\n  return {\n    /**\n     * Puts the tabpanel in the page `Tab` sequence.\n     */\n    tabIndex: 0,\n    ...htmlProps,\n    children: !isLazy || isSelected ? children : null,\n    role: \"tabpanel\",\n    hidden: !isSelected,\n    id,\n  }\n}\n\n/**\n * Tabs hook to show an animated indicators that\n * follows the active tab.\n *\n * The way we do it is by measuring the DOM Rect (or dimensions)\n * of the active tab, and return that as CSS style for\n * the indicator.\n */\nexport function useTabIndicator(): React.CSSProperties {\n  const context = useTabsContext()\n\n  const { selectedIndex, orientation, domContext } = context\n\n  const isHorizontal = orientation === \"horizontal\"\n  const isVertical = orientation === \"vertical\"\n\n  // Get the clientRect of the selected tab\n  const [rect, setRect] = React.useState(() => {\n    if (isHorizontal) return { left: 0, width: 0 }\n    if (isVertical) return { top: 0, height: 0 }\n    return undefined\n  })\n\n  const [hasMeasured, setHasMeasured] = React.useState(false)\n\n  // Update the selected tab rect when the selectedIndex changes\n  useSafeLayoutEffect(() => {\n    if (isUndefined(selectedIndex)) return undefined\n\n    const tab = domContext.descendants[selectedIndex]\n    const tabRect = tab?.element?.getBoundingClientRect()\n\n    // Horizontal Tab: Calculate width and left distance\n    if (isHorizontal && tabRect) {\n      const { left, width } = tabRect\n      setRect({ left, width })\n    }\n\n    // Vertical Tab: Calculate height and top distance\n    if (isVertical && tabRect) {\n      const { top, height } = tabRect\n      setRect({ top, height })\n    }\n\n    // Prevent unwanted transition from 0 to measured rect\n    // by setting the measured state in the next tick\n    const id = requestAnimationFrame(() => {\n      setHasMeasured(true)\n    })\n\n    return () => {\n      if (id) {\n        cancelAnimationFrame(id)\n      }\n    }\n  }, [selectedIndex, isHorizontal, isVertical, domContext.descendants])\n\n  return {\n    position: \"absolute\",\n    transition: hasMeasured ? \"all 200ms cubic-bezier(0, 0, 0.2, 1)\" : \"none\",\n    ...rect,\n  }\n}\n\nfunction makeTabId(id: string, index: number) {\n  return `${id}--tab-${index}`\n}\n\nfunction makeTabPanelId(id: string, index: number) {\n  return `${id}--tabpanel-${index}`\n}\n"],"file":"use-tabs.js"}