{"version":3,"sources":["../../src/tabs.tsx"],"names":["Tabs","props","ref","styles","children","className","rest","htmlProps","ctx","context","React","useMemo","rootProps","root","__DEV__","displayName","Tab","tabProps","tabStyles","outline","display","alignItems","justifyContent","tab","TabList","tablistProps","tablistStyles","tablist","TabPanel","panelProps","tabpanel","TabPanels","panelsProps","TabIndicator","indicatorStyle","style","indicator"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  TabsProvider,\n  useTab,\n  useTabIndicator,\n  useTabList,\n  UseTabListProps,\n  UseTabOptions,\n  useTabPanel,\n  useTabPanels,\n  useTabs,\n  UseTabsProps,\n} from \"./use-tabs\"\n\ninterface TabsOptions {\n  /**\n   * If `true`, tabs will stretch to width of the tablist.\n   */\n  isFitted?: boolean\n  /**\n   * The alignment of the tabs\n   */\n  align?: \"start\" | \"end\" | \"center\"\n}\n\nexport interface TabsProps\n  extends UseTabsProps,\n    ThemingProps,\n    Omit<HTMLChakraProps<\"div\">, \"onChange\">,\n    TabsOptions {\n  children: React.ReactNode\n}\n\n/**\n * Tabs\n *\n * Provides context and logic for all tabs components. It doesn't render\n * any DOM node.\n */\nexport const Tabs = forwardRef<TabsProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Tabs\", props)\n  const { children, className, ...rest } = omitThemingProps(props)\n\n  const { htmlProps, ...ctx } = useTabs(rest)\n  const context = React.useMemo(() => ctx, [ctx])\n\n  const rootProps = omit(htmlProps as any, [\"isFitted\"])\n\n  return (\n    <TabsProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          className={cx(\"chakra-tabs\", className)}\n          ref={ref}\n          {...rootProps}\n          __css={styles.root}\n        >\n          {children}\n        </chakra.div>\n      </StylesProvider>\n    </TabsProvider>\n  )\n})\n\nif (__DEV__) {\n  Tabs.displayName = \"Tabs\"\n}\n\nexport interface TabProps extends UseTabOptions, HTMLChakraProps<\"button\"> {}\n\n/**\n * Tab button used to activate a specific tab panel. It renders a `button`,\n * and is responsible for automatic and manual selection modes.\n */\nexport const Tab = forwardRef<TabProps, \"button\">((props, ref) => {\n  const styles = useStyles()\n  const tabProps = useTab({ ...props, ref })\n\n  const tabStyles: SystemStyleObject = {\n    outline: \"0\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    ...styles.tab,\n  }\n\n  return (\n    <chakra.button\n      {...tabProps}\n      className={cx(\"chakra-tabs__tab\", props.className)}\n      __css={tabStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  Tab.displayName = \"Tab\"\n}\n\nexport interface TabListProps\n  extends UseTabListProps,\n    Omit<HTMLChakraProps<\"div\">, \"onKeyDown\" | \"ref\"> {}\n\n/**\n * TabList is used to manage a list of tab buttons. It renders a `div` by default,\n * and is responsible the keyboard interaction between tabs.\n */\nexport const TabList = forwardRef<TabListProps, \"div\">((props, ref) => {\n  const tablistProps = useTabList({ ...props, ref })\n\n  const styles = useStyles()\n\n  const tablistStyles: SystemStyleObject = {\n    display: \"flex\",\n    ...styles.tablist,\n  }\n\n  return (\n    <chakra.div\n      {...tablistProps}\n      className={cx(\"chakra-tabs__tablist\", props.className)}\n      __css={tablistStyles}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabList.displayName = \"TabList\"\n}\n\nexport interface TabPanelProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n * Used to render the content for a specific tab.\n */\nexport const TabPanel = forwardRef<TabPanelProps, \"div\">((props, ref) => {\n  const panelProps = useTabPanel({ ...props, ref })\n  const styles = useStyles()\n\n  return (\n    <chakra.div\n      outline=\"0\"\n      {...panelProps}\n      className={cx(\"chakra-tabs__tab-panel\", props.className)}\n      __css={styles.tabpanel}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanel.displayName = \"TabPanel\"\n}\n\nexport interface TabPanelsProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabPanel\n *\n * Used to manage the rendering of multiple tab panels. It uses\n * `cloneElement` to hide/show tab panels.\n *\n * It renders a `div` by default.\n */\nexport const TabPanels = forwardRef<TabPanelsProps, \"div\">((props, ref) => {\n  const panelsProps = useTabPanels(props)\n  return (\n    <chakra.div\n      {...panelsProps}\n      width=\"100%\"\n      ref={ref}\n      className={cx(\"chakra-tabs__tab-panels\", props.className)}\n    />\n  )\n})\n\nif (__DEV__) {\n  TabPanels.displayName = \"TabPanels\"\n}\n\nexport interface TabIndicatorProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * TabIndicator\n *\n * Used to render an active tab indicator that animates between\n * selected tabs.\n */\nexport const TabIndicator = forwardRef<TabIndicatorProps, \"div\">(\n  (props, ref) => {\n    const indicatorStyle = useTabIndicator()\n    const style = {\n      ...props.style,\n      ...indicatorStyle,\n    }\n\n    const styles = useStyles()\n\n    return (\n      <chakra.div\n        ref={ref}\n        {...props}\n        className={cx(\"chakra-tabs__tab-indicator\", props.className)}\n        style={style}\n        __css={styles.indicator}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  TabIndicator.displayName = \"TabIndicator\"\n}\n"],"file":"tabs.js"}