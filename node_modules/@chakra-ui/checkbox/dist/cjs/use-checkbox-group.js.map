{"version":3,"sources":["../../src/use-checkbox-group.ts"],"names":["useCheckboxGroup","props","defaultValue","valueProp","value","onChangeProp","onChange","isNative","valueState","setValue","isControlled","updateValue","nextState","eventOrValue","isChecked","target","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey"],"mappings":";;;;;AAAA;;AACA;;AACA;;;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAT,CAA0BC,KAA1B,EAA6D;AAAA,MAAnCA,KAAmC;AAAnCA,IAAAA,KAAmC,GAAJ,EAAI;AAAA;;AAAA,eAM9DA,KAN8D;AAAA,MAEhEC,YAFgE,UAEhEA,YAFgE;AAAA,MAGzDC,SAHyD,UAGhEC,KAHgE;AAAA,MAItDC,YAJsD,UAIhEC,QAJgE;AAAA,MAKhEC,QALgE,UAKhEA,QALgE;;AAAA,kBAQnC,qBAASL,YAAY,IAAI,EAAzB,CARmC;AAAA,MAQ3DM,UAR2D;AAAA,MAQ/CC,QAR+C;;AAAA,6BASpC,gCAAoBN,SAApB,EAA+BK,UAA/B,CAToC;AAAA,MAS3DE,YAT2D;AAAA,MAS7CN,KAT6C;;AAWlE,MAAMO,WAAW,GAAG,wBAClB,UAACC,SAAD,EAAiC;AAC/B,QAAI,CAACF,YAAL,EAAmB;AACjBD,MAAAA,QAAQ,CAACG,SAAD,CAAR;AACD;;AAEDP,IAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAGO,SAAH,CAAZ;AACD,GAPiB,EAQlB,CAACF,YAAD,EAAeL,YAAf,CARkB,CAApB;AAWA,MAAMC,QAAQ,GAAG,wBACf,UAACO,YAAD,EAAgC;AAC9B,QAAI,CAACT,KAAL,EAAY;AAEZ,QAAMU,SAAS,GAAG,yBAAaD,YAAb,IACdA,YAAY,CAACE,MAAb,CAAoBC,OADN,GAEd,CAACZ,KAAK,CAACa,QAAN,CAAeJ,YAAf,CAFL;AAIA,QAAMK,aAAa,GAAG,yBAAaL,YAAb,IAClBA,YAAY,CAACE,MAAb,CAAoBX,KADF,GAElBS,YAFJ;AAIA,QAAMM,SAAS,GAAGL,SAAS,GACvB,oBAAQV,KAAR,EAAec,aAAf,CADuB,GAEvB,uBAAWd,KAAX,EAAkBc,aAAlB,CAFJ;AAIAP,IAAAA,WAAW,CAACQ,SAAD,CAAX;AACD,GAjBc,EAkBf,CAACR,WAAD,EAAcP,KAAd,CAlBe,CAAjB;AAqBA,SAAO;AACLA,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,QAAQ,EAARA,QAFK;AAGLG,IAAAA,QAAQ,EAAEE,WAHL;AAILS,IAAAA,gBAAgB,EAAE,0BAACnB,KAAD,EAAsB;AAAA;;AAAA,UAArBA,KAAqB;AAArBA,QAAAA,KAAqB,GAAP,EAAO;AAAA;;AACtC,UAAMoB,UAAU,GAAGd,QAAQ,GAAG,SAAH,GAAe,WAA1C;AACA,0BACKN,KADL,6BAEGoB,UAFH,IAEgBjB,KAAK,CAACa,QAAN,CAAehB,KAAK,CAACG,KAArB,CAFhB,YAGEE,QAHF,GAGEA,QAHF;AAKD;AAXI,GAAP;AAaD","sourcesContent":["import { useState, useCallback, ChangeEvent } from \"react\"\nimport { useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  isInputEvent,\n  addItem,\n  removeItem,\n  StringOrNumber,\n  Dict,\n} from \"@chakra-ui/utils\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n    isNative,\n  } = props\n\n  const [valueState, setValue] = useState(defaultValue || [])\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const updateValue = useCallback(\n    (nextState: StringOrNumber[]) => {\n      if (!isControlled) {\n        setValue(nextState)\n      }\n\n      onChangeProp?.(nextState)\n    },\n    [isControlled, onChangeProp],\n  )\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      updateValue(nextValue)\n    },\n    [updateValue, value],\n  )\n\n  return {\n    value,\n    onChange,\n    setValue: updateValue,\n    getCheckboxProps: (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange,\n      }\n    },\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"file":"use-checkbox-group.js"}