{"version":3,"sources":["../../src/checkbox-group.tsx"],"names":["name","strict","CheckboxGroupProvider","useCheckboxGroupContext","CheckboxGroup","props","colorScheme","size","variant","children","value","onChange","group","React","useMemo","__DEV__","displayName"],"mappings":";;;;;AACA;;AACA;;AACA;;;;;;qBAgByD,0BAEvD;AACAA,EAAAA,IAAI,EAAE,sBADN;AAEAC,EAAAA,MAAM,EAAE;AAFR,CAFuD,C;IAAlDC,qB;IAAuBC,uB;;;;AAS9B;AACA;AACA;AACA;AACA;AACA;AACO,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,CAACC,KAAD,EAAW;AAAA,MAC5DC,WAD4D,GACnBD,KADmB,CAC5DC,WAD4D;AAAA,MAC/CC,IAD+C,GACnBF,KADmB,CAC/CE,IAD+C;AAAA,MACzCC,OADyC,GACnBH,KADmB,CACzCG,OADyC;AAAA,MAChCC,QADgC,GACnBJ,KADmB,CAChCI,QADgC;;AAAA,0BAExC,yCAAiBJ,KAAjB,CAFwC;AAAA,MAE5DK,KAF4D,qBAE5DA,KAF4D;AAAA,MAErDC,QAFqD,qBAErDA,QAFqD;;AAIpE,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CACZ;AAAA,WAAO;AACLP,MAAAA,IAAI,EAAJA,IADK;AAELI,MAAAA,QAAQ,EAARA,QAFK;AAGLL,MAAAA,WAAW,EAAXA,WAHK;AAILI,MAAAA,KAAK,EAALA,KAJK;AAKLF,MAAAA,OAAO,EAAPA;AALK,KAAP;AAAA,GADY,EAQZ,CAACD,IAAD,EAAOI,QAAP,EAAiBL,WAAjB,EAA8BI,KAA9B,EAAqCF,OAArC,CARY,CAAd;AAWA,sBAAO,oBAAC,qBAAD;AAAuB,IAAA,KAAK,EAAEI;AAA9B,KAAsCH,QAAtC,CAAP;AACD,CAhBM;;;;AAkBP,IAAIM,cAAJ,EAAa;AACXX,EAAAA,aAAa,CAACY,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import { ThemingProps } from \"@chakra-ui/system\"\nimport { createContext, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useCheckboxGroup,\n  UseCheckboxGroupProps,\n  UseCheckboxGroupReturn,\n} from \"./use-checkbox-group\"\n\nexport interface CheckboxGroupProps\n  extends UseCheckboxGroupProps,\n    Omit<ThemingProps, \"orientation\"> {\n  children?: React.ReactNode\n}\n\nexport interface CheckboxGroupContext\n  extends Pick<UseCheckboxGroupReturn, \"onChange\" | \"value\">,\n    Omit<ThemingProps, \"orientation\"> {}\n\nconst [CheckboxGroupProvider, useCheckboxGroupContext] = createContext<\n  CheckboxGroupContext\n>({\n  name: \"CheckboxGroupContext\",\n  strict: false,\n})\n\nexport { useCheckboxGroupContext }\n\n/**\n * Used for multiple checkboxes which are bound in one group,\n * and it indicates whether one or more options are selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const CheckboxGroup: React.FC<CheckboxGroupProps> = (props) => {\n  const { colorScheme, size, variant, children } = props\n  const { value, onChange } = useCheckboxGroup(props)\n\n  const group = React.useMemo(\n    () => ({\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n    }),\n    [size, onChange, colorScheme, value, variant],\n  )\n\n  return <CheckboxGroupProvider value={group}>{children}</CheckboxGroupProvider>\n}\n\nif (__DEV__) {\n  CheckboxGroup.displayName = \"CheckboxGroup\"\n}\n"],"file":"checkbox-group.js"}