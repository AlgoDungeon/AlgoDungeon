{"version":3,"sources":["../../src/use-checkbox.ts"],"names":["useCheckbox","props","defaultIsChecked","defaultChecked","checkedProp","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovered","isActive","setActive","ref","checkedState","setCheckedState","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","type","onBlur","onFocus","required","disabled","readOnly","style","visuallyHiddenStyle","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"mappings":"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","sourcesContent":["import {\n  useBoolean,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  callAllHandlers,\n  dataAttr,\n  mergeRefs,\n  PropGetter,\n  warn,\n} from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes..\n   */\n  onChange?: (event: ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    ...htmlProps\n  } = props\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const ref = useRef<HTMLInputElement>(null)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChange?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChange,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const notInSync =\n      (ref.current.checked && !isChecked) || (!ref.current.checked && isChecked)\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked)\n    }\n  }, [ref.current])\n\n  const getCheckboxProps: PropGetter = (props = {}, forwardedRef = null) => {\n    const onPressDown = (event: React.MouseEvent) => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault()\n      setActive.on()\n    }\n\n    return {\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n    }\n  }\n\n  const getInputProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: mergeRefs(ref, forwardedRef),\n    type: \"checkbox\",\n    name,\n    value,\n    id,\n    onChange: callAllHandlers(props.onChange, handleChange),\n    onBlur: callAllHandlers(props.onBlur, setFocused.off),\n    onFocus: callAllHandlers(props.onFocus, setFocused.on),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n    onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n    required: isRequired,\n    checked: isChecked,\n    disabled: trulyDisabled,\n    readOnly: isReadOnly,\n    \"aria-invalid\": isInvalid,\n    \"aria-disabled\": isDisabled,\n    style: visuallyHiddenStyle,\n  })\n\n  const getLabelProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: forwardedRef,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"],"file":"use-checkbox.js"}