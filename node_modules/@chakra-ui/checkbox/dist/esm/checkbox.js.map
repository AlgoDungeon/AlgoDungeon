{"version":3,"sources":["../../src/checkbox.tsx"],"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","dataAttr","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","StyledControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","StyledContainer","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","Icon","isChecked","isCheckedProp","onChange","onChangeProp","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","htmlProps","_className","inputProps","labelProps","checkboxProps","iconStyles","opacity","isIndeterminate","transform","transition","fontSize","color","clonedIcon","cloneElement","__css","container","isDisabled","control","ml","label","displayName"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__, dataAttr } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst StyledControl = chakra(\"div\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst StyledContainer = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype Omitted =\n  | \"size\"\n  | \"checked\"\n  | \"defaultChecked\"\n  | \"onChange\"\n  | \"onBlur\"\n  | \"value\"\n\ntype StyledControlProps = Omit<HTMLChakraProps<\"div\">, Omitted>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends StyledControlProps,\n    BaseInputProps,\n    ThemingProps,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/docs/form/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(mergedProps)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon: Icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    htmlProps,\n  } = useCheckbox({\n    ...rest,\n    isChecked,\n    onChange,\n  })\n\n  const _className = cx(\"chakra-checkbox\", className)\n\n  const inputProps = getInputProps({}, ref)\n  const labelProps = getLabelProps()\n  const checkboxProps = getCheckboxProps()\n\n  const iconStyles: SystemStyleObject = {\n    opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n    transform:\n      state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n    transition: \"transform 200ms\",\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon,\n  }\n\n  const clonedIcon = React.cloneElement(Icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <StyledContainer\n      __css={styles.container}\n      data-disabled={dataAttr(state.isDisabled)}\n      className={_className}\n      {...htmlProps}\n    >\n      <input className=\"chakra-checkbox__input\" {...inputProps} />\n      <StyledControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...checkboxProps}\n      >\n        {clonedIcon}\n      </StyledControl>\n      {children && (\n        <chakra.div\n          className=\"chakra-checkbox__label\"\n          {...labelProps}\n          __css={{\n            ml: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.div>\n      )}\n    </StyledContainer>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"],"file":"checkbox.js"}