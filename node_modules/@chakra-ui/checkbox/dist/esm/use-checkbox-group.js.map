{"version":3,"sources":["../../src/use-checkbox-group.ts"],"names":["useState","useCallback","useControllableProp","isInputEvent","addItem","removeItem","useCheckboxGroup","props","defaultValue","value","valueProp","onChange","onChangeProp","isNative","valueState","setValue","isControlled","updateValue","nextState","eventOrValue","isChecked","target","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAmD,OAAnD;AACA,SAASC,mBAAT,QAAoC,kBAApC;AACA,SACEC,YADF,EAEEC,OAFF,EAGEC,UAHF,QAMO,kBANP;;AAgCA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAA6D;AAAA,MAAnCA,KAAmC;AAAnCA,IAAAA,KAAmC,GAAJ,EAAI;AAAA;;AAClE,MAAM;AACJC,IAAAA,YADI;AAEJC,IAAAA,KAAK,EAAEC,SAFH;AAGJC,IAAAA,QAAQ,EAAEC,YAHN;AAIJC,IAAAA;AAJI,MAKFN,KALJ;AAOA,MAAM,CAACO,UAAD,EAAaC,QAAb,IAAyBf,QAAQ,CAACQ,YAAY,IAAI,EAAjB,CAAvC;AACA,MAAM,CAACQ,YAAD,EAAeP,KAAf,IAAwBP,mBAAmB,CAACQ,SAAD,EAAYI,UAAZ,CAAjD;AAEA,MAAMG,WAAW,GAAGhB,WAAW,CAC5BiB,SAAD,IAAiC;AAC/B,QAAI,CAACF,YAAL,EAAmB;AACjBD,MAAAA,QAAQ,CAACG,SAAD,CAAR;AACD;;AAEDN,IAAAA,YAAY,QAAZ,YAAAA,YAAY,CAAGM,SAAH,CAAZ;AACD,GAP4B,EAQ7B,CAACF,YAAD,EAAeJ,YAAf,CAR6B,CAA/B;AAWA,MAAMD,QAAQ,GAAGV,WAAW,CACzBkB,YAAD,IAAgC;AAC9B,QAAI,CAACV,KAAL,EAAY;AAEZ,QAAMW,SAAS,GAAGjB,YAAY,CAACgB,YAAD,CAAZ,GACdA,YAAY,CAACE,MAAb,CAAoBC,OADN,GAEd,CAACb,KAAK,CAACc,QAAN,CAAeJ,YAAf,CAFL;AAIA,QAAMK,aAAa,GAAGrB,YAAY,CAACgB,YAAD,CAAZ,GAClBA,YAAY,CAACE,MAAb,CAAoBZ,KADF,GAElBU,YAFJ;AAIA,QAAMM,SAAS,GAAGL,SAAS,GACvBhB,OAAO,CAACK,KAAD,EAAQe,aAAR,CADgB,GAEvBnB,UAAU,CAACI,KAAD,EAAQe,aAAR,CAFd;AAIAP,IAAAA,WAAW,CAACQ,SAAD,CAAX;AACD,GAjByB,EAkB1B,CAACR,WAAD,EAAcR,KAAd,CAlB0B,CAA5B;AAqBA,SAAO;AACLA,IAAAA,KADK;AAELE,IAAAA,QAFK;AAGLI,IAAAA,QAAQ,EAAEE,WAHL;AAILS,IAAAA,gBAAgB,EAAE,0BAACnB,KAAD,EAAsB;AAAA,UAArBA,KAAqB;AAArBA,QAAAA,KAAqB,GAAP,EAAO;AAAA;;AACtC,UAAMoB,UAAU,GAAGd,QAAQ,GAAG,SAAH,GAAe,WAA1C;AACA,0BACKN,KADL;AAEE,SAACoB,UAAD,GAAclB,KAAK,CAACc,QAAN,CAAehB,KAAK,CAACE,KAArB,CAFhB;AAGEE,QAAAA;AAHF;AAKD;AAXI,GAAP;AAaD","sourcesContent":["import { useState, useCallback, ChangeEvent } from \"react\"\nimport { useControllableProp } from \"@chakra-ui/hooks\"\nimport {\n  isInputEvent,\n  addItem,\n  removeItem,\n  StringOrNumber,\n  Dict,\n} from \"@chakra-ui/utils\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n    isNative,\n  } = props\n\n  const [valueState, setValue] = useState(defaultValue || [])\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const updateValue = useCallback(\n    (nextState: StringOrNumber[]) => {\n      if (!isControlled) {\n        setValue(nextState)\n      }\n\n      onChangeProp?.(nextState)\n    },\n    [isControlled, onChangeProp],\n  )\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      updateValue(nextValue)\n    },\n    [updateValue, value],\n  )\n\n  return {\n    value,\n    onChange,\n    setValue: updateValue,\n    getCheckboxProps: (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange,\n      }\n    },\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"file":"use-checkbox-group.js"}