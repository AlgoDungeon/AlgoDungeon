{"version":3,"sources":["../../src/use-editable.ts"],"names":["useControllableState","useUpdateEffect","ariaAttr","callAllHandlers","isEmpty","mergeRefs","normalizeEventKey","useCallback","useRef","useState","useEditable","props","onChange","onChangeProp","onCancel","onCancelProp","onSubmit","onSubmitProp","value","valueProp","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEdit","onEditProp","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","isInteractive","current","focus","select","event","target","onKeyDown","eventKey","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","isValueEmpty","getTabIndex","shouldHaveTabIndex","undefined","onBlur","getPreviewProps","ref","children","hidden","tabIndex","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps"],"mappings":"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","sourcesContent":["import { useControllableState, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  isEmpty,\n  mergeRefs,\n  normalizeEventKey,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      editButtonRef.current?.focus()\n      return\n    }\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    } else {\n      inputRef.current?.focus()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const getTabIndex = () => {\n    const shouldHaveTabIndex = isInteractive && isPreviewFocusable\n    return shouldHaveTabIndex ? 0 : undefined\n  }\n\n  const onBlur = useCallback(() => {\n    if (submitOnBlur) {\n      onSubmit()\n    }\n  }, [submitOnBlur, onSubmit])\n\n  const getPreviewProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref: mergeRefs(ref, previewRef),\n    children: isValueEmpty ? placeholder : value,\n    hidden: isEditing,\n    \"aria-disabled\": ariaAttr(isDisabled),\n    tabIndex: getTabIndex(),\n    onFocus: callAllHandlers(props.onFocus, onEdit),\n  })\n\n  const getInputProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    hidden: !isEditing,\n    placeholder,\n    ref: mergeRefs(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": ariaAttr(isDisabled),\n    value,\n    onBlur: callAllHandlers(props.onBlur, onBlur),\n    onChange: callAllHandlers(props.onChange, onChange),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  })\n\n  const getEditButtonProps: PropGetter = (props = {}, ref = null) => ({\n    \"aria-label\": \"Edit\",\n    ...props,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onEdit),\n    ref: mergeRefs(ref, editButtonRef),\n  })\n\n  const getSubmitButtonProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    \"aria-label\": \"Submit\",\n    ref,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onSubmit),\n  })\n\n  const getCancelButtonProps: PropGetter = (props = {}, ref = null) => ({\n    \"aria-label\": \"Cancel\",\n    ...props,\n    ref,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onCancel),\n  })\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"],"file":"use-editable.js"}