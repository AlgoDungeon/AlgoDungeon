{"version":3,"sources":["../../src/use-editable.ts"],"names":["useEditable","props","onChangeProp","onChange","onCancelProp","onCancel","onSubmitProp","onSubmit","valueProp","value","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEditProp","onEdit","htmlProps","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","isInteractive","current","focus","select","event","target","onKeyDown","eventKey","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","isValueEmpty","getTabIndex","shouldHaveTabIndex","undefined","onBlur","getPreviewProps","ref","children","hidden","tabIndex","onFocus","getInputProps","disabled","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps"],"mappings":"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","sourcesContent":["import { useControllableState, useUpdateEffect } from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  isEmpty,\n  mergeRefs,\n  normalizeEventKey,\n  PropGetter,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback, useRef, useState } from \"react\"\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can recieve focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/docs/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditProp,\n    ...htmlProps\n  } = props\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n\n  const isInteractive = !isEditing || !isDisabled\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      editButtonRef.current?.focus()\n      return\n    }\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    } else {\n      inputRef.current?.focus()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n  }, [onCancelProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n  }, [value, onSubmitProp])\n\n  const onChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      setValue(event.target.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const isValueEmpty = isEmpty(value)\n\n  const getTabIndex = () => {\n    const shouldHaveTabIndex = isInteractive && isPreviewFocusable\n    return shouldHaveTabIndex ? 0 : undefined\n  }\n\n  const onBlur = useCallback(() => {\n    if (submitOnBlur) {\n      onSubmit()\n    }\n  }, [submitOnBlur, onSubmit])\n\n  const getPreviewProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref: mergeRefs(ref, previewRef),\n    children: isValueEmpty ? placeholder : value,\n    hidden: isEditing,\n    \"aria-disabled\": ariaAttr(isDisabled),\n    tabIndex: getTabIndex(),\n    onFocus: callAllHandlers(props.onFocus, onEdit),\n  })\n\n  const getInputProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    hidden: !isEditing,\n    placeholder,\n    ref: mergeRefs(ref, inputRef),\n    disabled: isDisabled,\n    \"aria-disabled\": ariaAttr(isDisabled),\n    value,\n    onBlur: callAllHandlers(props.onBlur, onBlur),\n    onChange: callAllHandlers(props.onChange, onChange),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  })\n\n  const getEditButtonProps: PropGetter = (props = {}, ref = null) => ({\n    \"aria-label\": \"Edit\",\n    ...props,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onEdit),\n    ref: mergeRefs(ref, editButtonRef),\n  })\n\n  const getSubmitButtonProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    \"aria-label\": \"Submit\",\n    ref,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onSubmit),\n  })\n\n  const getCancelButtonProps: PropGetter = (props = {}, ref = null) => ({\n    \"aria-label\": \"Cancel\",\n    ...props,\n    ref,\n    type: \"button\",\n    onClick: callAllHandlers(props.onClick, onCancel),\n  })\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"],"file":"use-editable.js"}