"use strict";

exports.__esModule = true;
exports.Portal = Portal;

var _hooks = require("@chakra-ui/hooks");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

var _reactDom = require("react-dom");

var _portalManager = require("./portal-manager");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _createContext = (0, _utils.createContext)({
  strict: false,
  name: "PortalContext"
}),
    PortalContextProvider = _createContext[0],
    usePortalContext = _createContext[1];

var Container = function Container(props) {
  var children = props.children,
      zIndex = props.zIndex;
  return /*#__PURE__*/React.createElement("div", {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex: zIndex,
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  }, children);
};

/**
 * Portal
 *
 * Declarative component used to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 *
 * @see Docs https://chakra-ui.com/docs/overlay/portal
 */
function Portal(props) {
  var tempNode = React.useRef(null);
  var portal = React.useRef(null);
  var forceUpdate = (0, _hooks.useForceUpdate)();
  var getContainer = (0, _hooks.useCallbackRef)(props.getContainer);
  var onMount = (0, _hooks.useCallbackRef)(props.onMount);
  var onUnmount = (0, _hooks.useCallbackRef)(props.onUnmount);
  var parentPortal = usePortalContext();
  var manager = (0, _portalManager.usePortalManager)();
  (0, _hooks.useSafeLayoutEffect)(function () {
    var _ref, _getContainer;

    if (!tempNode.current) return;
    var doc = tempNode.current.ownerDocument;
    portal.current = doc.createElement("div");
    portal.current.className = Portal.className;
    var host = (_ref = (_getContainer = getContainer()) != null ? _getContainer : parentPortal) != null ? _ref : doc.body;
    host.appendChild(portal.current);
    forceUpdate();
    onMount();
    var portalNode = portal.current;
    return function () {
      onUnmount();

      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, []);
  var childrenToRender = manager != null && manager.zIndex ? /*#__PURE__*/React.createElement(Container, null, props.children) : props.children;
  return portal.current ? /*#__PURE__*/(0, _reactDom.createPortal)( /*#__PURE__*/React.createElement(PortalContextProvider, {
    value: portal.current
  }, childrenToRender), portal.current) : /*#__PURE__*/React.createElement("span", {
    ref: tempNode
  });
}

Portal.className = "chakra-portal";
Portal.selector = "." + Portal.className;

if (_utils.__DEV__) {
  Portal.displayName = "Portal";
}
//# sourceMappingURL=portal.js.map