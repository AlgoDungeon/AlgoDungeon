import { useCallbackRef, useForceUpdate, useSafeLayoutEffect } from "@chakra-ui/hooks";
import { createContext, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
import { createPortal } from "react-dom";
import { usePortalManager } from "./portal-manager";
var [PortalContextProvider, usePortalContext] = createContext({
  strict: false,
  name: "PortalContext"
});

var Container = props => {
  var {
    children,
    zIndex
  } = props;
  return /*#__PURE__*/React.createElement("div", {
    className: "chakra-portal-zIndex",
    style: {
      position: "absolute",
      zIndex,
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    }
  }, children);
};

/**
 * Portal
 *
 * Declarative component used to render children into a DOM node
 * that exists outside the DOM hierarchy of the parent component.
 *
 * @see Docs https://chakra-ui.com/docs/overlay/portal
 */
export function Portal(props) {
  var tempNode = React.useRef(null);
  var portal = React.useRef(null);
  var forceUpdate = useForceUpdate();
  var getContainer = useCallbackRef(props.getContainer);
  var onMount = useCallbackRef(props.onMount);
  var onUnmount = useCallbackRef(props.onUnmount);
  var parentPortal = usePortalContext();
  var manager = usePortalManager();
  useSafeLayoutEffect(() => {
    var _ref, _getContainer;

    if (!tempNode.current) return;
    var doc = tempNode.current.ownerDocument;
    portal.current = doc.createElement("div");
    portal.current.className = Portal.className;
    var host = (_ref = (_getContainer = getContainer()) != null ? _getContainer : parentPortal) != null ? _ref : doc.body;
    host.appendChild(portal.current);
    forceUpdate();
    onMount();
    var portalNode = portal.current;
    return () => {
      onUnmount();

      if (host.contains(portalNode)) {
        host.removeChild(portalNode);
      }
    };
  }, []);
  var childrenToRender = manager != null && manager.zIndex ? /*#__PURE__*/React.createElement(Container, null, props.children) : props.children;
  return portal.current ? /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {
    value: portal.current
  }, childrenToRender), portal.current) : /*#__PURE__*/React.createElement("span", {
    ref: tempNode
  });
}
Portal.className = "chakra-portal";
Portal.selector = "." + Portal.className;

if (__DEV__) {
  Portal.displayName = "Portal";
}
//# sourceMappingURL=portal.js.map