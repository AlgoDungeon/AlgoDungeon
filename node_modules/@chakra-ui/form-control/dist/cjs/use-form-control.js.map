{"version":3,"sources":["../../src/use-form-control.ts"],"names":["useFormControl","props","field","describedBy","hasFeedbackText","push","feedbackId","hasHelpText","helpTextId","ariaDescribedBy","join","cleanProps","id","disabled","isDisabled","readOnly","isReadOnly","required","isRequired","isInvalid","undefined","onFocus","onBlur"],"mappings":";;;;;AAAA;;AAEA;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,cAAT,CACLC,KADK,EAEL;AAAA;;AACA,MAAMC,KAAK,GAAG,yCAAd;AACA,MAAMC,WAAqB,GAAG,EAA9B,CAFA,CAIA;;AACA,MAAID,KAAJ,YAAIA,KAAK,CAAEE,eAAX,EAA4BD,WAAW,CAACE,IAAZ,CAAiBH,KAAK,CAACI,UAAvB;AAC5B,MAAIJ,KAAJ,YAAIA,KAAK,CAAEK,WAAX,EAAwBJ,WAAW,CAACE,IAAZ,CAAiBH,KAAK,CAACM,UAAvB;AACxB,MAAMC,eAAe,GAAGN,WAAW,CAACO,IAAZ,CAAiB,GAAjB,CAAxB;AAEA,MAAMC,UAAU,GAAG,iBAAKV,KAAL,EAAY,CAC7B,WAD6B,EAE7B,YAF6B,EAG7B,YAH6B,EAI7B,YAJ6B,CAAZ,CAAnB;AAOA,sBACKU,UADL;AAEEC,IAAAA,EAAE,eAAEX,KAAK,CAACW,EAAR,wBAAcV,KAAd,oBAAcA,KAAK,CAAEU,EAFzB;AAGEC,IAAAA,QAAQ,EAAEZ,KAAK,CAACY,QAAN,IAAkBZ,KAAK,CAACa,UAAxB,KAAsCZ,KAAtC,oBAAsCA,KAAK,CAAEY,UAA7C,CAHZ;AAIEC,IAAAA,QAAQ,EAAEd,KAAK,CAACc,QAAN,IAAkBd,KAAK,CAACe,UAAxB,KAAsCd,KAAtC,oBAAsCA,KAAK,CAAEc,UAA7C,CAJZ;AAKEC,IAAAA,QAAQ,EAAEhB,KAAK,CAACgB,QAAN,IAAkBhB,KAAK,CAACiB,UAAxB,KAAsChB,KAAtC,oBAAsCA,KAAK,CAAEgB,UAA7C,CALZ;AAME,oBAAgB,qBAASjB,KAAK,CAACkB,SAAN,KAAmBjB,KAAnB,oBAAmBA,KAAK,CAAEiB,SAA1B,CAAT,CANlB;AAOE,qBAAiB,qBAASlB,KAAK,CAACiB,UAAN,KAAoBhB,KAApB,oBAAoBA,KAAK,CAAEgB,UAA3B,CAAT,CAPnB;AAQE,qBAAiB,qBAASjB,KAAK,CAACe,UAAN,KAAoBd,KAApB,oBAAoBA,KAAK,CAAEc,UAA3B,CAAT,CARnB;AASE,wBAAoBP,eAAe,IAAIW,SATzC;AAUEC,IAAAA,OAAO,EAAE,4BAAgBnB,KAAhB,oBAAgBA,KAAK,CAAEmB,OAAvB,EAAgCpB,KAAK,CAACoB,OAAtC,CAVX;AAWEC,IAAAA,MAAM,EAAE,4BAAgBpB,KAAhB,oBAAgBA,KAAK,CAAEoB,MAAvB,EAA+BrB,KAAK,CAACqB,MAArC;AAXV;AAaD","sourcesContent":["import { ariaAttr, callAllHandlers, omit } from \"@chakra-ui/utils\"\nimport { FocusEventHandler } from \"react\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: FocusEventHandler<T>\n  onBlur?: FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n  const describedBy: string[] = []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText) describedBy.push(field.feedbackId)\n  if (field?.hasHelpText) describedBy.push(field.helpTextId)\n  const ariaDescribedBy = describedBy.join(\" \")\n\n  const cleanProps = omit(props, [\n    \"isInvalid\",\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n  ])\n\n  return {\n    ...cleanProps,\n    id: props.id ?? field?.id,\n    disabled: props.disabled || props.isDisabled || field?.isDisabled,\n    readOnly: props.readOnly || props.isReadOnly || field?.isReadOnly,\n    required: props.required || props.isRequired || field?.isRequired,\n    \"aria-invalid\": ariaAttr(props.isInvalid || field?.isInvalid),\n    \"aria-required\": ariaAttr(props.isRequired || field?.isRequired),\n    \"aria-readonly\": ariaAttr(props.isReadOnly || field?.isReadOnly),\n    \"aria-describedby\": ariaDescribedBy || undefined,\n    onFocus: callAllHandlers(field?.onFocus, props.onFocus),\n    onBlur: callAllHandlers(field?.onBlur, props.onBlur),\n  }\n}\n"],"file":"use-form-control.js"}