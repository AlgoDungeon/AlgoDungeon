{"version":3,"sources":["../../src/form-control.tsx"],"names":["strict","name","FormControlProvider","useFormControlContext","useFormControlProvider","props","idProp","id","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","context","onFocus","on","onBlur","off","FormControl","ref","styles","ownProps","_className","className","width","position","__DEV__","displayName","FormHelperText","field","helperText"],"mappings":"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","sourcesContent":["import { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  StylesProvider,\n  ThemingProps,\n  useMultiStyleConfig,\n  useStyles,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype ControlContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"htmlProps\"\n>\n\nconst [\n  FormControlProvider,\n  useFormControlContext,\n] = createContext<ControlContext>({\n  strict: false,\n  name: \"FormControlContext\",\n})\n\nexport { useFormControlContext }\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useBoolean()\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useBoolean()\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useBoolean()\n\n  const context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n  }\n\n  return context\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Form\", props)\n  const ownProps = omitThemingProps(props)\n  const { htmlProps, ...context } = useFormControlProvider(ownProps)\n\n  const _className = cx(\"chakra-form-control\", props.className)\n\n  return (\n    <FormControlProvider value={context}>\n      <StylesProvider value={styles}>\n        <chakra.div\n          role=\"group\"\n          ref={ref}\n          {...htmlProps}\n          className={_className}\n          __css={{\n            width: \"100%\",\n            position: \"relative\",\n          }}\n        />\n      </StylesProvider>\n    </FormControlProvider>\n  )\n})\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\"\n}\n\nexport interface HelpTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<HelpTextProps, \"div\">((props, ref) => {\n  const field = useFormControlContext()\n  const styles = useStyles()\n\n  /**\n   * Notify the field context when the help text is rendered on screen,\n   * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n   */\n  useSafeLayoutEffect(() => {\n    field?.setHasHelpText.on()\n    return () => field?.setHasHelpText.off()\n  }, [])\n\n  const _className = cx(\"chakra-form__helper-text\", props.className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      __css={styles.helperText}\n      {...props}\n      className={_className}\n      id={props.id ?? field?.helpTextId}\n    />\n  )\n})\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\"\n}\n"],"file":"form-control.js"}