{"version":3,"sources":["../../src/form-label.tsx"],"names":["chakra","forwardRef","omitThemingProps","useStyleConfig","useStyles","cx","dataAttr","__DEV__","React","useFormControlContext","useFieldLabel","props","field","isFocused","isDisabled","isInvalid","isReadOnly","id","labelId","htmlFor","FormLabel","passedProps","ref","styles","children","requiredIndicator","rest","ownProps","className","display","textAlign","isRequired","displayName","RequiredIndicator","_className"],"mappings":"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","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, Dict, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport function useFieldLabel(props: Dict) {\n  const field = useFormControlContext()\n  return {\n    ...props,\n    \"data-focus\": dataAttr(field?.isFocused),\n    \"data-disabled\": dataAttr(field?.isDisabled),\n    \"data-invalid\": dataAttr(field?.isInvalid),\n    \"data-readonly\": dataAttr(field?.isReadOnly),\n    id: props.id ?? field?.labelId,\n    htmlFor: props.htmlFor ?? field?.id,\n  }\n}\n\nexport interface FormLabelProps extends HTMLChakraProps<\"label\">, ThemingProps {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(\n  (passedProps, ref) => {\n    const styles = useStyleConfig(\"FormLabel\", passedProps)\n    const props = omitThemingProps(passedProps)\n\n    const {\n      className,\n      children,\n      requiredIndicator = <RequiredIndicator />,\n      ...rest\n    } = props\n\n    const ownProps = useFieldLabel(rest)\n    const field = useFormControlContext()\n\n    return (\n      <chakra.label\n        ref={ref}\n        className={cx(\"chakra-form__label\", props.className)}\n        __css={{\n          display: \"block\",\n          textAlign: \"start\",\n          ...styles,\n        }}\n        {...ownProps}\n      >\n        {children}\n        {field?.isRequired ? requiredIndicator : null}\n      </chakra.label>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  (props, ref) => {\n    const { children, className, ...rest } = props\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const _className = cx(\"chakra-form__required-indicator\", className)\n\n    return (\n      <chakra.span\n        role=\"presentation\"\n        aria-hidden\n        ref={ref}\n        {...rest}\n        __css={styles.requiredIndicator}\n        className={_className}\n      >\n        {children || \"*\"}\n      </chakra.span>\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n"],"file":"form-label.js"}