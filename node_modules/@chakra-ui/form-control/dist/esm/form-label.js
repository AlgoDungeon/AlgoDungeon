function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from "@chakra-ui/system";
import { cx, dataAttr, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
import { useFormControlContext } from "./form-control";
export function useFieldLabel(props) {
  var _props$id, _props$htmlFor;

  var field = useFormControlContext();
  return _extends({}, props, {
    "data-focus": dataAttr(field == null ? void 0 : field.isFocused),
    "data-disabled": dataAttr(field == null ? void 0 : field.isDisabled),
    "data-invalid": dataAttr(field == null ? void 0 : field.isInvalid),
    "data-readonly": dataAttr(field == null ? void 0 : field.isReadOnly),
    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.labelId,
    htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : field == null ? void 0 : field.id
  });
}

/**
 * Used to enhance the usability of form controls.
 *
 * It is used to inform users as to what information
 * is requested for a form field.
 *
 * ♿️ Accessibility: Every form field should have a form label.
 */
export var FormLabel = /*#__PURE__*/forwardRef((passedProps, ref) => {
  var styles = useStyleConfig("FormLabel", passedProps);
  var props = omitThemingProps(passedProps);

  var {
    children,
    requiredIndicator = /*#__PURE__*/React.createElement(RequiredIndicator, null)
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["className", "children", "requiredIndicator"]);

  var ownProps = useFieldLabel(rest);
  var field = useFormControlContext();
  return /*#__PURE__*/React.createElement(chakra.label, _extends({
    ref: ref,
    className: cx("chakra-form__label", props.className),
    __css: _extends({
      display: "block",
      textAlign: "start"
    }, styles)
  }, ownProps), children, field != null && field.isRequired ? requiredIndicator : null);
});

if (__DEV__) {
  FormLabel.displayName = "FormLabel";
}

/**
 * Used to show a "required" text or an asterisks (*) to indicate that
 * a field is required.
 */
export var RequiredIndicator = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    children,
    className
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["children", "className"]);

  var field = useFormControlContext();
  var styles = useStyles();
  if (!(field != null && field.isRequired)) return null;

  var _className = cx("chakra-form__required-indicator", className);

  return /*#__PURE__*/React.createElement(chakra.span, _extends({
    role: "presentation",
    "aria-hidden": true,
    ref: ref
  }, rest, {
    __css: styles.requiredIndicator,
    className: _className
  }), children || "*");
});

if (__DEV__) {
  RequiredIndicator.displayName = "RequiredIndicator";
}
//# sourceMappingURL=form-label.js.map