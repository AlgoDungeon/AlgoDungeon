function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { chakra, forwardRef } from "@chakra-ui/system";
import * as React from "react";
export var LinkOverlay = props => /*#__PURE__*/React.createElement(chakra.a, _extends({}, props, {
  css: {
    position: "static",
    "&::before": {
      content: "''",
      cursor: "inherit",
      display: "block",
      position: "absolute",
      top: 0,
      left: 0,
      width: "100%",
      height: "100%"
    }
  }
}));

/**
 * LinkBox is used to wrap content areas within a link while ensuring semantic html
 * To learn more, @see https://github.com/chakra-ui/chakra-ui/pull/1717
 */
export var LinkBox = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    children,
    href,
    isExternal
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["children", "href", "target", "rel", "isExternal"]);

  return /*#__PURE__*/React.createElement(chakra.div, _extends({
    ref: ref,
    pos: "relative"
  }, rest), children, /*#__PURE__*/React.createElement(LinkOverlay, {
    href: href,
    target: isExternal ? "_blank" : undefined,
    rel: isExternal ? "noopener noreferrer" : undefined
  }));
});
//# sourceMappingURL=link-box.js.map