function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { chakra, css, forwardRef, StylesProvider, useStyles, useTheme } from "@chakra-ui/system";
import { cx, mapResponsive, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";

/**
 * Layout component used to stack elements that differ in length
 * and are liable to wrap.
 *
 * Common use cases:
 * - Buttons that appear together at the end of forms
 * - Lists of tags and chips
 *
 * @see Docs https://chakra-ui.com/docs/layout/wrap
 */
export var Wrap = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    spacing = "0.5rem",
    children,
    justify,
    direction,
    align,
    className
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["spacing", "children", "justify", "direction", "align", "className"]);

  var theme = useTheme();
  var itemSpacing = mapResponsive(spacing, value => {
    var {
      margin
    } = css({
      margin: value
    })(theme);
    return "calc(" + margin + " / 2)";
  });
  var groupSpacing = mapResponsive(spacing, value => {
    var {
      margin
    } = css({
      margin: value
    })(theme);
    return "calc(" + margin + " / 2 * -1)";
  });
  var groupStyles = {
    display: "flex",
    flexWrap: "wrap",
    justifyContent: justify,
    alignItems: align,
    flexDirection: direction,
    listStyleType: "none",
    padding: "0",
    margin: groupSpacing
  };
  var itemStyles = {
    display: "flex",
    alignItems: "flex-start",
    margin: itemSpacing
  };
  return /*#__PURE__*/React.createElement(StylesProvider, {
    value: {
      item: itemStyles
    }
  }, /*#__PURE__*/React.createElement(chakra.div, _extends({
    ref: ref,
    className: cx("chakra-wrap", className)
  }, rest), /*#__PURE__*/React.createElement(chakra.ul, {
    className: "chakra-wrap__list",
    __css: groupStyles
  }, children)));
});

if (__DEV__) {
  Wrap.displayName = "Wrap";
}

export var WrapItem = /*#__PURE__*/forwardRef((props, ref) => {
  var {
    className
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["className"]);

  var styles = useStyles();
  return /*#__PURE__*/React.createElement(chakra.li, _extends({
    ref: ref,
    __css: styles.item,
    className: cx("chakra-wrap__listitem", className)
  }, rest));
});

if (__DEV__) {
  WrapItem.displayName = "WrapItem";
}
//# sourceMappingURL=wrap.js.map