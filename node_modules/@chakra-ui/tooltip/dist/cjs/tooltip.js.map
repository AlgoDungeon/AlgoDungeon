{"version":3,"sources":["../../src/tooltip.tsx"],"names":["StyledTooltip","motion","div","scaleVariants","exit","scale","opacity","transition","duration","easings","enter","ease","Tooltip","props","ref","styles","ownProps","children","label","shouldWrapChildren","ariaLabel","hasArrow","bg","rest","tooltip","shouldWrap","trigger","getTriggerProps","child","React","Children","only","cloneElement","hasAriaLabel","_tooltipProps","getTooltipProps","tooltipProps","hiddenProps","isOpen","getTooltipPositionerProps","zIndex","getArrowWrapperProps","getArrowProps","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { Portal } from \"@chakra-ui/portal\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\"\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\"\nimport { AnimatePresence, motion, Variants } from \"framer-motion\"\nimport * as React from \"react\"\nimport { useTooltip, UseTooltipProps } from \"./use-tooltip\"\n\nexport interface TooltipProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps,\n    UseTooltipProps {\n  /**\n   * The react component to use as the\n   * trigger for the tooltip\n   */\n  children: React.ReactNode\n  /**\n   * The label of the tooltip\n   */\n  label?: React.ReactNode\n  /**\n   * The accessible, human friendly label to use for\n   * screen readers.\n   *\n   * If passed, tooltip will show the content `label`\n   * but expose only `aria-label` to assistive technologies\n   */\n  \"aria-label\"?: string\n  /**\n   * If `true`, the tooltip will wrap its children\n   * in a `<span/>` with `tabIndex=0`\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true`, the tooltip will show an arrow tip\n   */\n  hasArrow?: boolean\n}\n\nconst StyledTooltip = chakra(motion.div)\n\nconst scaleVariants: Variants = {\n  exit: {\n    scale: 0.85,\n    opacity: 0,\n    transition: {\n      opacity: {\n        duration: 0.15,\n        easings: \"easeInOut\",\n      },\n      scale: {\n        duration: 0.2,\n        easings: \"easeInOut\",\n      },\n    },\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      opacity: {\n        easings: \"easeOut\",\n        duration: 0.2,\n      },\n      scale: {\n        duration: 0.2,\n        ease: [0.175, 0.885, 0.4, 1.1],\n      },\n    },\n  },\n}\n\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\nexport const Tooltip = forwardRef<TooltipProps, \"div\">((props, ref) => {\n  const styles = useStyleConfig(\"Tooltip\", props)\n  const ownProps = omitThemingProps(props)\n\n  const {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg,\n    ...rest\n  } = ownProps\n\n  if (bg) {\n    styles.bg = bg\n  }\n\n  const tooltip = useTooltip(rest)\n\n  const shouldWrap = isString(children) || shouldWrapChildren\n\n  let trigger: React.ReactElement\n\n  if (shouldWrap) {\n    trigger = (\n      <chakra.span tabIndex={0} {...tooltip.getTriggerProps()}>\n        {children}\n      </chakra.span>\n    )\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    const child = React.Children.only(children) as React.ReactElement & {\n      ref?: React.Ref<any>\n    }\n    trigger = React.cloneElement(\n      child,\n      tooltip.getTriggerProps(child.props, child.ref),\n    )\n  }\n\n  const hasAriaLabel = !!ariaLabel\n\n  const _tooltipProps = tooltip.getTooltipProps({}, ref)\n\n  const tooltipProps = hasAriaLabel\n    ? omit(_tooltipProps, [\"role\", \"id\"])\n    : _tooltipProps\n\n  const hiddenProps = pick(_tooltipProps, [\"role\", \"id\"])\n\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n  if (!label) {\n    return <>{children}</>\n  }\n\n  return (\n    <>\n      {trigger}\n      <AnimatePresence>\n        {tooltip.isOpen && (\n          <Portal>\n            <chakra.div\n              {...tooltip.getTooltipPositionerProps()}\n              __css={{ zIndex: styles.zIndex }}\n            >\n              <StyledTooltip\n                variants={scaleVariants}\n                {...(tooltipProps as any)}\n                initial=\"exit\"\n                animate=\"enter\"\n                exit=\"exit\"\n                __css={styles}\n              >\n                {label}\n                {hasAriaLabel && (\n                  <VisuallyHidden {...hiddenProps}>{ariaLabel}</VisuallyHidden>\n                )}\n                {hasArrow && (\n                  <chakra.div\n                    className=\"chakra-tooltip__arrow-wrapper\"\n                    {...tooltip.getArrowWrapperProps()}\n                  >\n                    <chakra.div\n                      className=\"chakra-tooltip__arrow\"\n                      {...tooltip.getArrowProps()}\n                      __css={{ bg: styles.bg }}\n                    />\n                  </chakra.div>\n                )}\n              </StyledTooltip>\n            </chakra.div>\n          </Portal>\n        )}\n      </AnimatePresence>\n    </>\n  )\n})\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\"\n}\n"],"file":"tooltip.js"}