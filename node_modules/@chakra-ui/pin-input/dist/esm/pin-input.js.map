{"version":3,"sources":["../../src/pin-input.tsx"],"names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","getValidChildren","__DEV__","React","PinInputProvider","usePinInput","usePinInputField","PinInput","props","styles","children","rest","context","clones","map","child","cloneElement","__css","displayName","PinInputField","ref","inputProps","className"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAKEC,cALF,QAOO,mBAPP;AAQA,SAASC,EAAT,EAAaC,gBAAb,EAA+BC,OAA/B,QAA8C,kBAA9C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,gBADF,EAEEC,WAFF,EAGEC,gBAHF,QAKO,iBALP;AAgCA,OAAO,IAAMC,QAAiC,GAAIC,KAAD,IAAW;AAC1D,MAAMC,MAAM,GAAGV,cAAc,CAAC,UAAD,EAAaS,KAAb,CAA7B;;AAEA,0BAA8BV,gBAAgB,CAACU,KAAD,CAA9C;AAAA,MAAM;AAAEE,IAAAA;AAAF,GAAN;AAAA,MAAqBC,IAArB;;AACA,MAAMC,OAAO,GAAGP,WAAW,CAACM,IAAD,CAA3B;AAEA,MAAME,MAAM,GAAGZ,gBAAgB,CAACS,QAAD,CAAhB,CAA2BI,GAA3B,CAAgCC,KAAD,iBAC5CZ,KAAK,CAACa,YAAN,CAAmBD,KAAnB,EAA0B;AAAEE,IAAAA,KAAK,EAAER;AAAT,GAA1B,CADa,CAAf;AAIA,sBAAO,oBAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEG;AAAzB,KAAmCC,MAAnC,CAAP;AACD,CAXM;;AAaP,IAAIX,OAAJ,EAAa;AACXK,EAAAA,QAAQ,CAACW,WAAT,GAAuB,UAAvB;AACD;;AAID,OAAO,IAAMC,aAAa,gBAAGtB,UAAU,CACrC,CAACW,KAAD,EAAQY,GAAR,KAAgB;AACd,MAAMC,UAAU,GAAGf,gBAAgB,CAACE,KAAD,EAAQY,GAAR,CAAnC;AACA,sBACE,oBAAC,MAAD,CAAQ,KAAR,eACMC,UADN;AAEE,IAAA,SAAS,EAAErB,EAAE,CAAC,kBAAD,EAAqBQ,KAAK,CAACc,SAA3B;AAFf,KADF;AAMD,CAToC,CAAhC;;AAYP,IAAIpB,OAAJ,EAAa;AACXiB,EAAAA,aAAa,CAACD,WAAd,GAA4B,eAA5B;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, getValidChildren, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  PinInputProvider,\n  usePinInput,\n  usePinInputField,\n  UsePinInputProps,\n} from \"./use-pin-input\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\nexport interface PinInputProps\n  extends UsePinInputProps,\n    ThemingProps,\n    InputOptions {\n  /**\n   * The children of the pin input component\n   */\n  children: React.ReactNode\n}\n\nexport const PinInput: React.FC<PinInputProps> = (props) => {\n  const styles = useStyleConfig(\"PinInput\", props)\n\n  const { children, ...rest } = omitThemingProps(props)\n  const context = usePinInput(rest)\n\n  const clones = getValidChildren(children).map((child) =>\n    React.cloneElement(child, { __css: styles }),\n  )\n\n  return <PinInputProvider value={context}>{clones}</PinInputProvider>\n}\n\nif (__DEV__) {\n  PinInput.displayName = \"PinInput\"\n}\n\nexport interface PinInputFieldProps extends HTMLChakraProps<\"input\"> {}\n\nexport const PinInputField = forwardRef<PinInputFieldProps, \"input\">(\n  (props, ref) => {\n    const inputProps = usePinInputField(props, ref)\n    return (\n      <chakra.input\n        {...inputProps}\n        className={cx(\"chakra-pin-input\", props.className)}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  PinInputField.displayName = \"PinInputField\"\n}\n"],"file":"pin-input.js"}