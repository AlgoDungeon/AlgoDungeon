import { Placement, UsePopperProps } from "@chakra-ui/popper";
import { FocusableElement, PropGetter } from "@chakra-ui/utils";
import { RefObject } from "react";
declare const TRIGGER: {
    readonly click: "click";
    readonly hover: "hover";
};
export interface UsePopoverProps {
    /**
     * The html `id` attribute of the popover.
     * If not provided, we generate a unique id.
     *
     * This `id` is also used to auto-generate the `aria-labelledby`
     * and `aria-decribedby` attributes that points to the `PopoverHeader` and `PopoverBody`
     */
    id?: string;
    /**
     * If `true`, the popover will be opened in controlled mode.
     */
    isOpen?: boolean;
    /**
     * If `true`, the popover will be initially opened.
     */
    defaultIsOpen?: boolean;
    /**
     * The `ref` of the element that should receive focus when the popover opens.
     */
    initialFocusRef?: RefObject<FocusableElement>;
    /**
     * If `true`, focus will be returned to the element that triggers the popover
     * when it closes
     */
    returnFocusOnClose?: boolean;
    /**
     * If `true`, focus will be transferred to the first interactive element
     * when the popover opens
     */
    autoFocus?: boolean;
    /**
     * The gap (in pixels) to apply between the popover and the target.
     * Used by `popper.js`
     */
    gutter?: number;
    /**
     * The placment of the popover
     */
    placement?: Placement;
    /**
     * If `true`, the popover will close when you blur out it by
     * clicking outside or tabbing out
     */
    closeOnBlur?: boolean;
    /**
     * If `true`, the popover will close when you hit the `Esc` key
     */
    closeOnEsc?: boolean;
    /**
     * Callback fired when the popover opens
     */
    onOpen?: () => void;
    /**
     * Callback fired when the popover closes
     */
    onClose?: () => void;
    /**
     * The size of the popover arrow
     */
    arrowSize?: number;
    /**
     * The `box-shadow` of the popover arrow
     */
    arrowShadowColor?: string;
    /**
     * The Popper.js modifiers to use.
     */
    modifiers?: UsePopperProps["modifiers"];
    /**
     * The interaction that triggers the popover.
     *
     * `hover` - means the popover will open when you hover with mouse or
     * focus with keyboard on the popover trigger
     *
     * `click` - means the popover will open on click or
     * press `Enter` to `Space` on keyboard
     */
    trigger?: keyof typeof TRIGGER;
    openDelay?: number;
    closeDelay?: number;
    /**
     * Performance ðŸš€:
     * If `true`, the PopoverContent rendering will be deferred
     * until the popover is open.
     */
    isLazy?: boolean;
}
export declare function usePopover(props?: UsePopoverProps): {
    forceUpdate: (() => void) | null;
    isOpen: boolean;
    onClose: () => void;
    headerId: string;
    hasHeader: boolean;
    setHasHeader: {
        readonly on: () => void;
        readonly off: () => void;
        readonly toggle: () => void;
    };
    bodyId: string;
    hasBody: boolean;
    setHasBody: {
        readonly on: () => void;
        readonly off: () => void;
        readonly toggle: () => void;
    };
    onTransitionEnd: () => void;
    getArrowProps: PropGetter<any, {}>;
    getArrowPositionerProps: PropGetter<any, {}>;
    getPopoverPositionerProps: PropGetter<any, {}>;
    getPopoverProps: PropGetter<any, {}>;
    getTriggerProps: PropGetter<any, {}>;
};
export declare type UsePopoverReturn = ReturnType<typeof usePopover>;
export {};
