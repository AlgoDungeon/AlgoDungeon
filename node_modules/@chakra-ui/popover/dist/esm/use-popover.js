function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { useBoolean, useDisclosure, useFocusOnHide, useFocusOnShow, useIds, useOutsideClick } from "@chakra-ui/hooks";
import { usePopper } from "@chakra-ui/popper";
import { useColorModeValue, useToken } from "@chakra-ui/system";
import { callAllHandlers, mergeRefs, mergeWith } from "@chakra-ui/utils";
import { useCallback, useEffect, useRef } from "react";
var TRIGGER = {
  click: "click",
  hover: "hover"
};
export function usePopover(props) {
  if (props === void 0) {
    props = {};
  }

  var {
    closeOnBlur = true,
    closeOnEsc = true,
    initialFocusRef,
    placement: placementProp,
    gutter,
    id,
    arrowSize,
    returnFocusOnClose = true,
    autoFocus = true,
    arrowShadowColor,
    modifiers,
    trigger = TRIGGER.click,
    openDelay = 200,
    closeDelay = 200,
    isLazy
  } = props;
  var {
    isOpen,
    onClose,
    onOpen,
    onToggle
  } = useDisclosure(props);
  var triggerRef = useRef(null);
  var popoverRef = useRef(null);
  var isHoveringRef = useRef(false);
  var [hasHeader, setHasHeader] = useBoolean();
  var [hasBody, setHasBody] = useBoolean();
  var [triggerId, popoverId, headerId, bodyId] = useIds(id, "popover-trigger", "popover-content", "popover-header", "popover-body");
  var fallbackShadowColor = useColorModeValue("gray.200", "whiteAlpha.300");
  var shadowColor = arrowShadowColor != null ? arrowShadowColor : fallbackShadowColor;
  var arrowColor = useToken("colors", shadowColor, arrowShadowColor);
  var popper = usePopper({
    placement: placementProp,
    gutter,
    arrowSize,
    arrowShadowColor: arrowColor,
    modifiers
  });
  useFocusOnHide(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click
  });
  useFocusOnShow(popoverRef, {
    visible: isOpen,
    focusRef: initialFocusRef,
    shouldFocus: autoFocus && trigger === TRIGGER.click
  });
  useOutsideClick({
    ref: popoverRef,
    handler: event => {
      var _triggerRef$current;

      if (isOpen && trigger === TRIGGER.click && closeOnBlur && !((_triggerRef$current = triggerRef.current) != null && _triggerRef$current.contains(event.target))) {
        onClose();
      }
    }
  });
  var getPopoverProps = useCallback(function (props, _ref) {
    if (props === void 0) {
      props = {};
    }

    if (_ref === void 0) {
      _ref = null;
    }

    var popoverProps = _extends({}, props, {
      style: _extends({}, props.style, {
        transformOrigin: popper.transformOrigin
      }),
      ref: mergeRefs(popoverRef, _ref),
      children: !isLazy || isOpen ? props.children : null,
      id: popoverId,
      tabIndex: -1,
      role: "dialog",
      onKeyDown: callAllHandlers(props.onKeyDown, event => {
        if (closeOnEsc && event.key === "Escape") {
          onClose();
        }
      }),
      onBlur: callAllHandlers(props.onBlur, event => {
        var _event$relatedTarget, _popoverRef$current, _triggerRef$current2;

        var element = (_event$relatedTarget = event.relatedTarget) != null ? _event$relatedTarget : document.activeElement;

        if (isOpen && closeOnBlur && !((_popoverRef$current = popoverRef.current) != null && _popoverRef$current.contains(element)) && !((_triggerRef$current2 = triggerRef.current) != null && _triggerRef$current2.contains(element))) {
          onClose();
        }
      }),
      "aria-labelledby": hasHeader ? headerId : undefined,
      "aria-describedby": hasBody ? bodyId : undefined
    });

    if (trigger === TRIGGER.hover) {
      popoverProps.role = "tooltip";
      popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {
        isHoveringRef.current = true;
      });
      popoverProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {
        isHoveringRef.current = false;
        setTimeout(onClose, closeDelay);
      });
    }

    return popoverProps;
  }, [isLazy, isOpen, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, popper, closeOnEsc, onClose, closeDelay, closeOnBlur]);

  var getPopoverPositionerProps = function getPopoverPositionerProps(props, _ref) {
    if (props === void 0) {
      props = {};
    }

    if (_ref === void 0) {
      _ref = null;
    }

    return getPopperProps(mergeWith(props, {
      style: {
        visibility: isOpen ? "visible" : "hidden"
      }
    }), _ref);
  };

  var openTimeout = useRef();
  var closeTimeout = useRef();
  var getTriggerProps = useCallback(function (props, _ref) {
    if (props === void 0) {
      props = {};
    }

    if (_ref === void 0) {
      _ref = null;
    }

    var triggerProps = _extends({}, props, {
      id: triggerId,
      "aria-haspopup": "dialog",
      "aria-expanded": isOpen,
      "aria-controls": popoverId
    });

    if (trigger === TRIGGER.click) {
      triggerProps.onClick = callAllHandlers(props.onClick, onToggle);
    }

    if (trigger === TRIGGER.hover) {
      /**
       * Any content that shows on pointer hover should also show on keyboard focus.
       * Consider focus and blur to be the `hover` for keyboard users.
       *
       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html
       */
      triggerProps.onFocus = callAllHandlers(props.onFocus, onOpen);
      triggerProps.onBlur = callAllHandlers(props.onBlur, onClose);
      /**
       * Any content that shows on hover or focus must be dismissible.
       * This case pressing `Escape` will dismiss the popover
       */

      triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, event => {
        if (event.key === "Escape") {
          onClose();
        }
      });
      triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {
        isHoveringRef.current = true;
        openTimeout.current = window.setTimeout(onOpen, openDelay);
      });
      triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {
        isHoveringRef.current = false;

        if (openTimeout.current) {
          clearTimeout(openTimeout.current);
          openTimeout.current = undefined;
        }

        closeTimeout.current = window.setTimeout(() => {
          if (isHoveringRef.current === false) {
            onClose();
          }
        }, closeDelay);
      });
    }

    return popper.getReferenceProps(triggerProps, mergeRefs(triggerRef, _ref));
  }, [triggerId, isOpen, popoverId, trigger, popper, onToggle, onOpen, onClose, openDelay, closeDelay]);
  useEffect(() => () => {
    if (openTimeout.current) clearTimeout(openTimeout.current);
    if (closeTimeout.current) clearTimeout(closeTimeout.current);
  }, []);
  var {
    getArrowProps,
    getArrowWrapperProps,
    getPopperProps
  } = popper;

  var onTransitionEnd = () => {
    var _popoverRef$current2;

    (_popoverRef$current2 = popoverRef.current) == null ? void 0 : _popoverRef$current2.dispatchEvent(new Event("transitionend"));
  };

  return {
    forceUpdate: popper.forceUpdate,
    isOpen,
    onClose,
    headerId,
    hasHeader,
    setHasHeader,
    bodyId,
    hasBody,
    setHasBody,
    onTransitionEnd,
    getArrowProps,
    getArrowPositionerProps: getArrowWrapperProps,
    getPopoverPositionerProps,
    getPopoverProps,
    getTriggerProps
  };
}
//# sourceMappingURL=use-popover.js.map