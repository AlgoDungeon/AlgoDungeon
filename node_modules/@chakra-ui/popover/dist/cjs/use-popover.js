"use strict";

exports.__esModule = true;
exports.usePopover = usePopover;

var _hooks = require("@chakra-ui/hooks");

var _popper = require("@chakra-ui/popper");

var _system = require("@chakra-ui/system");

var _utils = require("@chakra-ui/utils");

var _react = require("react");

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var TRIGGER = {
  click: "click",
  hover: "hover"
};

function usePopover(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      _props$closeOnBlur = _props.closeOnBlur,
      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,
      _props$closeOnEsc = _props.closeOnEsc,
      closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,
      initialFocusRef = _props.initialFocusRef,
      placementProp = _props.placement,
      gutter = _props.gutter,
      id = _props.id,
      arrowSize = _props.arrowSize,
      _props$returnFocusOnC = _props.returnFocusOnClose,
      returnFocusOnClose = _props$returnFocusOnC === void 0 ? true : _props$returnFocusOnC,
      _props$autoFocus = _props.autoFocus,
      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
      arrowShadowColor = _props.arrowShadowColor,
      modifiers = _props.modifiers,
      _props$trigger = _props.trigger,
      trigger = _props$trigger === void 0 ? TRIGGER.click : _props$trigger,
      _props$openDelay = _props.openDelay,
      openDelay = _props$openDelay === void 0 ? 200 : _props$openDelay,
      _props$closeDelay = _props.closeDelay,
      closeDelay = _props$closeDelay === void 0 ? 200 : _props$closeDelay,
      isLazy = _props.isLazy;

  var _useDisclosure = (0, _hooks.useDisclosure)(props),
      isOpen = _useDisclosure.isOpen,
      onClose = _useDisclosure.onClose,
      onOpen = _useDisclosure.onOpen,
      onToggle = _useDisclosure.onToggle;

  var triggerRef = (0, _react.useRef)(null);
  var popoverRef = (0, _react.useRef)(null);
  var isHoveringRef = (0, _react.useRef)(false);

  var _useBoolean = (0, _hooks.useBoolean)(),
      hasHeader = _useBoolean[0],
      setHasHeader = _useBoolean[1];

  var _useBoolean2 = (0, _hooks.useBoolean)(),
      hasBody = _useBoolean2[0],
      setHasBody = _useBoolean2[1];

  var _useIds = (0, _hooks.useIds)(id, "popover-trigger", "popover-content", "popover-header", "popover-body"),
      triggerId = _useIds[0],
      popoverId = _useIds[1],
      headerId = _useIds[2],
      bodyId = _useIds[3];

  var fallbackShadowColor = (0, _system.useColorModeValue)("gray.200", "whiteAlpha.300");
  var shadowColor = arrowShadowColor != null ? arrowShadowColor : fallbackShadowColor;
  var arrowColor = (0, _system.useToken)("colors", shadowColor, arrowShadowColor);
  var popper = (0, _popper.usePopper)({
    placement: placementProp,
    gutter: gutter,
    arrowSize: arrowSize,
    arrowShadowColor: arrowColor,
    modifiers: modifiers
  });
  (0, _hooks.useFocusOnHide)(popoverRef, {
    focusRef: triggerRef,
    visible: isOpen,
    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click
  });
  (0, _hooks.useFocusOnShow)(popoverRef, {
    visible: isOpen,
    focusRef: initialFocusRef,
    shouldFocus: autoFocus && trigger === TRIGGER.click
  });
  (0, _hooks.useOutsideClick)({
    ref: popoverRef,
    handler: function handler(event) {
      var _triggerRef$current;

      if (isOpen && trigger === TRIGGER.click && closeOnBlur && !((_triggerRef$current = triggerRef.current) != null && _triggerRef$current.contains(event.target))) {
        onClose();
      }
    }
  });
  var getPopoverProps = (0, _react.useCallback)(function (props, _ref) {
    if (props === void 0) {
      props = {};
    }

    if (_ref === void 0) {
      _ref = null;
    }

    var popoverProps = _extends({}, props, {
      style: _extends({}, props.style, {
        transformOrigin: popper.transformOrigin
      }),
      ref: (0, _utils.mergeRefs)(popoverRef, _ref),
      children: !isLazy || isOpen ? props.children : null,
      id: popoverId,
      tabIndex: -1,
      role: "dialog",
      onKeyDown: (0, _utils.callAllHandlers)(props.onKeyDown, function (event) {
        if (closeOnEsc && event.key === "Escape") {
          onClose();
        }
      }),
      onBlur: (0, _utils.callAllHandlers)(props.onBlur, function (event) {
        var _event$relatedTarget, _popoverRef$current, _triggerRef$current2;

        var element = (_event$relatedTarget = event.relatedTarget) != null ? _event$relatedTarget : document.activeElement;

        if (isOpen && closeOnBlur && !((_popoverRef$current = popoverRef.current) != null && _popoverRef$current.contains(element)) && !((_triggerRef$current2 = triggerRef.current) != null && _triggerRef$current2.contains(element))) {
          onClose();
        }
      }),
      "aria-labelledby": hasHeader ? headerId : undefined,
      "aria-describedby": hasBody ? bodyId : undefined
    });

    if (trigger === TRIGGER.hover) {
      popoverProps.role = "tooltip";
      popoverProps.onMouseEnter = (0, _utils.callAllHandlers)(props.onMouseEnter, function () {
        isHoveringRef.current = true;
      });
      popoverProps.onMouseLeave = (0, _utils.callAllHandlers)(props.onMouseLeave, function () {
        isHoveringRef.current = false;
        setTimeout(onClose, closeDelay);
      });
    }

    return popoverProps;
  }, [isLazy, isOpen, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, popper, closeOnEsc, onClose, closeDelay, closeOnBlur]);

  var getPopoverPositionerProps = function getPopoverPositionerProps(props, _ref) {
    if (props === void 0) {
      props = {};
    }

    if (_ref === void 0) {
      _ref = null;
    }

    return getPopperProps((0, _utils.mergeWith)(props, {
      style: {
        visibility: isOpen ? "visible" : "hidden"
      }
    }), _ref);
  };

  var openTimeout = (0, _react.useRef)();
  var closeTimeout = (0, _react.useRef)();
  var getTriggerProps = (0, _react.useCallback)(function (props, _ref) {
    if (props === void 0) {
      props = {};
    }

    if (_ref === void 0) {
      _ref = null;
    }

    var triggerProps = _extends({}, props, {
      id: triggerId,
      "aria-haspopup": "dialog",
      "aria-expanded": isOpen,
      "aria-controls": popoverId
    });

    if (trigger === TRIGGER.click) {
      triggerProps.onClick = (0, _utils.callAllHandlers)(props.onClick, onToggle);
    }

    if (trigger === TRIGGER.hover) {
      /**
       * Any content that shows on pointer hover should also show on keyboard focus.
       * Consider focus and blur to be the `hover` for keyboard users.
       *
       * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html
       */
      triggerProps.onFocus = (0, _utils.callAllHandlers)(props.onFocus, onOpen);
      triggerProps.onBlur = (0, _utils.callAllHandlers)(props.onBlur, onClose);
      /**
       * Any content that shows on hover or focus must be dismissible.
       * This case pressing `Escape` will dismiss the popover
       */

      triggerProps.onKeyDown = (0, _utils.callAllHandlers)(props.onKeyDown, function (event) {
        if (event.key === "Escape") {
          onClose();
        }
      });
      triggerProps.onMouseEnter = (0, _utils.callAllHandlers)(props.onMouseEnter, function () {
        isHoveringRef.current = true;
        openTimeout.current = window.setTimeout(onOpen, openDelay);
      });
      triggerProps.onMouseLeave = (0, _utils.callAllHandlers)(props.onMouseLeave, function () {
        isHoveringRef.current = false;

        if (openTimeout.current) {
          clearTimeout(openTimeout.current);
          openTimeout.current = undefined;
        }

        closeTimeout.current = window.setTimeout(function () {
          if (isHoveringRef.current === false) {
            onClose();
          }
        }, closeDelay);
      });
    }

    return popper.getReferenceProps(triggerProps, (0, _utils.mergeRefs)(triggerRef, _ref));
  }, [triggerId, isOpen, popoverId, trigger, popper, onToggle, onOpen, onClose, openDelay, closeDelay]);
  (0, _react.useEffect)(function () {
    return function () {
      if (openTimeout.current) clearTimeout(openTimeout.current);
      if (closeTimeout.current) clearTimeout(closeTimeout.current);
    };
  }, []);
  var getArrowProps = popper.getArrowProps,
      getArrowWrapperProps = popper.getArrowWrapperProps,
      getPopperProps = popper.getPopperProps;

  var onTransitionEnd = function onTransitionEnd() {
    var _popoverRef$current2;

    (_popoverRef$current2 = popoverRef.current) == null ? void 0 : _popoverRef$current2.dispatchEvent(new Event("transitionend"));
  };

  return {
    forceUpdate: popper.forceUpdate,
    isOpen: isOpen,
    onClose: onClose,
    headerId: headerId,
    hasHeader: hasHeader,
    setHasHeader: setHasHeader,
    bodyId: bodyId,
    hasBody: hasBody,
    setHasBody: setHasBody,
    onTransitionEnd: onTransitionEnd,
    getArrowProps: getArrowProps,
    getArrowPositionerProps: getArrowWrapperProps,
    getPopoverPositionerProps: getPopoverPositionerProps,
    getPopoverProps: getPopoverProps,
    getTriggerProps: getTriggerProps
  };
}
//# sourceMappingURL=use-popover.js.map