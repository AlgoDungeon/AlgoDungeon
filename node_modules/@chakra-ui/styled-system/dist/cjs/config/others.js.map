{"version":3,"sources":["../../../src/config/others.ts"],"names":["floatTransform","value","_","props","map","left","right","config","animation","appearance","visibility","userSelect","pointerEvents","cursor","resize","objectFit","objectPosition","property","transform","willChange","filter","others","othersParser"],"mappings":";;;;;AACA;;AACA;;AAGA,IAAMA,cAAuC,GAAG,SAA1CA,cAA0C,CAACC,KAAD,EAAQC,CAAR,EAAWC,KAAX,EAA0B;AAAA,MAAfA,KAAe;AAAfA,IAAAA,KAAe,GAAP,EAAO;AAAA;;AACxE,MAAMC,GAAG,GAAG;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAAZ;AACA,SAAO,8BAASH,KAAT,IAAkBC,GAAG,CAACH,KAAD,CAArB,GAA+BA,KAAtC;AACD,CAHD;;AAKA,IAAMM,MAAc,GAAG;AACrBC,EAAAA,SAAS,EAAE,IADU;AAErBC,EAAAA,UAAU,EAAE,IAFS;AAGrBC,EAAAA,UAAU,EAAE,IAHS;AAIrBC,EAAAA,UAAU,EAAE,IAJS;AAKrBC,EAAAA,aAAa,EAAE,IALM;AAMrBC,EAAAA,MAAM,EAAE,IANa;AAOrBC,EAAAA,MAAM,EAAE,IAPa;AAQrBC,EAAAA,SAAS,EAAE,IARU;AASrBC,EAAAA,cAAc,EAAE,IATK;AAUrB,WAAO;AACLC,IAAAA,QAAQ,EAAE,OADL;AAELC,IAAAA,SAAS,EAAElB;AAFN,GAVc;AAcrBmB,EAAAA,UAAU,EAAE,IAdS;AAerBC,EAAAA,MAAM,EAAE;AAfa,CAAvB;AAqEO,IAAMC,MAAM,GAAG,kBAAOd,MAAP,CAAf;;AACA,IAAMe,YAAY,GAAG,wBAAaf,MAAb,CAArB","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, PropConfig, system } from \"../core\"\nimport { getIsRtl } from \"../utils/directionality\"\nimport { Length, ResponsiveValue } from \"../utils/types\"\n\nconst floatTransform: PropConfig[\"transform\"] = (value, _, props = {}) => {\n  const map = { left: \"right\", right: \"left\" }\n  return getIsRtl(props) ? map[value] : value\n}\n\nconst config: Config = {\n  animation: true,\n  appearance: true,\n  visibility: true,\n  userSelect: true,\n  pointerEvents: true,\n  cursor: true,\n  resize: true,\n  objectFit: true,\n  objectPosition: true,\n  float: {\n    property: \"float\",\n    transform: floatTransform,\n  },\n  willChange: true,\n  filter: true,\n}\n\nexport interface OtherProps {\n  /**\n   * The CSS `animation` property\n   */\n  animation?: ResponsiveValue<CSS.Property.Animation>\n  /**\n   * The CSS `appearance` property\n   */\n  appearance?: ResponsiveValue<CSS.Property.Appearance>\n  /**\n   * The CSS `visibility` property\n   */\n  visibility?: ResponsiveValue<CSS.Property.Visibility>\n  /**\n   * The CSS `user-select` property\n   */\n  userSelect?: ResponsiveValue<CSS.Property.UserSelect>\n  /**\n   * The CSS `pointer-events` property\n   */\n  pointerEvents?: ResponsiveValue<CSS.Property.PointerEvents>\n  /**\n   * The CSS `cursor` property\n   */\n  cursor?: ResponsiveValue<CSS.Property.Cursor>\n  /**\n   * The CSS `resize` property\n   */\n  resize?: ResponsiveValue<CSS.Property.Resize>\n  /**\n   * The CSS `object-fit` property\n   */\n  objectFit?: ResponsiveValue<CSS.Property.ObjectFit>\n  /**\n   * The CSS `object-psition` property\n   */\n  objectPosition?: ResponsiveValue<CSS.Property.ObjectPosition<Length>>\n  /**\n   * The CSS `float` property\n   */\n  float?: ResponsiveValue<CSS.Property.Float>\n  /**\n   * The CSS `will-change` property\n   */\n  willChange?: ResponsiveValue<CSS.Property.WillChange>\n  /**\n   * The CSS `filter` property\n   */\n  filter?: ResponsiveValue<CSS.Property.Filter>\n}\n\nexport const others = system(config)\nexport const othersParser = createParser(config)\n"],"file":"others.js"}