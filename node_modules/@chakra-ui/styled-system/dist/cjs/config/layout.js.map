{"version":3,"sources":["../../../src/config/layout.ts"],"names":["config","width","t","sizesT","inlineSize","height","sizes","blockSize","boxSize","minWidth","minInlineSize","minHeight","minBlockSize","maxWidth","maxInlineSize","maxHeight","maxBlockSize","d","prop","overflow","overflowX","overflowY","display","verticalAlign","boxSizing","Object","assign","w","h","minW","maxW","minH","maxH","layout","layoutParser"],"mappings":";;;;;AACA;;AACA;;AAEA,IAAMA,MAAc,GAAG;AACrBC,EAAAA,KAAK,EAAEC,SAAEC,MAAF,CAAS,OAAT,CADc;AAErBC,EAAAA,UAAU,EAAEF,SAAEC,MAAF,CAAS,YAAT,CAFS;AAGrBE,EAAAA,MAAM,EAAEH,SAAEI,KAAF,CAAQ,QAAR,CAHa;AAIrBC,EAAAA,SAAS,EAAEL,SAAEI,KAAF,CAAQ,WAAR,CAJU;AAKrBE,EAAAA,OAAO,EAAEN,SAAEI,KAAF,CAAQ,CAAC,OAAD,EAAU,QAAV,CAAR,CALY;AAMrBG,EAAAA,QAAQ,EAAEP,SAAEI,KAAF,CAAQ,UAAR,CANW;AAOrBI,EAAAA,aAAa,EAAER,SAAEI,KAAF,CAAQ,eAAR,CAPM;AAQrBK,EAAAA,SAAS,EAAET,SAAEI,KAAF,CAAQ,WAAR,CARU;AASrBM,EAAAA,YAAY,EAAEV,SAAEI,KAAF,CAAQ,cAAR,CATO;AAUrBO,EAAAA,QAAQ,EAAEX,SAAEI,KAAF,CAAQ,UAAR,CAVW;AAWrBQ,EAAAA,aAAa,EAAEZ,SAAEI,KAAF,CAAQ,eAAR,CAXM;AAYrBS,EAAAA,SAAS,EAAEb,SAAEI,KAAF,CAAQ,WAAR,CAZU;AAarBU,EAAAA,YAAY,EAAEd,SAAEI,KAAF,CAAQ,cAAR,CAbO;AAcrBW,EAAAA,CAAC,EAAEf,SAAEgB,IAAF,CAAO,SAAP,CAdkB;AAerBC,EAAAA,QAAQ,EAAE,IAfW;AAgBrBC,EAAAA,SAAS,EAAE,IAhBU;AAiBrBC,EAAAA,SAAS,EAAE,IAjBU;AAkBrBC,EAAAA,OAAO,EAAE,IAlBY;AAmBrBC,EAAAA,aAAa,EAAE,IAnBM;AAoBrBC,EAAAA,SAAS,EAAE;AApBU,CAAvB;AAuBAC,MAAM,CAACC,MAAP,CAAc1B,MAAd,EAAsB;AACpB2B,EAAAA,CAAC,EAAE3B,MAAM,CAACC,KADU;AAEpB2B,EAAAA,CAAC,EAAE5B,MAAM,CAACK,MAFU;AAGpBwB,EAAAA,IAAI,EAAE7B,MAAM,CAACS,QAHO;AAIpBqB,EAAAA,IAAI,EAAE9B,MAAM,CAACa,QAJO;AAKpBkB,EAAAA,IAAI,EAAE/B,MAAM,CAACW,SALO;AAMpBqB,EAAAA,IAAI,EAAEhC,MAAM,CAACe;AANO,CAAtB;AASA;AACA;AACA;;AA0FO,IAAMkB,MAAM,GAAG,kBAAOjC,MAAP,CAAf;;AACA,IAAMkC,YAAY,GAAG,wBAAalC,MAAb,CAArB","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { Length, ResponsiveValue, t } from \"../utils\"\n\nconst config: Config = {\n  width: t.sizesT(\"width\"),\n  inlineSize: t.sizesT(\"inlineSize\"),\n  height: t.sizes(\"height\"),\n  blockSize: t.sizes(\"blockSize\"),\n  boxSize: t.sizes([\"width\", \"height\"]),\n  minWidth: t.sizes(\"minWidth\"),\n  minInlineSize: t.sizes(\"minInlineSize\"),\n  minHeight: t.sizes(\"minHeight\"),\n  minBlockSize: t.sizes(\"minBlockSize\"),\n  maxWidth: t.sizes(\"maxWidth\"),\n  maxInlineSize: t.sizes(\"maxInlineSize\"),\n  maxHeight: t.sizes(\"maxHeight\"),\n  maxBlockSize: t.sizes(\"maxBlockSize\"),\n  d: t.prop(\"display\"),\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true,\n}\n\nObject.assign(config, {\n  w: config.width,\n  h: config.height,\n  minW: config.minWidth,\n  maxW: config.maxWidth,\n  minH: config.minHeight,\n  maxH: config.maxHeight,\n})\n\n/**\n * Types for layout related CSS properties\n */\nexport interface LayoutProps {\n  /**\n   * The CSS `display` property\n   */\n  display?: ResponsiveValue<CSS.Property.Display>\n  /**\n   * The CSS `display` property\n   */\n  d?: ResponsiveValue<CSS.Property.Display>\n  /**\n   * The CSS `width` property\n   */\n  width?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `width` property\n   */\n  w?: ResponsiveValue<CSS.Property.Width<Length>>\n  inlineSize?: ResponsiveValue<CSS.Property.InlineSize<Length>>\n  /**\n   * The CSS `width` and `height` property\n   */\n  boxSize?: ResponsiveValue<CSS.Property.Width<Length>>\n  /**\n   * The CSS `max-width` property\n   */\n  maxWidth?: ResponsiveValue<CSS.Property.MaxWidth<Length>>\n  /**\n   * The CSS `max-width` property\n   */\n  maxW?: ResponsiveValue<CSS.Property.MaxWidth<Length>>\n  maxInlineSize?: ResponsiveValue<CSS.Property.MaxInlineSize<Length>>\n  /**\n   * The CSS `min-width` property\n   */\n  minWidth?: ResponsiveValue<CSS.Property.MinWidth<Length>>\n  /**\n   * The CSS `min-width` property\n   */\n  minW?: ResponsiveValue<CSS.Property.MinWidth<Length>>\n  minInlineSize?: ResponsiveValue<CSS.Property.MinInlineSize<Length>>\n  /**\n   * The CSS `height` property\n   */\n  height?: ResponsiveValue<CSS.Property.Height<Length>>\n  /**\n   * The CSS `height` property\n   */\n  h?: ResponsiveValue<CSS.Property.Height<Length>>\n  blockSize?: ResponsiveValue<CSS.Property.BlockSize<Length>>\n  /**\n   * The CSS `max-height` property\n   */\n  maxHeight?: ResponsiveValue<CSS.Property.MaxHeight<Length>>\n  /**\n   * The CSS `max-height` property\n   */\n  maxH?: ResponsiveValue<CSS.Property.MaxHeight<Length>>\n  maxBlockSize?: ResponsiveValue<CSS.Property.MaxBlockSize<Length>>\n  /**\n   * The CSS `min-height` property\n   */\n  minHeight?: ResponsiveValue<CSS.Property.MinHeight<Length>>\n  /**\n   * The CSS `min-height` property\n   */\n  minH?: ResponsiveValue<CSS.Property.MinHeight<Length>>\n  minBlockSize?: ResponsiveValue<CSS.Property.MinBlockSize<Length>>\n  /**\n   * The CSS `vertical-align` property\n   */\n  verticalAlign?: ResponsiveValue<CSS.Property.VerticalAlign<Length>>\n  /**\n   * The CSS `overflow` property\n   */\n  overflow?: ResponsiveValue<CSS.Property.Overflow>\n  /**\n   * The CSS `overflow-x` property\n   */\n  overflowX?: ResponsiveValue<CSS.Property.OverflowX>\n  /**\n   * The CSS `overflow-y` property\n   */\n  overflowY?: ResponsiveValue<CSS.Property.OverflowY>\n  /**\n   * The CSS `box-sizing` property\n   */\n  boxSizing?: CSS.Property.BoxSizing\n}\n\nexport const layout = system(config)\nexport const layoutParser = createParser(config)\n"],"file":"layout.js"}