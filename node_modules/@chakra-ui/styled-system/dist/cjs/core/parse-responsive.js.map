{"version":3,"sources":["../../../src/core/parse-responsive.ts"],"names":["createMediaQuery","n","parseResponsiveArray","options","mediaQueries","styleFunction","scale","value","props","styles","slice","length","forEach","i","media","style","parseResponsiveObject","breakpoints","valueObj","bp","breakpoint"],"mappings":";;;;;;;AACA;;;;AAQO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD;AAAA,4CACGA,CADH;AAAA,CAAzB;;;;AAaA,SAASC,oBAAT,CAA8BC,OAA9B,EAAoE;AAAA,MACjEC,YADiE,GACZD,OADY,CACjEC,YADiE;AAAA,MACnDC,aADmD,GACZF,OADY,CACnDE,aADmD;AAAA,MACpCC,KADoC,GACZH,OADY,CACpCG,KADoC;AAAA,MAC7BC,KAD6B,GACZJ,OADY,CAC7BI,KAD6B;AAAA,MACtBC,KADsB,GACZL,OADY,CACtBK,KADsB;AAEzE,MAAIC,MAAY,GAAG,EAAnB;AACAF,EAAAA,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAeN,YAAY,CAACO,MAA5B,EAAoCC,OAApC,CAA4C,UAACL,KAAD,EAAQM,CAAR,EAAc;AACxD,QAAMC,KAAK,GAAGV,YAAY,CAACS,CAAD,CAA1B;AACA,QAAME,KAAK,GAAGV,aAAa,CAACE,KAAD,EAAQD,KAAR,EAAeE,KAAf,CAA3B;;AAEA,QAAI,CAACM,KAAL,EAAY;AACVL,MAAAA,MAAM,GAAG,wBAAM,EAAN,EAAUA,MAAV,EAAkBM,KAAlB,CAAT;AACD,KAFD,MAEO;AAAA;;AACLN,MAAAA,MAAM,GAAG,wBAAM,EAAN,EAAUA,MAAV,uBACNK,KADM,IACE,wBAAM,EAAN,EAAUL,MAAM,CAACK,KAAD,CAAhB,EAAyBC,KAAzB,CADF,UAAT;AAGD;AACF,GAXD;AAYA,SAAON,MAAP;AACD;;AAUM,SAASO,qBAAT,CAA+Bb,OAA/B,EAAsE;AAAA,MACnEc,WADmE,GACLd,OADK,CACnEc,WADmE;AAAA,MACtDZ,aADsD,GACLF,OADK,CACtDE,aADsD;AAAA,MACvCC,KADuC,GACLH,OADK,CACvCG,KADuC;AAAA,MACzBY,QADyB,GACLf,OADK,CAChCI,KADgC;AAAA,MACfC,KADe,GACLL,OADK,CACfK,KADe;AAG3E,MAAIC,MAAY,GAAG,EAAnB;;AAEA,OAAK,IAAMU,EAAX,IAAiBD,QAAjB,EAA2B;AACzB,QAAME,UAAU,GAAGH,WAAW,CAACE,EAAD,CAA9B;AACA,QAAMZ,KAAK,GAAGW,QAAQ,CAACC,EAAD,CAAtB;AACA,QAAMJ,KAAK,GAAGV,aAAa,CAACE,KAAD,EAAQD,KAAR,EAAeE,KAAf,CAA3B;;AAEA,QAAI,CAACY,UAAL,EAAiB;AACfX,MAAAA,MAAM,GAAG,wBAAM,EAAN,EAAUA,MAAV,EAAkBM,KAAlB,CAAT;AACD,KAFD,MAEO;AAAA;;AACL,UAAMD,KAAK,GAAGd,gBAAgB,CAACoB,UAAD,CAA9B;AACAX,MAAAA,MAAM,GAAG,wBAAM,EAAN,EAAUA,MAAV,yBACNK,KADM,IACE,wBAAM,EAAN,EAAUL,MAAM,CAACK,KAAD,CAAhB,EAAyBC,KAAzB,CADF,WAAT;AAGD;AACF;;AACD,SAAON,MAAP;AACD","sourcesContent":["import { Dict } from \"@chakra-ui/utils\"\nimport merge from \"lodash.mergewith\"\nimport { StyleFunction } from \"./types\"\n\ninterface Props {\n  theme?: Dict\n  [k: string]: any\n}\n\nexport const createMediaQuery = (n: string) =>\n  `@media screen and (min-width: ${n})`\n\ntype ValueType = string | number | ((theme: Dict) => string | number)\n\ninterface ParseResponsiveArrayOptions {\n  mediaQueries: string[]\n  styleFunction: StyleFunction\n  scale: any\n  value: Array<ValueType>\n  props: Props\n}\n\nexport function parseResponsiveArray(options: ParseResponsiveArrayOptions) {\n  const { mediaQueries, styleFunction, scale, value, props } = options\n  let styles: Dict = {}\n  value.slice(0, mediaQueries.length).forEach((value, i) => {\n    const media = mediaQueries[i]\n    const style = styleFunction(value, scale, props)\n\n    if (!media) {\n      styles = merge({}, styles, style)\n    } else {\n      styles = merge({}, styles, {\n        [media]: merge({}, styles[media], style),\n      })\n    }\n  })\n  return styles\n}\n\ninterface ParseResponsiveObjectOptions {\n  breakpoints: Dict\n  styleFunction: StyleFunction\n  scale: any\n  value: Record<string, ValueType>\n  props: Props\n}\n\nexport function parseResponsiveObject(options: ParseResponsiveObjectOptions) {\n  const { breakpoints, styleFunction, scale, value: valueObj, props } = options\n\n  let styles: Dict = {}\n\n  for (const bp in valueObj) {\n    const breakpoint = breakpoints[bp]\n    const value = valueObj[bp]\n    const style = styleFunction(value, scale, props)\n\n    if (!breakpoint) {\n      styles = merge({}, styles, style)\n    } else {\n      const media = createMediaQuery(breakpoint)\n      styles = merge({}, styles, {\n        [media]: merge({}, styles[media], style),\n      })\n    }\n  }\n  return styles\n}\n"],"file":"parse-responsive.js"}