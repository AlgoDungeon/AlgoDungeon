"use strict";

exports.__esModule = true;
exports.createParser = createParser;

var _utils = require("@chakra-ui/utils");

var _lodash = _interopRequireDefault(require("lodash.mergewith"));

var _utils2 = require("../utils");

var _parseResponsive = require("./parse-responsive");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var defaultBreakpoints = [40, 52, 64].map(function (n) {
  return n + "em";
});

function createParser(config) {
  var cache = new Map();

  var parse = function parse(props) {
    var _props$theme, _props$theme$config;

    var styles = {};
    var shouldSort = false;
    var isCacheDisabled = (_props$theme = props.theme) == null ? void 0 : (_props$theme$config = _props$theme.config) == null ? void 0 : _props$theme$config.disableStyledSystemCache;

    for (var prop in props) {
      var _props$theme2;

      if (!config[prop]) continue;
      var styleFunction = config[prop];
      var value = props[prop];
      var theme = (_props$theme2 = props.theme) != null ? _props$theme2 : {};
      var scale = (0, _utils.memoizedGet)(theme, styleFunction.scale, styleFunction.defaults);

      if (typeof value === "object") {
        var bps = !isCacheDisabled && cache.get("breakpoints") || (0, _utils.memoizedGet)(theme, "breakpoints", defaultBreakpoints);
        cache.set("breakpoints", bps);

        if (Array.isArray(value)) {
          var _bps = !isCacheDisabled && cache.get("media") || [null].concat(cache.get("breakpoints").map(_parseResponsive.createMediaQuery));

          cache.set("media", _bps);
          var style = (0, _parseResponsive.parseResponsiveArray)({
            mediaQueries: cache.get("media"),
            styleFunction: styleFunction,
            scale: scale,
            value: value,
            props: props
          });
          styles = (0, _lodash["default"])(styles, style);
          continue;
        }

        if (value !== null) {
          var _style = (0, _parseResponsive.parseResponsiveObject)({
            breakpoints: cache.get("breakpoints"),
            styleFunction: styleFunction,
            scale: scale,
            value: value,
            props: props
          });

          styles = (0, _lodash["default"])(styles, _style);
          shouldSort = true;
        }

        continue;
      }

      styles = (0, _lodash["default"])({}, styles, styleFunction(value, scale, props));
    } // sort object-based responsive styles


    if (shouldSort) {
      styles = (0, _utils2.sort)(styles);
    }

    return styles;
  };

  parse.config = config;
  parse.propNames = Object.keys(config);
  parse.cache = cache;
  var keys = Object.keys(config).filter(function (key) {
    return key !== "config";
  });

  if (keys.length > 1) {
    keys.forEach(function (key) {
      var _createParser;

      parse[key] = createParser((_createParser = {}, _createParser[key] = config[key], _createParser));
    });
  }

  return parse;
}
//# sourceMappingURL=create-parser.js.map