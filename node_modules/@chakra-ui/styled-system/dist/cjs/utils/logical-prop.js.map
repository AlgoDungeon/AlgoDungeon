{"version":3,"sources":["../../../src/utils/logical-prop.ts"],"names":["logicalTransform","opts","transform","ltr","rtl","rtlTransform","value","scale","props","getLogicalStyle","raw","logical","property"],"mappings":";;;;;AAAA;;AAGA;;;;;;AAUA;AACA;AACA;AACA;AACA,SAASA,gBAAT,CAA6CC,IAA7C,EAA+E;AAAA,MACrEC,SADqE,GAC7CD,IAD6C,CACrEC,SADqE;AAAA,MAC1DC,GAD0D,GAC7CF,IAD6C,CAC1DE,GAD0D;AAAA,MACrDC,GADqD,GAC7CH,IAD6C,CACrDG,GADqD;;AAG7E,MAAMC,YAAqC,GAAG,SAAxCA,YAAwC,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,EAAyB;AAAA,uBACzC,gCAAYA,KAAZ,CADyC;AAAA,QAC7DC,eAD6D,gBAC7DA,eAD6D;;AAErE,QAAMC,GAAG,GAAG,2BAAeJ,KAAf,EAAsBC,KAAtB,CAAZ;AACA,WAAOE,eAAe,CAAC;AAAEL,MAAAA,GAAG,EAAHA,GAAF;AAAOD,MAAAA,GAAG,EAAHA,GAAP;AAAYG,MAAAA,KAAK,EAAEI;AAAnB,KAAD,CAAtB;AACD,GAJD;;AAMA,SAAOR,SAAS,GAAG,oBAAQA,SAAR,EAAmBG,YAAnB,CAAH,GAAsCA,YAAtD;AACD;;AAQM,SAASM,OAAT,CACLV,IADK,EAEO;AAAA,MACJW,QADI,GAC2BX,IAD3B,CACJW,QADI;AAAA,MACML,KADN,GAC2BN,IAD3B,CACMM,KADN;AAAA,MACaL,SADb,GAC2BD,IAD3B,CACaC,SADb;AAEZ,SAAO;AACLU,IAAAA,QAAQ,EAAE,GADL;AAELL,IAAAA,KAAK,EAALA,KAFK;AAGLL,IAAAA,SAAS,EAAEF,gBAAgB,cACtBY,QADsB;AAEzBV,MAAAA,SAAS,EAATA;AAFyB;AAHtB,GAAP;AAQD","sourcesContent":["import { compose, getWithDefault } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { PropConfig } from \"../core\"\nimport directional from \"./directionality\"\n\ntype CSSProp = keyof CSS.Properties\n\ninterface LogicalTransformOptions<T> {\n  ltr: T | T[]\n  rtl: T | T[]\n  transform?: PropConfig[\"transform\"]\n}\n\n/**\n * Polyfill for border-{start|end}-radius properties.\n * We'll remove this once css logical properties is supported in major browsers\n */\nfunction logicalTransform<T extends CSSProp>(opts: LogicalTransformOptions<T>) {\n  const { transform, ltr, rtl } = opts\n\n  const rtlTransform: PropConfig[\"transform\"] = (value, scale, props) => {\n    const { getLogicalStyle } = directional(props)\n    const raw = getWithDefault(value, scale)\n    return getLogicalStyle({ rtl, ltr, value: raw })\n  }\n\n  return transform ? compose(transform, rtlTransform) : rtlTransform\n}\n\ninterface LogicalOptions<T> {\n  scale?: string\n  property: { ltr: T | T[]; rtl: T | T[] }\n  transform?: PropConfig[\"transform\"]\n}\n\nexport function logical<T extends CSSProp>(\n  opts: LogicalOptions<T>,\n): PropConfig {\n  const { property, scale, transform } = opts\n  return {\n    property: \"&\",\n    scale,\n    transform: logicalTransform({\n      ...property,\n      transform,\n    }),\n  }\n}\n"],"file":"logical-prop.js"}