"use strict";

exports.__esModule = true;
exports.getIsRtl = getIsRtl;
exports["default"] = exports.TextDirection = void 0;

var determineTheme = function determineTheme(props) {
  return "theme" in props ? props.theme : props;
};

function getIsRtl(props) {
  var theme = determineTheme(props);
  return theme.direction === TextDirection.rtl;
}

var TextDirection;
exports.TextDirection = TextDirection;

(function (TextDirection) {
  TextDirection["ltr"] = "ltr";
  TextDirection["rtl"] = "rtl";
})(TextDirection || (exports.TextDirection = TextDirection = {}));

function directionality(options) {
  var theme = determineTheme(options);
  var direction = theme.direction;
  var isRtl = theme.direction === TextDirection.rtl;

  function getLogicalStyle(options) {
    var ltr = options.ltr,
        rtl = options.rtl,
        value = options.value;
    var result = {};
    var isProperties = Array.isArray(ltr) && Array.isArray(rtl);

    if (isProperties) {
      for (var i = 0; i < ltr.length; i += 1) {
        var key = isRtl ? rtl[i] : ltr[i];
        result[key] = value;
      }
    } else {
      var _key = isRtl ? rtl : ltr;

      result[_key] = value;
    }

    return result;
  }

  function getFourCornerValue(value) {
    var split = toList(value);
    var dontFlip = split.length <= 3 || split.length > 4;
    if (dontFlip) return value;
    var top = split[0],
        right = split[1],
        bottom = split[2],
        left = split[3];
    var flippedValue = [top, left, bottom, right].join(" ");
    return isRtl ? flippedValue : value;
  }

  return {
    getFourCornerValue: getFourCornerValue,
    direction: direction,
    getLogicalStyle: getLogicalStyle
  };
}

function toList(value) {
  return value.replace(/ +/g, " ").split(" ").map(function (i) {
    return i.trim();
  }).filter(Boolean);
}

var _default = directionality;
exports["default"] = _default;
//# sourceMappingURL=directionality.js.map