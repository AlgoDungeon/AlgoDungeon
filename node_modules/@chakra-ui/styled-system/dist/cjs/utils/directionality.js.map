{"version":3,"sources":["../../../src/utils/directionality.ts"],"names":["determineTheme","props","theme","getIsRtl","direction","TextDirection","rtl","directionality","options","isRtl","getLogicalStyle","ltr","value","result","isProperties","Array","isArray","i","length","key","getFourCornerValue","split","toList","dontFlip","top","right","bottom","left","flippedValue","join","replace","map","trim","filter","Boolean"],"mappings":";;;;;;AAKA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;AAAA,SACrB,WAAWA,KAAX,GAAmBA,KAAK,CAACC,KAAzB,GAAiCD,KADZ;AAAA,CAAvB;;AAGO,SAASE,QAAT,CAAkBF,KAAlB,EAA+B;AACpC,MAAMC,KAAK,GAAGF,cAAc,CAACC,KAAD,CAA5B;AACA,SAAOC,KAAK,CAACE,SAAN,KAAoBC,aAAa,CAACC,GAAzC;AACD;;IAEWD,a;;;WAAAA,a;AAAAA,EAAAA,a;AAAAA,EAAAA,a;GAAAA,a,6BAAAA,a;;AAiBZ,SAASE,cAAT,CAA+CC,OAA/C,EAA2D;AACzD,MAAMN,KAAK,GAAGF,cAAc,CAACQ,OAAD,CAA5B;AACA,MAAMJ,SAAwB,GAAGF,KAAK,CAACE,SAAvC;AACA,MAAMK,KAAc,GAAGP,KAAK,CAACE,SAAN,KAAoBC,aAAa,CAACC,GAAzD;;AAEA,WAASI,eAAT,CAA4CF,OAA5C,EAAyE;AAAA,QAC/DG,GAD+D,GAC3CH,OAD2C,CAC/DG,GAD+D;AAAA,QAC1DL,GAD0D,GAC3CE,OAD2C,CAC1DF,GAD0D;AAAA,QACrDM,KADqD,GAC3CJ,OAD2C,CACrDI,KADqD;AAEvE,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,YAAY,GAAGC,KAAK,CAACC,OAAN,CAAcL,GAAd,KAAsBI,KAAK,CAACC,OAAN,CAAcV,GAAd,CAA3C;;AAEA,QAAIQ,YAAJ,EAAkB;AAChB,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAAG,CAACO,MAAxB,EAAgCD,CAAC,IAAI,CAArC,EAAwC;AACtC,YAAME,GAAG,GAAGV,KAAK,GAAGH,GAAG,CAACW,CAAD,CAAN,GAAYN,GAAG,CAACM,CAAD,CAAhC;AACAJ,QAAAA,MAAM,CAACM,GAAD,CAAN,GAAcP,KAAd;AACD;AACF,KALD,MAKO;AACL,UAAMO,IAAG,GAAIV,KAAK,GAAGH,GAAH,GAASK,GAA3B;;AACAE,MAAAA,MAAM,CAACM,IAAD,CAAN,GAAcP,KAAd;AACD;;AACD,WAAOC,MAAP;AACD;;AAED,WAASO,kBAAT,CAA4BR,KAA5B,EAA2C;AACzC,QAAMS,KAAK,GAAGC,MAAM,CAACV,KAAD,CAApB;AACA,QAAMW,QAAQ,GAAGF,KAAK,CAACH,MAAN,IAAgB,CAAhB,IAAqBG,KAAK,CAACH,MAAN,GAAe,CAArD;AACA,QAAIK,QAAJ,EAAc,OAAOX,KAAP;AAH2B,QAIlCY,GAJkC,GAINH,KAJM;AAAA,QAI7BI,KAJ6B,GAINJ,KAJM;AAAA,QAItBK,MAJsB,GAINL,KAJM;AAAA,QAIdM,IAJc,GAINN,KAJM;AAKzC,QAAMO,YAAY,GAAG,CAACJ,GAAD,EAAMG,IAAN,EAAYD,MAAZ,EAAoBD,KAApB,EAA2BI,IAA3B,CAAgC,GAAhC,CAArB;AACA,WAAOpB,KAAK,GAAGmB,YAAH,GAAkBhB,KAA9B;AACD;;AAED,SAAO;AACLQ,IAAAA,kBAAkB,EAAlBA,kBADK;AAELhB,IAAAA,SAAS,EAATA,SAFK;AAGLM,IAAAA,eAAe,EAAfA;AAHK,GAAP;AAKD;;AAED,SAASY,MAAT,CAAgBV,KAAhB,EAAyC;AACvC,SAAOA,KAAK,CACTkB,OADI,CACI,KADJ,EACW,GADX,EAEJT,KAFI,CAEE,GAFF,EAGJU,GAHI,CAGA,UAACd,CAAD;AAAA,WAAOA,CAAC,CAACe,IAAF,EAAP;AAAA,GAHA,EAIJC,MAJI,CAIGC,OAJH,CAAP;AAKD;;eAEc3B,c","sourcesContent":["import { Dict } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\n\ntype CSSProp = keyof CSS.Properties\n\nconst determineTheme = (props: Dict): Dict =>\n  \"theme\" in props ? props.theme : props\n\nexport function getIsRtl(props: Dict) {\n  const theme = determineTheme(props)\n  return theme.direction === TextDirection.rtl\n}\n\nexport enum TextDirection {\n  /**\n   * The text flows from left to right (e.g., English, French).\n   */\n  ltr = \"ltr\",\n  /**\n   * The text flows from right to left (e.g. Arabic, Hebrew).\n   */\n  rtl = \"rtl\",\n}\n\ninterface GetLogicalValue<P> {\n  ltr: P | P[]\n  rtl: P | P[]\n  value: any\n}\n\nfunction directionality<T extends Dict = Dict>(options: T) {\n  const theme = determineTheme(options) as T\n  const direction: TextDirection = theme.direction\n  const isRtl: boolean = theme.direction === TextDirection.rtl\n\n  function getLogicalStyle<P extends CSSProp>(options: GetLogicalValue<P>) {\n    const { ltr, rtl, value } = options\n    const result = {} as Record<CSSProp, string | number>\n    const isProperties = Array.isArray(ltr) && Array.isArray(rtl)\n\n    if (isProperties) {\n      for (let i = 0; i < ltr.length; i += 1) {\n        const key = isRtl ? rtl[i] : ltr[i]\n        result[key] = value\n      }\n    } else {\n      const key = (isRtl ? rtl : ltr) as P\n      result[key] = value\n    }\n    return result\n  }\n\n  function getFourCornerValue(value: string) {\n    const split = toList(value)\n    const dontFlip = split.length <= 3 || split.length > 4\n    if (dontFlip) return value\n    const [top, right, bottom, left] = split\n    const flippedValue = [top, left, bottom, right].join(\" \")\n    return isRtl ? flippedValue : value\n  }\n\n  return {\n    getFourCornerValue,\n    direction,\n    getLogicalStyle,\n  }\n}\n\nfunction toList(value: string): string[] {\n  return value\n    .replace(/ +/g, \" \")\n    .split(\" \")\n    .map((i) => i.trim())\n    .filter(Boolean)\n}\n\nexport default directionality\n"],"file":"directionality.js"}