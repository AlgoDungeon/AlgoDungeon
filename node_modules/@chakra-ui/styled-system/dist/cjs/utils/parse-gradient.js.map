{"version":3,"sources":["../../../src/utils/parse-gradient.ts"],"names":["directionMap","valueSet","Set","Object","values","globals","trimSpace","str","trim","parseGradient","value","theme","includes","regex","exec","groups","type","_type","split","map","filter","Boolean","maybeDirection","stops","length","direction","unshift","_values","stop","has","_color","_stop","color","result","join","transformGradient","_"],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;AAGA,IAAMA,YAAY,GAAG;AACnB,UAAQ,QADW;AAEnB,WAAS,cAFU;AAGnB,UAAQ,UAHW;AAInB,WAAS,iBAJU;AAKnB,UAAQ,WALW;AAMnB,WAAS,gBANU;AAOnB,UAAQ,SAPW;AAQnB,WAAS;AARU,CAArB;AAWA,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,MAAP,CAAcJ,YAAd,CAAR,CAAjB;AAEA,IAAMK,OAAO,GAAG,CACd,MADc,EAEd,cAFc,EAGd,SAHc,EAId,SAJc,EAKd,QALc,EAMd,OANc,CAAhB;;AASA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD;AAAA,SAAiBA,GAAG,CAACC,IAAJ,EAAjB;AAAA,CAAlB;;AAEO,SAASC,aAAT,CAAuBC,KAAvB,EAAyDC,KAAzD,EAAsE;AAAA;;AAC3E,MAAID,KAAK,IAAI,IAAT,IAAiBL,OAAO,CAACO,QAAR,CAAiBF,KAAjB,CAArB,EAA8C,OAAOA,KAAP;;AAE9C,MAAMG,KAAK,4BAAG,6BAAH;AAAA;AAAA;AAAA,IAAX;;AAH2E,kDAKlDA,KAAK,CAACC,IAAN,CAAWJ,KAAX,CALkD,qBAKlD,YAAmBK,MAL+B,iCAKrB,EALqB;AAAA,MAKnEC,IALmE,QAKnEA,IALmE;AAAA,MAK7DZ,MAL6D,QAK7DA,MAL6D;;AAO3E,MAAI,CAACY,IAAD,IAAS,CAACZ,MAAd,EAAsB,OAAOM,KAAP;;AAEtB,MAAMO,KAAK,GAAGD,IAAI,CAACJ,QAAL,CAAc,WAAd,IAA6BI,IAA7B,GAAuCA,IAAvC,cAAd;;AAT2E,8BAWxCZ,MAAM,CACtCc,KADgC,CAC1B,GAD0B,EAEhCC,GAFgC,CAE5Bb,SAF4B,EAGhCc,MAHgC,CAGzBC,OAHyB,CAXwC;AAAA,MAWpEC,cAXoE;AAAA,MAWjDC,KAXiD;;AAgB3E,MAAI,CAAAA,KAAK,QAAL,YAAAA,KAAK,CAAEC,MAAP,MAAkB,CAAtB,EAAyB,OAAOd,KAAP;AAEzB,MAAMe,SAAS,GACbH,cAAc,IAAItB,YAAlB,GACIA,YAAY,CAACsB,cAAD,CADhB,GAEIA,cAHN;AAKAC,EAAAA,KAAK,CAACG,OAAN,CAAcD,SAAd;;AAEA,MAAME,OAAO,GAAGJ,KAAK,CAACJ,GAAN,CAAU,UAACS,IAAD,EAAU;AAClC;AACA,QAAI3B,QAAQ,CAAC4B,GAAT,CAAaD,IAAb,CAAJ,EAAwB,OAAOA,IAAP,CAFU,CAGlC;;AAHkC,sBAIVA,IAAI,CAACV,KAAL,CAAW,GAAX,CAJU;AAAA,QAI3BY,MAJ2B;AAAA,QAInBC,KAJmB,mBAKlC;;;AACA,QAAMC,KAAK,GAAG,wBAAIrB,KAAJ,cAAqBmB,MAArB,EAA+BA,MAA/B,CAAd,CANkC,CAOlC;;AACA,QAAMG,MAAM,GAAG,qBAASD,KAAT,IAAkBJ,IAAlB,GAAyBI,KAAxC;AAEA,WAAOD,KAAK,GAAG,CAACE,MAAD,EAASF,KAAT,EAAgBG,IAAhB,CAAqB,GAArB,CAAH,GAA+BD,MAA3C;AACD,GAXe,CAAhB;;AAaA,SAAUhB,KAAV,SAAmBU,OAAO,CAACO,IAAR,CAAa,IAAb,CAAnB;AACD;;AAEM,IAAMC,iBAA0C,GAAG,SAA7CA,iBAA6C,CAACzB,KAAD,EAAQ0B,CAAR,EAAWzB,KAAX;AAAA,SACxDF,aAAa,CAACC,KAAD,EAAQC,KAAR,WAAQA,KAAR,GAAiB,EAAjB,CAD2C;AAAA,CAAnD","sourcesContent":["import { Dict, memoizedGet as get, isObject } from \"@chakra-ui/utils\"\nimport { PropConfig } from \"../core\"\n\nconst directionMap = {\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\",\n}\n\nconst valueSet = new Set(Object.values(directionMap))\n\nconst globals = [\n  \"none\",\n  \"-moz-initial\",\n  \"inherit\",\n  \"initial\",\n  \"revert\",\n  \"unset\",\n]\n\nconst trimSpace = (str: string) => str.trim()\n\nexport function parseGradient(value: string | null | undefined, theme: Dict) {\n  if (value == null || globals.includes(value)) return value\n\n  const regex = /(?<type>^[a-z-A-Z]+)\\((?<values>(.*))\\)/g\n\n  const { type, values } = regex.exec(value)?.groups ?? {}\n\n  if (!type || !values) return value\n\n  const _type = type.includes(\"-gradient\") ? type : `${type}-gradient`\n\n  const [maybeDirection, ...stops] = values\n    .split(\",\")\n    .map(trimSpace)\n    .filter(Boolean)\n\n  if (stops?.length === 0) return value\n\n  const direction =\n    maybeDirection in directionMap\n      ? directionMap[maybeDirection]\n      : maybeDirection\n\n  stops.unshift(direction)\n\n  const _values = stops.map((stop) => {\n    // if stop is valid shorthand direction, return it\n    if (valueSet.has(stop)) return stop\n    // color stop could be `red.200 20%` based on css gradient spec\n    const [_color, _stop] = stop.split(\" \")\n    // else, get and transform the color token or css value\n    const color = get(theme, `colors.${_color}`, _color)\n    // isObject(...) is an exception for users who use `red` instead of `red.100`\n    const result = isObject(color) ? stop : color\n\n    return _stop ? [result, _stop].join(\" \") : result\n  })\n\n  return `${_type}(${_values.join(\", \")})`\n}\n\nexport const transformGradient: PropConfig[\"transform\"] = (value, _, theme) =>\n  parseGradient(value, theme ?? {})\n"],"file":"parse-gradient.js"}