{"version":3,"sources":["../../../src/config/position.ts"],"names":["createParser","system","positiveOrNegative","t","config","position","pos","prop","zIndex","property","scale","inset","spaceT","insetX","insetInline","insetY","insetBlock","top","insetBlockStart","bottom","insetBlockEnd","left","insetInlineStart","logical","ltr","rtl","transform","right","insetInlineEnd","Object","assign","insetStart","insetEnd","positionParser"],"mappings":"AACA,SAAiBA,YAAjB,EAA+BC,MAA/B,QAA6C,SAA7C;AACA,SAAiBC,kBAAjB,EAAsDC,CAAtD,QAA+D,UAA/D;AAEA,IAAMC,MAAc,GAAG;AACrBC,EAAAA,QAAQ,EAAE,IADW;AAErBC,EAAAA,GAAG,EAAEH,CAAC,CAACI,IAAF,CAAO,UAAP,CAFgB;AAGrBC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,QAAQ,EAAE,QAAZ;AAAsBC,IAAAA,KAAK,EAAE;AAA7B,GAHa;AAIrBC,EAAAA,KAAK,EAAER,CAAC,CAACS,MAAF,CAAS,OAAT,CAJc;AAKrBC,EAAAA,MAAM,EAAEV,CAAC,CAACS,MAAF,CAAS,CAAC,MAAD,EAAS,OAAT,CAAT,CALa;AAMrBE,EAAAA,WAAW,EAAEX,CAAC,CAACS,MAAF,CAAS,aAAT,CANQ;AAOrBG,EAAAA,MAAM,EAAEZ,CAAC,CAACS,MAAF,CAAS,CAAC,KAAD,EAAQ,QAAR,CAAT,CAPa;AAQrBI,EAAAA,UAAU,EAAEb,CAAC,CAACS,MAAF,CAAS,YAAT,CARS;AASrBK,EAAAA,GAAG,EAAEd,CAAC,CAACS,MAAF,CAAS,KAAT,CATgB;AAUrBM,EAAAA,eAAe,EAAEf,CAAC,CAACS,MAAF,CAAS,iBAAT,CAVI;AAWrBO,EAAAA,MAAM,EAAEhB,CAAC,CAACS,MAAF,CAAS,QAAT,CAXa;AAYrBQ,EAAAA,aAAa,EAAEjB,CAAC,CAACS,MAAF,CAAS,eAAT,CAZM;AAarBS,EAAAA,IAAI,EAAElB,CAAC,CAACS,MAAF,CAAS,MAAT,CAbe;AAcrBU,EAAAA,gBAAgB,EAAEnB,CAAC,CAACoB,OAAF,CAAU;AAC1Bb,IAAAA,KAAK,EAAE,OADmB;AAE1BD,IAAAA,QAAQ,EAAE;AACRe,MAAAA,GAAG,EAAE,MADG;AAERC,MAAAA,GAAG,EAAE;AAFG,KAFgB;AAM1BC,IAAAA,SAAS,EAAExB;AANe,GAAV,CAdG;AAsBrByB,EAAAA,KAAK,EAAExB,CAAC,CAACS,MAAF,CAAS,OAAT,CAtBc;AAuBrBgB,EAAAA,cAAc,EAAEzB,CAAC,CAACoB,OAAF,CAAU;AACxBb,IAAAA,KAAK,EAAE,OADiB;AAExBD,IAAAA,QAAQ,EAAE;AACRe,MAAAA,GAAG,EAAE,OADG;AAERC,MAAAA,GAAG,EAAE;AAFG,KAFc;AAMxBC,IAAAA,SAAS,EAAExB;AANa,GAAV;AAvBK,CAAvB;AAiCA2B,MAAM,CAACC,MAAP,CAAc1B,MAAd,EAAsB;AACpB2B,EAAAA,UAAU,EAAE3B,MAAM,CAACkB,gBADC;AAEpBU,EAAAA,QAAQ,EAAE5B,MAAM,CAACwB;AAFG,CAAtB;AAKA;AACA;AACA;;AAgEA,OAAO,IAAMvB,QAAQ,GAAGJ,MAAM,CAACG,MAAD,CAAvB;AACP,OAAO,IAAM6B,cAAc,GAAGjC,YAAY,CAACI,MAAD,CAAnC","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { Length, positiveOrNegative, ResponsiveValue, t } from \"../utils\"\n\nconst config: Config = {\n  position: true,\n  pos: t.prop(\"position\"),\n  zIndex: { property: \"zIndex\", scale: \"zIndices\" },\n  inset: t.spaceT(\"inset\"),\n  insetX: t.spaceT([\"left\", \"right\"]),\n  insetInline: t.spaceT(\"insetInline\"),\n  insetY: t.spaceT([\"top\", \"bottom\"]),\n  insetBlock: t.spaceT(\"insetBlock\"),\n  top: t.spaceT(\"top\"),\n  insetBlockStart: t.spaceT(\"insetBlockStart\"),\n  bottom: t.spaceT(\"bottom\"),\n  insetBlockEnd: t.spaceT(\"insetBlockEnd\"),\n  left: t.spaceT(\"left\"),\n  insetInlineStart: t.logical({\n    scale: \"space\",\n    property: {\n      ltr: \"left\",\n      rtl: \"right\",\n    },\n    transform: positiveOrNegative,\n  }),\n  right: t.spaceT(\"right\"),\n  insetInlineEnd: t.logical({\n    scale: \"space\",\n    property: {\n      ltr: \"right\",\n      rtl: \"left\",\n    },\n    transform: positiveOrNegative,\n  }),\n}\n\nObject.assign(config, {\n  insetStart: config.insetInlineStart,\n  insetEnd: config.insetInlineEnd,\n})\n\n/**\n * Types for position CSS properties\n */\nexport interface PositionProps {\n  /**\n   * The CSS `z-index` property\n   */\n  zIndex?: ResponsiveValue<string | CSS.Property.ZIndex>\n  /**\n   * The CSS `top` property\n   */\n  top?: ResponsiveValue<CSS.Property.Top<Length>>\n  insetBlockStart?: ResponsiveValue<CSS.Property.InsetBlockStart<Length>>\n  /**\n   * The CSS `right` property\n   */\n  right?: ResponsiveValue<CSS.Property.Right<Length>>\n  /**\n   * When the direction is `ltr`, `insetInlineEnd` is equivalent to `right`.\n   * When the direction is `rtl`, `insetInlineEnd` is equivalent to `left`.\n   */\n  insetInlineEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>\n  /**\n   * When the direction is `ltr`, `insetEnd` is equivalent to `right`.\n   * When the direction is `rtl`, `insetEnd` is equivalent to `left`.\n   */\n  insetEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>\n  /**\n   * The CSS `bottom` property\n   */\n  bottom?: ResponsiveValue<CSS.Property.Bottom<Length>>\n  insetBlockEnd?: ResponsiveValue<CSS.Property.InsetBlockEnd<Length>>\n  /**\n   * The CSS `left` property\n   */\n  left?: ResponsiveValue<CSS.Property.Left<Length>>\n  insetInlineStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>\n  /**\n   * When the direction is `start`, `end` is equivalent to `left`.\n   * When the direction is `start`, `end` is equivalent to `right`.\n   */\n  insetStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>\n  /**\n   * The CSS `left`, `right`, `top`, `bottom` property\n   */\n  inset?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `left`, and `right` property\n   */\n  insetX?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `top`, and `bottom` property\n   */\n  insetY?: ResponsiveValue<CSS.Property.Left<Length>>\n  /**\n   * The CSS `position` property\n   */\n  pos?: ResponsiveValue<CSS.Property.Position>\n  /**\n   * The CSS `position` property\n   */\n  position?: ResponsiveValue<CSS.Property.Position>\n  insetInline?: ResponsiveValue<CSS.Property.InsetInline>\n  insetBlock?: ResponsiveValue<CSS.Property.InsetBlock>\n}\n\nexport const position = system(config)\nexport const positionParser = createParser(config)\n"],"file":"position.js"}