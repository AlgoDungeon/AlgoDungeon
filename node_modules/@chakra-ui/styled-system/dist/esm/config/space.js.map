{"version":3,"sources":["../../../src/config/space.ts"],"names":["createParser","system","t","config","margin","spaceT","marginTop","marginBlockStart","marginRight","marginInlineEnd","marginBottom","marginBlockEnd","marginLeft","marginInlineStart","marginX","marginInline","marginY","marginBlock","padding","space","paddingTop","paddingBlockStart","paddingRight","paddingBottom","paddingBlockEnd","paddingLeft","paddingInlineStart","paddingInlineEnd","paddingX","paddingInline","paddingY","paddingBlock","Object","assign","m","mt","mr","me","marginEnd","mb","ml","ms","marginStart","mx","my","p","pt","py","px","pb","pl","ps","paddingStart","pr","pe","paddingEnd","spaceParser"],"mappings":"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","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { Length, ResponsiveValue, t } from \"../utils\"\n\nconst config: Config = {\n  margin: t.spaceT(\"margin\"),\n  marginTop: t.spaceT(\"marginTop\"),\n  marginBlockStart: t.spaceT(\"marginBlockStart\"),\n  marginRight: t.spaceT(\"marginRight\"),\n  marginInlineEnd: t.spaceT(\"marginInlineEnd\"),\n  marginBottom: t.spaceT(\"marginBottom\"),\n  marginBlockEnd: t.spaceT(\"marginBlockEnd\"),\n  marginLeft: t.spaceT(\"marginLeft\"),\n  marginInlineStart: t.spaceT(\"marginInlineStart\"),\n  marginX: t.spaceT([\"marginLeft\", \"marginRight\"]),\n  marginInline: t.spaceT(\"marginInline\"),\n  marginY: t.spaceT([\"marginTop\", \"marginBottom\"]),\n  marginBlock: t.spaceT(\"marginBlock\"),\n  padding: t.space(\"padding\"),\n  paddingTop: t.space(\"paddingTop\"),\n  paddingBlockStart: t.space(\"paddingBlockStart\"),\n  paddingRight: t.space(\"paddingRight\"),\n  paddingBottom: t.space(\"paddingBottom\"),\n  paddingBlockEnd: t.space(\"paddingBlockEnd\"),\n  paddingLeft: t.space(\"paddingLeft\"),\n  paddingInlineStart: t.space(\"paddingInlineStart\"),\n  paddingInlineEnd: t.space(\"paddingInlineEnd\"),\n  paddingX: t.space([\"paddingLeft\", \"paddingRight\"]),\n  paddingInline: t.space(\"paddingInline\"),\n  paddingY: t.space([\"paddingTop\", \"paddingBottom\"]),\n  paddingBlock: t.space(\"paddingBlock\"),\n}\n\nObject.assign(config, {\n  m: config.margin,\n  mt: config.marginTop,\n  mr: config.marginRight,\n  me: config.marginInlineEnd,\n  marginEnd: config.marginInlineEnd,\n  mb: config.marginBottom,\n  ml: config.marginLeft,\n  ms: config.marginInlineStart,\n  marginStart: config.marginInlineStart,\n  mx: config.marginX,\n  my: config.marginY,\n  p: config.padding,\n  pt: config.paddingTop,\n  py: config.paddingY,\n  px: config.paddingX,\n  pb: config.paddingBottom,\n  pl: config.paddingLeft,\n  ps: config.paddingInlineStart,\n  paddingStart: config.paddingInlineStart,\n  pr: config.paddingRight,\n  pe: config.paddingInlineEnd,\n  paddingEnd: config.paddingInlineEnd,\n})\n\n/**\n * Types for space related CSS properties\n */\nexport interface SpaceProps {\n  /**\n   * Margin on top, left, bottom and right\n   */\n  m?: ResponsiveValue<CSS.Property.Margin<Length>>\n  /**\n   * Margin on top, left, bottom and right\n   */\n  margin?: ResponsiveValue<CSS.Property.Margin<Length>>\n  /**\n   * Margin on top\n   */\n  mt?: ResponsiveValue<CSS.Property.Margin<Length>>\n  marginBlockStart?: ResponsiveValue<CSS.Property.MarginBlockStart<Length>>\n  /**\n   * Margin on top\n   */\n  marginTop?: ResponsiveValue<CSS.Property.MarginTop<Length>>\n  /**\n   * Margin on right\n   */\n  mr?: ResponsiveValue<CSS.Property.MarginRight<Length>>\n  /**\n   * When direction is `ltr`, `marginInlineEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginInlineEnd` is equivalent to `marginLeft`.\n   */\n  marginInlineEnd?: ResponsiveValue<CSS.Property.MarginInlineEnd<Length>>\n  /**\n   * When direction is `ltr`, `marginEnd` is equivalent to `marginRight`.\n   * When direction is `rtl`, `marginEnd` is equivalent to `marginLeft`.\n   */\n  marginEnd?: ResponsiveValue<CSS.Property.MarginInlineEnd<Length>>\n  /**\n   * When direction is `ltr`, `me` is equivalent to `marginRight`.\n   * When direction is `rtl`, `me` is equivalent to `marginLeft`.\n   */\n  me?: ResponsiveValue<CSS.Property.MarginInlineEnd<Length>>\n  /**\n   * Margin on right\n   */\n  marginRight?: ResponsiveValue<CSS.Property.MarginRight<Length>>\n  /**\n   * Margin on bottom\n   */\n  mb?: ResponsiveValue<CSS.Property.MarginBottom<Length>>\n  marginBlockEnd?: ResponsiveValue<CSS.Property.MarginBlockEnd<Length>>\n  /**\n   * Margin on bottom\n   */\n  marginBottom?: ResponsiveValue<CSS.Property.MarginBottom<Length>>\n  /**\n   * Margin on left\n   */\n  ml?: ResponsiveValue<CSS.Property.MarginLeft<Length>>\n  /**\n   * When direction is `ltr`, `marginInlineStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginInlineStart` is equivalent to `marginRight`.\n   */\n  marginInlineStart?: ResponsiveValue<CSS.Property.MarginInlineStart<Length>>\n  /**\n   * When direction is `ltr`, `marginStart` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `marginStart` is equivalent to `marginRight`.\n   */\n  marginStart?: ResponsiveValue<CSS.Property.MarginInlineStart<Length>>\n  /**\n   * When direction is `ltr`, `ms` is equivalent to `marginLeft`.\n   * When direction is `rtl`, `ms` is equivalent to `marginRight`.\n   */\n  ms?: ResponsiveValue<CSS.Property.MarginInlineStart<Length>>\n  /**\n   * Margin on left\n   */\n  marginLeft?: ResponsiveValue<CSS.Property.MarginLeft<Length>>\n  /**\n   * Margin on left and right\n   */\n  mx?: ResponsiveValue<CSS.Property.Margin<Length>>\n  marginInline?: ResponsiveValue<CSS.Property.MarginInline<Length>>\n  /**\n   * Margin on left and right\n   */\n  marginX?: ResponsiveValue<CSS.Property.Margin<Length>>\n  /**\n   * Margin on top and bottom\n   */\n  my?: ResponsiveValue<CSS.Property.Margin<Length>>\n  marginBlock?: ResponsiveValue<CSS.Property.MarginBlock<Length>>\n  /**\n   * Margin on top and bottom\n   */\n  marginY?: ResponsiveValue<CSS.Property.Margin<Length>>\n  /**\n   * Padding on top, left, bottom and right\n   */\n  p?: ResponsiveValue<CSS.Property.Padding<Length>>\n  /**\n   * Padding on top, left, bottom and right\n   */\n  padding?: ResponsiveValue<CSS.Property.Padding<Length>>\n  /**\n   * Padding on top\n   */\n  pt?: ResponsiveValue<CSS.Property.PaddingTop<Length>>\n  paddingBlockStart?: ResponsiveValue<CSS.Property.PaddingBlockStart<Length>>\n  /**\n   * Padding on top\n   */\n  paddingTop?: ResponsiveValue<CSS.Property.PaddingTop<Length>>\n  /**\n   * Padding on right\n   */\n  pr?: ResponsiveValue<CSS.Property.PaddingRight<Length>>\n  /**\n   * When direction is `ltr`, `paddingInlineEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingInlineEnd` is equivalent to `paddingLeft`.\n   */\n  paddingInlineEnd?: ResponsiveValue<CSS.Property.PaddingInlineEnd<Length>>\n  /**\n   * When direction is `ltr`, `paddingEnd` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `paddingEnd` is equivalent to `paddingLeft`.\n   */\n  paddingEnd?: ResponsiveValue<CSS.Property.PaddingInlineEnd<Length>>\n  /**\n   * When direction is `ltr`, `pe` is equivalent to `paddingRight`.\n   * When direction is `rtl`, `pe` is equivalent to `paddingLeft`.\n   */\n  pe?: ResponsiveValue<CSS.Property.PaddingInlineEnd<Length>>\n  /**\n   * Padding on right\n   */\n  paddingRight?: ResponsiveValue<CSS.Property.PaddingRight<Length>>\n  /**\n   * Padding on bottom\n   */\n  pb?: ResponsiveValue<CSS.Property.PaddingBottom<Length>>\n  paddingBlockEnd?: ResponsiveValue<CSS.Property.PaddingBlockEnd<Length>>\n  /**\n   * Padding on bottom\n   */\n  paddingBottom?: ResponsiveValue<CSS.Property.PaddingBottom<Length>>\n  /**\n   * Padding on left\n   */\n  pl?: ResponsiveValue<CSS.Property.PaddingLeft<Length>>\n  /**\n   * When direction is `ltr`, `paddingInlineStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingInlineStart` is equivalent to `paddingRight`.\n   */\n  paddingInlineStart?: ResponsiveValue<CSS.Property.PaddingInlineStart<Length>>\n  /**\n   * When direction is `ltr`, `paddingStart` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `paddingStart` is equivalent to `paddingRight`.\n   */\n  paddingStart?: ResponsiveValue<CSS.Property.PaddingInlineStart<Length>>\n  /**\n   * When direction is `ltr`, `ps` is equivalent to `paddingLeft`.\n   * When direction is `rtl`, `ps` is equivalent to `paddingRight`.\n   */\n  ps?: ResponsiveValue<CSS.Property.PaddingInlineStart<Length>>\n  /**\n   * Padding on left\n   */\n  paddingLeft?: ResponsiveValue<CSS.Property.PaddingLeft<Length>>\n  /**\n   * Padding on left and right\n   */\n  px?: ResponsiveValue<CSS.Property.Padding<Length>>\n  paddingInline?: ResponsiveValue<CSS.Property.PaddingInline<Length>>\n  /**\n   * Padding on left and right\n   */\n  paddingX?: ResponsiveValue<CSS.Property.Padding<Length>>\n  /**\n   * Padding on top and bottom\n   */\n  py?: ResponsiveValue<CSS.Property.Padding<Length>>\n  paddingBlock?: ResponsiveValue<CSS.Property.PaddingBlock<Length>>\n  /**\n   * Padding on top and bottom\n   */\n  paddingY?: ResponsiveValue<CSS.Property.Padding<Length>>\n}\n\n/**\n * Converts shorthand or longhand margin and padding props to margin and padding CSS declarations\n *\n * - Numbers from 0-4 (or the length of theme.space) are converted to values on the spacing scale.\n * - Negative values can be used for negative margins.\n * - Numbers greater than the length of the theme.space array are converted to raw pixel values.\n * - String values are passed as raw CSS values.\n * - Array values are converted into responsive values.\n */\nexport const space = system(config)\nexport const spaceParser = createParser(config)\n"],"file":"space.js"}