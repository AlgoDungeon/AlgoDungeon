import { createParser, system } from "../core";
import { t } from "../utils";
var config = {
  margin: t.spaceT("margin"),
  marginTop: t.spaceT("marginTop"),
  marginBlockStart: t.spaceT("marginBlockStart"),
  marginRight: t.spaceT("marginRight"),
  marginInlineEnd: t.spaceT("marginInlineEnd"),
  marginBottom: t.spaceT("marginBottom"),
  marginBlockEnd: t.spaceT("marginBlockEnd"),
  marginLeft: t.spaceT("marginLeft"),
  marginInlineStart: t.spaceT("marginInlineStart"),
  marginX: t.spaceT(["marginLeft", "marginRight"]),
  marginInline: t.spaceT("marginInline"),
  marginY: t.spaceT(["marginTop", "marginBottom"]),
  marginBlock: t.spaceT("marginBlock"),
  padding: t.space("padding"),
  paddingTop: t.space("paddingTop"),
  paddingBlockStart: t.space("paddingBlockStart"),
  paddingRight: t.space("paddingRight"),
  paddingBottom: t.space("paddingBottom"),
  paddingBlockEnd: t.space("paddingBlockEnd"),
  paddingLeft: t.space("paddingLeft"),
  paddingInlineStart: t.space("paddingInlineStart"),
  paddingInlineEnd: t.space("paddingInlineEnd"),
  paddingX: t.space(["paddingLeft", "paddingRight"]),
  paddingInline: t.space("paddingInline"),
  paddingY: t.space(["paddingTop", "paddingBottom"]),
  paddingBlock: t.space("paddingBlock")
};
Object.assign(config, {
  m: config.margin,
  mt: config.marginTop,
  mr: config.marginRight,
  me: config.marginInlineEnd,
  marginEnd: config.marginInlineEnd,
  mb: config.marginBottom,
  ml: config.marginLeft,
  ms: config.marginInlineStart,
  marginStart: config.marginInlineStart,
  mx: config.marginX,
  my: config.marginY,
  p: config.padding,
  pt: config.paddingTop,
  py: config.paddingY,
  px: config.paddingX,
  pb: config.paddingBottom,
  pl: config.paddingLeft,
  ps: config.paddingInlineStart,
  paddingStart: config.paddingInlineStart,
  pr: config.paddingRight,
  pe: config.paddingInlineEnd,
  paddingEnd: config.paddingInlineEnd
});
/**
 * Types for space related CSS properties
 */

/**
 * Converts shorthand or longhand margin and padding props to margin and padding CSS declarations
 *
 * - Numbers from 0-4 (or the length of theme.space) are converted to values on the spacing scale.
 * - Negative values can be used for negative margins.
 * - Numbers greater than the length of the theme.space array are converted to raw pixel values.
 * - String values are passed as raw CSS values.
 * - Array values are converted into responsive values.
 */
export var space = system(config);
export var spaceParser = createParser(config);
//# sourceMappingURL=space.js.map