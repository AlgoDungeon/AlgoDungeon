{"version":3,"sources":["../../../src/config/typography.ts"],"names":["createParser","system","config","fontFamily","property","scale","fontSize","fontWeight","lineHeight","letterSpacing","textAlign","fontStyle","wordBreak","overflowWrap","textOverflow","textTransform","whiteSpace","textDecoration","textDecor","typography","typographyParser"],"mappings":"AACA,SAAiBA,YAAjB,EAA+BC,MAA/B,QAA6C,SAA7C;AAGA,IAAMC,MAAc,GAAG;AACrBC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAE,YADA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GADS;AAKrBC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,QAAQ,EAAE,UADF;AAERC,IAAAA,KAAK,EAAE;AAFC,GALW;AASrBE,EAAAA,UAAU,EAAE;AACVH,IAAAA,QAAQ,EAAE,YADA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GATS;AAarBG,EAAAA,UAAU,EAAE;AACVJ,IAAAA,QAAQ,EAAE,YADA;AAEVC,IAAAA,KAAK,EAAE;AAFG,GAbS;AAiBrBI,EAAAA,aAAa,EAAE;AACbL,IAAAA,QAAQ,EAAE,eADG;AAEbC,IAAAA,KAAK,EAAE;AAFM,GAjBM;AAqBrBK,EAAAA,SAAS,EAAE,IArBU;AAsBrBC,EAAAA,SAAS,EAAE,IAtBU;AAuBrBC,EAAAA,SAAS,EAAE,IAvBU;AAwBrBC,EAAAA,YAAY,EAAE,IAxBO;AAyBrBC,EAAAA,YAAY,EAAE,IAzBO;AA0BrBC,EAAAA,aAAa,EAAE,IA1BM;AA2BrBC,EAAAA,UAAU,EAAE,IA3BS;AA4BrBC,EAAAA,cAAc,EAAE,IA5BK;AA6BrBC,EAAAA,SAAS,EAAE;AACTd,IAAAA,QAAQ,EAAE;AADD;AA7BU,CAAvB;AAkCA;AACA;AACA;;AA4DA,OAAO,IAAMe,UAAU,GAAGlB,MAAM,CAACC,MAAD,CAAzB;AACP,OAAO,IAAMkB,gBAAgB,GAAGpB,YAAY,CAACE,MAAD,CAArC","sourcesContent":["import * as CSS from \"csstype\"\nimport { Config, createParser, system } from \"../core\"\nimport { ResponsiveValue, Length } from \"../utils\"\n\nconst config: Config = {\n  fontFamily: {\n    property: \"fontFamily\",\n    scale: \"fonts\",\n  },\n  fontSize: {\n    property: \"fontSize\",\n    scale: \"fontSizes\",\n  },\n  fontWeight: {\n    property: \"fontWeight\",\n    scale: \"fontWeights\",\n  },\n  lineHeight: {\n    property: \"lineHeight\",\n    scale: \"lineHeights\",\n  },\n  letterSpacing: {\n    property: \"letterSpacing\",\n    scale: \"letterSpacings\",\n  },\n  textAlign: true,\n  fontStyle: true,\n  wordBreak: true,\n  overflowWrap: true,\n  textOverflow: true,\n  textTransform: true,\n  whiteSpace: true,\n  textDecoration: true,\n  textDecor: {\n    property: \"textDecoration\",\n  },\n}\n\n/**\n * Types for typography related CSS properties\n */\nexport interface TypographyProps {\n  /**\n   * The CSS `font-weight` property\n   */\n  fontWeight?: ResponsiveValue<string | number>\n  /**\n   * The CSS `line-height` property\n   */\n  lineHeight?: ResponsiveValue<CSS.Property.LineHeight<Length>>\n  /**\n   * The CSS `letter-spacing` property\n   */\n  letterSpacing?: ResponsiveValue<CSS.Property.LetterSpacing<Length>>\n  /**\n   * The CSS `font-size` property\n   */\n  fontSize?: ResponsiveValue<CSS.Property.FontSize<Length>>\n  /**\n   * The CSS `font-family` property\n   */\n  fontFamily?: ResponsiveValue<CSS.Property.FontFamily>\n  /**\n   * The CSS `text-align` property\n   */\n  textAlign?: ResponsiveValue<CSS.Property.TextAlign>\n  /**\n   * The CSS `font-style` property\n   */\n  fontStyle?: ResponsiveValue<CSS.Property.FontStyle>\n  /**\n   * The CSS `word-break` property\n   */\n  wordBreak?: ResponsiveValue<CSS.Property.WordBreak>\n  /**\n   * The CSS `overflow-wrap` property\n   */\n  overflowWrap?: ResponsiveValue<CSS.Property.OverflowWrap>\n  /**\n   * The CSS `text-overflow` property\n   */\n  textOverflow?: ResponsiveValue<CSS.Property.TextOverflow>\n  /**\n   * The CSS `text-transform` property\n   */\n  textTransform?: ResponsiveValue<CSS.Property.TextTransform>\n  /**\n   * The CSS `white-space` property\n   */\n  whiteSpace?: ResponsiveValue<CSS.Property.WhiteSpace>\n  /**\n   * The CSS `text-decoration` property\n   */\n  textDecoration?: ResponsiveValue<CSS.Property.TextDecoration<Length>>\n  /**\n   * The CSS `text-decoration` property\n   */\n  textDecor?: ResponsiveValue<CSS.Property.TextDecoration<Length>>\n}\n\nexport const typography = system(config)\nexport const typographyParser = createParser(config)\n"],"file":"typography.js"}