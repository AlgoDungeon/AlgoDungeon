{"version":3,"sources":["../../src/css.ts"],"names":["isArray","isCustomBreakpoint","isObject","isResponsiveObjectLike","memoizedGet","get","mergeWith","objectToArrayNotation","runIfFn","parser","pseudoSelectors","cache","themeBreakpoints","breakpoints","breakpointValues","mediaQueries","calculateBreakpointAndMediaQueries","isCached","Object","entries","filter","key","reduce","carry","breakpoint","value","push","map","bp","slice","responsive","styles","theme","computedStyles","queries","length","index","media","css","args","props","styleObject","k","x","val","config","property","scale","apply","transform","properties"],"mappings":"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","sourcesContent":["import {\n  Dict,\n  isArray,\n  isCustomBreakpoint,\n  isObject,\n  isResponsiveObjectLike,\n  memoizedGet as get,\n  mergeWith,\n  objectToArrayNotation,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { CSSObject, StyleObjectOrFn } from \"./css.types\"\nimport { parser } from \"./parser\"\nimport { pseudoSelectors } from \"./pseudo\"\n\ninterface Cache {\n  themeBreakpoints: string[]\n  breakpoints: string[]\n  breakpointValues: string[]\n  mediaQueries: (string | null)[]\n}\n\nconst cache: Cache = {\n  themeBreakpoints: [],\n  breakpoints: [],\n  breakpointValues: [],\n  mediaQueries: [],\n}\n\ninterface BreakpointValueObj {\n  /**\n   * left side of a breakpoint object, the name, e.g. sm\n   */\n  breakpoints: string[]\n  /**\n   * right side of a breakpoint object, the size, e.g. 4\n   */\n  breakpointValues: string[]\n}\n\n/**\n *\n */\nconst calculateBreakpointAndMediaQueries = (\n  themeBreakpoints: string[] = [],\n) => {\n  // caching here reduces execution time by factor 4-6x\n  const isCached = cache.themeBreakpoints === themeBreakpoints\n\n  if (isCached) {\n    return cache\n  }\n\n  const { breakpoints, breakpointValues } = Object.entries(themeBreakpoints)\n    .filter(([key]) => isCustomBreakpoint(key))\n    .reduce<BreakpointValueObj>(\n      (carry, [breakpoint, value]) => {\n        carry.breakpoints.push(breakpoint)\n        carry.breakpointValues.push(value)\n\n        return carry\n      },\n      {\n        breakpoints: [],\n        breakpointValues: [],\n      },\n    )\n\n  const mediaQueries = [\n    null,\n    ...breakpointValues\n      .map((bp) => `@media screen and (min-width: ${bp})`)\n      .slice(1),\n  ]\n\n  cache.themeBreakpoints = themeBreakpoints\n  cache.mediaQueries = mediaQueries\n  cache.breakpointValues = breakpointValues\n  cache.breakpoints = breakpoints\n\n  return {\n    breakpoints,\n    mediaQueries,\n  }\n}\n\nconst responsive = (styles: any) => (theme: Dict) => {\n  const computedStyles: any = {}\n\n  const { breakpoints, mediaQueries } = calculateBreakpointAndMediaQueries(\n    theme.breakpoints,\n  )\n\n  for (const key in styles) {\n    let value = runIfFn(styles[key], theme)\n\n    if (value == null) {\n      continue\n    }\n\n    value = isResponsiveObjectLike(value, breakpoints)\n      ? objectToArrayNotation(value, breakpoints)\n      : value\n\n    if (!isArray(value)) {\n      computedStyles[key] = value\n      continue\n    }\n\n    const queries = value.slice(0, mediaQueries.length).length\n\n    for (let index = 0; index < queries; index += 1) {\n      const media = mediaQueries[index]\n\n      if (!media) {\n        computedStyles[key] = value[index]\n        continue\n      }\n\n      computedStyles[media] = computedStyles[media] || {}\n\n      if (value[index] == null) {\n        continue\n      }\n\n      computedStyles[media][key] = value[index]\n    }\n  }\n\n  return computedStyles\n}\n\ntype PropsOrTheme = Dict | { theme: Dict }\n\nexport const css = (args: StyleObjectOrFn = {}) => (\n  props: PropsOrTheme = {},\n) => {\n  const theme = \"theme\" in props ? props.theme : props\n\n  let computedStyles: CSSObject = {}\n\n  const styleObject = runIfFn(args, theme)\n  const styles = responsive(styleObject)(theme)\n\n  for (const k in styles) {\n    const x = styles[k]\n    const val = runIfFn(x, theme)\n\n    const key = k in pseudoSelectors ? pseudoSelectors[k] : k\n    let config = (parser.config as Dict)[key]\n\n    if (config === true) {\n      // shortcut definition\n      config = {\n        property: key,\n        scale: key,\n      }\n    }\n\n    if (key === \"apply\") {\n      const apply = css(get(theme, val))(theme)\n      computedStyles = mergeWith({}, computedStyles, apply)\n      continue\n    }\n\n    if (isObject(val)) {\n      computedStyles[key] = css(val)(theme)\n      continue\n    }\n\n    const scale = get(theme, config?.scale, {})\n    const value = config?.transform?.(val, scale, props) ?? get(scale, val, val)\n\n    if (config?.properties) {\n      for (const property of config.properties) {\n        computedStyles[property] = value\n      }\n      continue\n    }\n\n    if (config?.property) {\n      /**\n       * Used for styled-system configs that map to multiple computed properties.\n       * For example, the `borderLeftRadius` computed keys based on rtl/ltr\n       */\n      if (config.property === \"&\") {\n        computedStyles = mergeWith({}, computedStyles, value)\n      } else {\n        computedStyles[config.property] = value\n      }\n      continue\n    }\n\n    computedStyles[key] = value\n  }\n\n  return computedStyles\n}\n"],"file":"css.js"}