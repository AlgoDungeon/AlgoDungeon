{"version":3,"sources":["../../../src/utils/index.ts"],"names":["get","isNumber","logical","positiveOrNegative","makeConfig","scale","transform","prop","result","Array","isArray","properties","property","fractionalValue","value","defaultValue","t","borderWidths","borderStyles","colors","borders","radii","space","spaceT","sizes","sizesT","shadows"],"mappings":"AAAA,SAASA,GAAT,EAAcC,QAAd,QAA8B,kBAA9B;AAGA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AAEA,cAAc,wBAAd;AACA,cAAc,QAAd;AACA,cAAc,SAAd;AACA,cAAc,gBAAd;AAIA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAAmCC,SAAnC,EAAwE;AAC7E,SAA2BC,IAApB,IAAsC;AAC3C,QAAMC,MAAkB,GAAG;AAAEH,MAAAA;AAAF,KAA3B;AACA,QAAIC,SAAJ,EAAeE,MAAM,CAACF,SAAP,GAAmBA,SAAnB;AACf,QAAIG,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyBC,MAAM,CAACG,UAAP,GAAoBJ,IAApB,CAAzB,KACKC,MAAM,CAACI,QAAP,GAAkBL,IAAlB;AACL,WAAOC,MAAP;AACD,GAND;AAOD;;AAED,SAASK,eAAT,CAAyBC,KAAzB,EAAqCT,KAArC,EAAiD;AAC/C,MAAMU,YAAY,GAAG,CAACd,QAAQ,CAACa,KAAD,CAAT,IAAoBA,KAAK,GAAG,CAA5B,GAAgCA,KAAhC,GAA2CA,KAAK,GAAG,GAAnD,MAArB;AACA,SAAOd,GAAG,CAACK,KAAD,EAAQS,KAAR,EAAeC,YAAf,CAAV;AACD;;AAED,OAAO,IAAMC,CAAC,GAAG;AACfC,EAAAA,YAAY,EAAEb,UAAU,CAAC,cAAD,CADT;AAEfc,EAAAA,YAAY,EAAEd,UAAU,CAAC,cAAD,CAFT;AAGfe,EAAAA,MAAM,EAAEf,UAAU,CAAC,QAAD,CAHH;AAIfgB,EAAAA,OAAO,EAAEhB,UAAU,CAAC,SAAD,CAJJ;AAKfiB,EAAAA,KAAK,EAAEjB,UAAU,CAAC,OAAD,CALF;AAMfkB,EAAAA,KAAK,EAAElB,UAAU,CAAC,OAAD,CANF;AAOfmB,EAAAA,MAAM,EAAEnB,UAAU,CAAC,OAAD,EAAUD,kBAAV,CAPH;AAQfI,EAAAA,IAAI,EAAE,CAACK,QAAD,EAAoBN,SAApB,MAA6D;AACjEM,IAAAA,QADiE;AAEjEN,IAAAA;AAFiE,GAA7D,CARS;AAYfkB,EAAAA,KAAK,EAAEpB,UAAU,CAAC,OAAD,CAZF;AAafqB,EAAAA,MAAM,EAAErB,UAAU,CAAC,OAAD,EAAUS,eAAV,CAbH;AAcfa,EAAAA,OAAO,EAAEtB,UAAU,CAAC,SAAD,CAdJ;AAefF,EAAAA;AAfe,CAAV","sourcesContent":["import { get, isNumber } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { PropConfig } from \"../core\"\nimport { logical } from \"./logical-prop\"\nimport { positiveOrNegative } from \"./positive-or-negative\"\n\nexport * from \"./positive-or-negative\"\nexport * from \"./sort\"\nexport * from \"./types\"\nexport * from \"./logical-prop\"\n\ntype CSSProp = keyof CSS.Properties\n\nexport function makeConfig(scale: string, transform?: PropConfig[\"transform\"]) {\n  return <T extends CSSProp>(prop: T | T[]) => {\n    const result: PropConfig = { scale }\n    if (transform) result.transform = transform\n    if (Array.isArray(prop)) result.properties = prop\n    else result.property = prop\n    return result\n  }\n}\n\nfunction fractionalValue(value: any, scale: any) {\n  const defaultValue = !isNumber(value) || value > 1 ? value : `${value * 100}%`\n  return get(scale, value, defaultValue)\n}\n\nexport const t = {\n  borderWidths: makeConfig(\"borderWidths\"),\n  borderStyles: makeConfig(\"borderStyles\"),\n  colors: makeConfig(\"colors\"),\n  borders: makeConfig(\"borders\"),\n  radii: makeConfig(\"radii\"),\n  space: makeConfig(\"space\"),\n  spaceT: makeConfig(\"space\", positiveOrNegative),\n  prop: (property: CSSProp, transform?: PropConfig[\"transform\"]) => ({\n    property,\n    transform,\n  }),\n  sizes: makeConfig(\"sizes\"),\n  sizesT: makeConfig(\"sizes\", fractionalValue),\n  shadows: makeConfig(\"shadows\"),\n  logical,\n}\n"],"file":"index.js"}