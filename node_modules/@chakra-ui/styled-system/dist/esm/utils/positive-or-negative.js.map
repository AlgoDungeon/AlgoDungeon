{"version":3,"sources":["../../../src/utils/positive-or-negative.ts"],"names":["isString","isNumber","unit","startsWith","string","target","slice","length","positiveOrNegative","value","scale","result","valueString","toString","raw","computedValue","hasUnit","Number","isNaN"],"mappings":"AAAA,SAAyBA,QAAzB,EAAmCC,QAAnC,QAAmD,kBAAnD;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,IAAMC,UAAU,GAAG,CAACC,MAAD,EAAiBC,MAAjB,KACjBD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgB,IAAID,MAAM,CAACE,MAA3B,MAAuCF,MADzC;;AAGA,OAAO,SAASG,kBAAT,CACLC,KADK,EAELC,KAFK,EAGL;AACA,MAAI,CAACA,KAAD,IAAUD,KAAK,IAAI,IAAvB,EAA6B,OAAOA,KAAP;AAE7B,MAAIE,MAAJ;AAEA,MAAMC,WAAW,GAAGH,KAAK,CAACI,QAAN,EAApB;;AAEA,MAAIV,UAAU,CAACS,WAAD,EAAc,GAAd,CAAd,EAAkC;AAChC,QAAME,GAAG,GAAGJ,KAAK,CAACE,WAAW,CAACN,KAAZ,CAAkB,CAAlB,CAAD,CAAjB;;AACA,QAAIN,QAAQ,CAACc,GAAD,CAAZ,EAAmB;AACjBH,MAAAA,MAAM,SAAOG,GAAb;AACD,KAFD,MAEO,IAAIb,QAAQ,CAACa,GAAD,CAAZ,EAAmB;AACxBH,MAAAA,MAAM,GAAGG,GAAG,GAAG,CAAC,CAAhB;AACD,KAFM,MAEA;AACLH,MAAAA,MAAM,GAAGF,KAAT;AACD;AACF,GATD,MASO;AAAA;;AACLE,IAAAA,MAAM,mBAAGD,KAAK,CAACD,KAAD,CAAR,2BAAmBA,KAAzB;AACD;;AAED,MAAIM,aAAa,GAAGJ,MAAM,IAAIF,KAA9B;AACA,MAAMO,OAAO,GAAGd,IAAI,CAACa,aAAD,CAApB;;AAEA,MAAI,CAACC,OAAD,IAAY,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,aAAD,CAAnB,CAAjB,EAAsD;AACpDA,IAAAA,aAAa,GAAGE,MAAM,CAACF,aAAD,CAAtB;AACD;;AAED,SAAOA,aAAP;AACD","sourcesContent":["import { StringOrNumber, isString, isNumber } from \"@chakra-ui/utils\"\nimport unit from \"./get-unit\"\n\nconst startsWith = (string: string, target: string) =>\n  string.slice(0, 0 + target.length) === target\n\nexport function positiveOrNegative(\n  value: StringOrNumber | undefined,\n  scale: any,\n) {\n  if (!scale || value == null) return value\n\n  let result: any\n\n  const valueString = value.toString()\n\n  if (startsWith(valueString, \"-\")) {\n    const raw = scale[valueString.slice(1)]\n    if (isString(raw)) {\n      result = `-${raw}`\n    } else if (isNumber(raw)) {\n      result = raw * -1\n    } else {\n      result = value\n    }\n  } else {\n    result = scale[value] ?? value\n  }\n\n  let computedValue = result || value\n  const hasUnit = unit(computedValue)\n\n  if (!hasUnit && !Number.isNaN(Number(computedValue))) {\n    computedValue = Number(computedValue)\n  }\n\n  return computedValue\n}\n"],"file":"positive-or-negative.js"}