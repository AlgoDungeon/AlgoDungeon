{"version":3,"sources":["../../../src/utils/parse-gradient.ts"],"names":["memoizedGet","get","isObject","directionMap","valueSet","Set","Object","values","globals","trimSpace","str","trim","parseGradient","value","theme","includes","regex","type","exec","groups","_type","maybeDirection","stops","split","map","filter","Boolean","length","direction","unshift","_values","stop","has","_color","_stop","color","result","join","transformGradient","_"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAAeA,WAAW,IAAIC,GAA9B,EAAmCC,QAAnC,QAAmD,kBAAnD;AAGA,IAAMC,YAAY,GAAG;AACnB,UAAQ,QADW;AAEnB,WAAS,cAFU;AAGnB,UAAQ,UAHW;AAInB,WAAS,iBAJU;AAKnB,UAAQ,WALW;AAMnB,WAAS,gBANU;AAOnB,UAAQ,SAPW;AAQnB,WAAS;AARU,CAArB;AAWA,IAAMC,QAAQ,GAAG,IAAIC,GAAJ,CAAQC,MAAM,CAACC,MAAP,CAAcJ,YAAd,CAAR,CAAjB;AAEA,IAAMK,OAAO,GAAG,CACd,MADc,EAEd,cAFc,EAGd,SAHc,EAId,SAJc,EAKd,QALc,EAMd,OANc,CAAhB;;AASA,IAAMC,SAAS,GAAIC,GAAD,IAAiBA,GAAG,CAACC,IAAJ,EAAnC;;AAEA,OAAO,SAASC,aAAT,CAAuBC,KAAvB,EAAyDC,KAAzD,EAAsE;AAAA;;AAC3E,MAAID,KAAK,IAAI,IAAT,IAAiBL,OAAO,CAACO,QAAR,CAAiBF,KAAjB,CAArB,EAA8C,OAAOA,KAAP;;AAE9C,MAAMG,KAAK,4BAAG,6BAAH;AAAA;AAAA;AAAA,IAAX;;AAEA,MAAM;AAAEC,IAAAA,IAAF;AAAQV,IAAAA;AAAR,2CAAmBS,KAAK,CAACE,IAAN,CAAWL,KAAX,CAAnB,qBAAmB,YAAmBM,MAAtC,iCAAgD,EAAtD;AAEA,MAAI,CAACF,IAAD,IAAS,CAACV,MAAd,EAAsB,OAAOM,KAAP;;AAEtB,MAAMO,KAAK,GAAGH,IAAI,CAACF,QAAL,CAAc,WAAd,IAA6BE,IAA7B,GAAuCA,IAAvC,cAAd;;AAEA,MAAM,CAACI,cAAD,EAAiB,GAAGC,KAApB,IAA6Bf,MAAM,CACtCgB,KADgC,CAC1B,GAD0B,EAEhCC,GAFgC,CAE5Bf,SAF4B,EAGhCgB,MAHgC,CAGzBC,OAHyB,CAAnC;AAKA,MAAI,CAAAJ,KAAK,QAAL,YAAAA,KAAK,CAAEK,MAAP,MAAkB,CAAtB,EAAyB,OAAOd,KAAP;AAEzB,MAAMe,SAAS,GACbP,cAAc,IAAIlB,YAAlB,GACIA,YAAY,CAACkB,cAAD,CADhB,GAEIA,cAHN;AAKAC,EAAAA,KAAK,CAACO,OAAN,CAAcD,SAAd;;AAEA,MAAME,OAAO,GAAGR,KAAK,CAACE,GAAN,CAAWO,IAAD,IAAU;AAClC;AACA,QAAI3B,QAAQ,CAAC4B,GAAT,CAAaD,IAAb,CAAJ,EAAwB,OAAOA,IAAP,CAFU,CAGlC;;AACA,QAAM,CAACE,MAAD,EAASC,KAAT,IAAkBH,IAAI,CAACR,KAAL,CAAW,GAAX,CAAxB,CAJkC,CAKlC;;AACA,QAAMY,KAAK,GAAGlC,GAAG,CAACa,KAAD,cAAkBmB,MAAlB,EAA4BA,MAA5B,CAAjB,CANkC,CAOlC;;AACA,QAAMG,MAAM,GAAGlC,QAAQ,CAACiC,KAAD,CAAR,GAAkBJ,IAAlB,GAAyBI,KAAxC;AAEA,WAAOD,KAAK,GAAG,CAACE,MAAD,EAASF,KAAT,EAAgBG,IAAhB,CAAqB,GAArB,CAAH,GAA+BD,MAA3C;AACD,GAXe,CAAhB;;AAaA,SAAUhB,KAAV,SAAmBU,OAAO,CAACO,IAAR,CAAa,IAAb,CAAnB;AACD;AAED,OAAO,IAAMC,iBAA0C,GAAG,CAACzB,KAAD,EAAQ0B,CAAR,EAAWzB,KAAX,KACxDF,aAAa,CAACC,KAAD,EAAQC,KAAR,WAAQA,KAAR,GAAiB,EAAjB,CADR","sourcesContent":["import { Dict, memoizedGet as get, isObject } from \"@chakra-ui/utils\"\nimport { PropConfig } from \"../core\"\n\nconst directionMap = {\n  \"to-t\": \"to top\",\n  \"to-tr\": \"to top right\",\n  \"to-r\": \"to right\",\n  \"to-br\": \"to bottom right\",\n  \"to-b\": \"to bottom\",\n  \"to-bl\": \"to bottom left\",\n  \"to-l\": \"to left\",\n  \"to-tl\": \"to top left\",\n}\n\nconst valueSet = new Set(Object.values(directionMap))\n\nconst globals = [\n  \"none\",\n  \"-moz-initial\",\n  \"inherit\",\n  \"initial\",\n  \"revert\",\n  \"unset\",\n]\n\nconst trimSpace = (str: string) => str.trim()\n\nexport function parseGradient(value: string | null | undefined, theme: Dict) {\n  if (value == null || globals.includes(value)) return value\n\n  const regex = /(?<type>^[a-z-A-Z]+)\\((?<values>(.*))\\)/g\n\n  const { type, values } = regex.exec(value)?.groups ?? {}\n\n  if (!type || !values) return value\n\n  const _type = type.includes(\"-gradient\") ? type : `${type}-gradient`\n\n  const [maybeDirection, ...stops] = values\n    .split(\",\")\n    .map(trimSpace)\n    .filter(Boolean)\n\n  if (stops?.length === 0) return value\n\n  const direction =\n    maybeDirection in directionMap\n      ? directionMap[maybeDirection]\n      : maybeDirection\n\n  stops.unshift(direction)\n\n  const _values = stops.map((stop) => {\n    // if stop is valid shorthand direction, return it\n    if (valueSet.has(stop)) return stop\n    // color stop could be `red.200 20%` based on css gradient spec\n    const [_color, _stop] = stop.split(\" \")\n    // else, get and transform the color token or css value\n    const color = get(theme, `colors.${_color}`, _color)\n    // isObject(...) is an exception for users who use `red` instead of `red.100`\n    const result = isObject(color) ? stop : color\n\n    return _stop ? [result, _stop].join(\" \") : result\n  })\n\n  return `${_type}(${_values.join(\", \")})`\n}\n\nexport const transformGradient: PropConfig[\"transform\"] = (value, _, theme) =>\n  parseGradient(value, theme ?? {})\n"],"file":"parse-gradient.js"}