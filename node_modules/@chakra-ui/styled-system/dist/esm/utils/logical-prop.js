function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { compose, getWithDefault } from "@chakra-ui/utils";
import directional from "./directionality";

/**
 * Polyfill for border-{start|end}-radius properties.
 * We'll remove this once css logical properties is supported in major browsers
 */
function logicalTransform(opts) {
  var {
    transform,
    ltr,
    rtl
  } = opts;

  var rtlTransform = (value, scale, props) => {
    var {
      getLogicalStyle
    } = directional(props);
    var raw = getWithDefault(value, scale);
    return getLogicalStyle({
      rtl,
      ltr,
      value: raw
    });
  };

  return transform ? compose(transform, rtlTransform) : rtlTransform;
}

export function logical(opts) {
  var {
    property,
    scale,
    transform
  } = opts;
  return {
    property: "&",
    scale,
    transform: logicalTransform(_extends({}, property, {
      transform
    }))
  };
}
//# sourceMappingURL=logical-prop.js.map