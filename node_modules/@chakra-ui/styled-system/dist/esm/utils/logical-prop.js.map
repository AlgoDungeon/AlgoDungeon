{"version":3,"sources":["../../../src/utils/logical-prop.ts"],"names":["compose","getWithDefault","directional","logicalTransform","opts","transform","ltr","rtl","rtlTransform","value","scale","props","getLogicalStyle","raw","logical","property"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,cAAlB,QAAwC,kBAAxC;AAGA,OAAOC,WAAP,MAAwB,kBAAxB;;AAUA;AACA;AACA;AACA;AACA,SAASC,gBAAT,CAA6CC,IAA7C,EAA+E;AAC7E,MAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,GAAb;AAAkBC,IAAAA;AAAlB,MAA0BH,IAAhC;;AAEA,MAAMI,YAAqC,GAAG,CAACC,KAAD,EAAQC,KAAR,EAAeC,KAAf,KAAyB;AACrE,QAAM;AAAEC,MAAAA;AAAF,QAAsBV,WAAW,CAACS,KAAD,CAAvC;AACA,QAAME,GAAG,GAAGZ,cAAc,CAACQ,KAAD,EAAQC,KAAR,CAA1B;AACA,WAAOE,eAAe,CAAC;AAAEL,MAAAA,GAAF;AAAOD,MAAAA,GAAP;AAAYG,MAAAA,KAAK,EAAEI;AAAnB,KAAD,CAAtB;AACD,GAJD;;AAMA,SAAOR,SAAS,GAAGL,OAAO,CAACK,SAAD,EAAYG,YAAZ,CAAV,GAAsCA,YAAtD;AACD;;AAQD,OAAO,SAASM,OAAT,CACLV,IADK,EAEO;AACZ,MAAM;AAAEW,IAAAA,QAAF;AAAYL,IAAAA,KAAZ;AAAmBL,IAAAA;AAAnB,MAAiCD,IAAvC;AACA,SAAO;AACLW,IAAAA,QAAQ,EAAE,GADL;AAELL,IAAAA,KAFK;AAGLL,IAAAA,SAAS,EAAEF,gBAAgB,cACtBY,QADsB;AAEzBV,MAAAA;AAFyB;AAHtB,GAAP;AAQD","sourcesContent":["import { compose, getWithDefault } from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { PropConfig } from \"../core\"\nimport directional from \"./directionality\"\n\ntype CSSProp = keyof CSS.Properties\n\ninterface LogicalTransformOptions<T> {\n  ltr: T | T[]\n  rtl: T | T[]\n  transform?: PropConfig[\"transform\"]\n}\n\n/**\n * Polyfill for border-{start|end}-radius properties.\n * We'll remove this once css logical properties is supported in major browsers\n */\nfunction logicalTransform<T extends CSSProp>(opts: LogicalTransformOptions<T>) {\n  const { transform, ltr, rtl } = opts\n\n  const rtlTransform: PropConfig[\"transform\"] = (value, scale, props) => {\n    const { getLogicalStyle } = directional(props)\n    const raw = getWithDefault(value, scale)\n    return getLogicalStyle({ rtl, ltr, value: raw })\n  }\n\n  return transform ? compose(transform, rtlTransform) : rtlTransform\n}\n\ninterface LogicalOptions<T> {\n  scale?: string\n  property: { ltr: T | T[]; rtl: T | T[] }\n  transform?: PropConfig[\"transform\"]\n}\n\nexport function logical<T extends CSSProp>(\n  opts: LogicalOptions<T>,\n): PropConfig {\n  const { property, scale, transform } = opts\n  return {\n    property: \"&\",\n    scale,\n    transform: logicalTransform({\n      ...property,\n      transform,\n    }),\n  }\n}\n"],"file":"logical-prop.js"}