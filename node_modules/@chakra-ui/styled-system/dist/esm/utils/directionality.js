var determineTheme = props => "theme" in props ? props.theme : props;

export function getIsRtl(props) {
  var theme = determineTheme(props);
  return theme.direction === TextDirection.rtl;
}
export var TextDirection;

(function (TextDirection) {
  TextDirection["ltr"] = "ltr";
  TextDirection["rtl"] = "rtl";
})(TextDirection || (TextDirection = {}));

function directionality(options) {
  var theme = determineTheme(options);
  var direction = theme.direction;
  var isRtl = theme.direction === TextDirection.rtl;

  function getLogicalStyle(options) {
    var {
      ltr,
      rtl,
      value
    } = options;
    var result = {};
    var isProperties = Array.isArray(ltr) && Array.isArray(rtl);

    if (isProperties) {
      for (var i = 0; i < ltr.length; i += 1) {
        var key = isRtl ? rtl[i] : ltr[i];
        result[key] = value;
      }
    } else {
      var _key = isRtl ? rtl : ltr;

      result[_key] = value;
    }

    return result;
  }

  function getFourCornerValue(value) {
    var split = toList(value);
    var dontFlip = split.length <= 3 || split.length > 4;
    if (dontFlip) return value;
    var [top, right, bottom, left] = split;
    var flippedValue = [top, left, bottom, right].join(" ");
    return isRtl ? flippedValue : value;
  }

  return {
    getFourCornerValue,
    direction,
    getLogicalStyle
  };
}

function toList(value) {
  return value.replace(/ +/g, " ").split(" ").map(i => i.trim()).filter(Boolean);
}

export default directionality;
//# sourceMappingURL=directionality.js.map