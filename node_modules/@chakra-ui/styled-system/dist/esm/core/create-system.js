import merge from "lodash.mergewith";
import { createParser } from "./create-parser";
import { createStyleFunction } from "./create-style-function";
export function system(configs) {
  var config = {};
  Object.keys(configs).forEach(key => {
    var propConfig = configs[key];

    if (propConfig === true) {
      config[key] = createStyleFunction({
        property: key,
        scale: key
      });
      return;
    }

    if (typeof propConfig === "function") {
      config[key] = propConfig;
      return;
    }

    config[key] = createStyleFunction(propConfig);
  });
  return createParser(config);
}
export function compose() {
  var config = {};

  for (var _len = arguments.length, parsers = new Array(_len), _key = 0; _key < _len; _key++) {
    parsers[_key] = arguments[_key];
  }

  parsers.forEach(parser => {
    if (!parser || !parser.config) return;
    config = merge({}, config, parser.config);
  });
  var parser = createParser(config);
  return parser;
}
//# sourceMappingURL=create-system.js.map