import { memoizedGet as get } from "@chakra-ui/utils";
import merge from "lodash.mergewith";
import { sort } from "../utils";
import { createMediaQuery, parseResponsiveArray, parseResponsiveObject } from "./parse-responsive";
var defaultBreakpoints = [40, 52, 64].map(n => n + "em");
export function createParser(config) {
  var cache = new Map();

  var parse = props => {
    var _props$theme, _props$theme$config;

    var styles = {};
    var shouldSort = false;
    var isCacheDisabled = (_props$theme = props.theme) == null ? void 0 : (_props$theme$config = _props$theme.config) == null ? void 0 : _props$theme$config.disableStyledSystemCache;

    for (var prop in props) {
      var _props$theme2;

      if (!config[prop]) continue;
      var styleFunction = config[prop];
      var value = props[prop];
      var theme = (_props$theme2 = props.theme) != null ? _props$theme2 : {};
      var scale = get(theme, styleFunction.scale, styleFunction.defaults);

      if (typeof value === "object") {
        var bps = !isCacheDisabled && cache.get("breakpoints") || get(theme, "breakpoints", defaultBreakpoints);
        cache.set("breakpoints", bps);

        if (Array.isArray(value)) {
          var _bps = !isCacheDisabled && cache.get("media") || [null, ...cache.get("breakpoints").map(createMediaQuery)];

          cache.set("media", _bps);
          var style = parseResponsiveArray({
            mediaQueries: cache.get("media"),
            styleFunction,
            scale,
            value,
            props
          });
          styles = merge(styles, style);
          continue;
        }

        if (value !== null) {
          var _style = parseResponsiveObject({
            breakpoints: cache.get("breakpoints"),
            styleFunction,
            scale,
            value,
            props
          });

          styles = merge(styles, _style);
          shouldSort = true;
        }

        continue;
      }

      styles = merge({}, styles, styleFunction(value, scale, props));
    } // sort object-based responsive styles


    if (shouldSort) {
      styles = sort(styles);
    }

    return styles;
  };

  parse.config = config;
  parse.propNames = Object.keys(config);
  parse.cache = cache;
  var keys = Object.keys(config).filter(key => key !== "config");

  if (keys.length > 1) {
    keys.forEach(key => {
      parse[key] = createParser({
        [key]: config[key]
      });
    });
  }

  return parse;
}
//# sourceMappingURL=create-parser.js.map