{"version":3,"sources":["../../../src/core/create-system.ts"],"names":["merge","createParser","createStyleFunction","system","configs","config","Object","keys","forEach","key","propConfig","property","scale","compose","parsers","parser"],"mappings":"AACA,OAAOA,KAAP,MAAkB,kBAAlB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AAGA,OAAO,SAASC,MAAT,CAA+CC,OAA/C,EAAmE;AACxE,MAAMC,MAAc,GAAG,EAAvB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,OAAZ,EAAqBI,OAArB,CAA8BC,GAAD,IAAS;AACpC,QAAMC,UAAU,GAAGN,OAAO,CAACK,GAAD,CAA1B;;AAEA,QAAIC,UAAU,KAAK,IAAnB,EAAyB;AACvBL,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAcP,mBAAmB,CAAC;AAChCS,QAAAA,QAAQ,EAAEF,GADsB;AAEhCG,QAAAA,KAAK,EAAEH;AAFyB,OAAD,CAAjC;AAIA;AACD;;AAED,QAAI,OAAOC,UAAP,KAAsB,UAA1B,EAAsC;AACpCL,MAAAA,MAAM,CAACI,GAAD,CAAN,GAAcC,UAAd;AACA;AACD;;AAEDL,IAAAA,MAAM,CAACI,GAAD,CAAN,GAAcP,mBAAmB,CAACQ,UAAD,CAAjC;AACD,GAjBD;AAmBA,SAAOT,YAAY,CAACI,MAAD,CAAnB;AACD;AAED,OAAO,SAASQ,OAAT,GAA+C;AACpD,MAAIR,MAAc,GAAG,EAArB;;AADoD,oCAA3BS,OAA2B;AAA3BA,IAAAA,OAA2B;AAAA;;AAEpDA,EAAAA,OAAO,CAACN,OAAR,CAAiBO,MAAD,IAAY;AAC1B,QAAI,CAACA,MAAD,IAAW,CAACA,MAAM,CAACV,MAAvB,EAA+B;AAC/BA,IAAAA,MAAM,GAAGL,KAAK,CAAC,EAAD,EAAKK,MAAL,EAAaU,MAAM,CAACV,MAApB,CAAd;AACD,GAHD;AAIA,MAAMU,MAAM,GAAGd,YAAY,CAACI,MAAD,CAA3B;AACA,SAAOU,MAAP;AACD","sourcesContent":["import { Properties } from \"csstype\"\nimport merge from \"lodash.mergewith\"\nimport { createParser } from \"./create-parser\"\nimport { createStyleFunction } from \"./create-style-function\"\nimport { Config, Parser, PropConfig } from \"./types\"\n\nexport function system<T extends PropConfig | Config>(configs: T): Parser {\n  const config: Config = {}\n\n  Object.keys(configs).forEach((key) => {\n    const propConfig = configs[key]\n\n    if (propConfig === true) {\n      config[key] = createStyleFunction({\n        property: key as keyof Properties,\n        scale: key,\n      })\n      return\n    }\n\n    if (typeof propConfig === \"function\") {\n      config[key] = propConfig\n      return\n    }\n\n    config[key] = createStyleFunction(propConfig)\n  })\n\n  return createParser(config)\n}\n\nexport function compose(...parsers: Parser[]): Parser {\n  let config: Config = {}\n  parsers.forEach((parser) => {\n    if (!parser || !parser.config) return\n    config = merge({}, config, parser.config)\n  })\n  const parser = createParser(config)\n  return parser\n}\n"],"file":"create-system.js"}