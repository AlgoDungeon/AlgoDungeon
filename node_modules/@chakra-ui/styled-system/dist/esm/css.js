import { isArray, isCustomBreakpoint, isObject, isResponsiveObjectLike, memoizedGet as get, mergeWith, objectToArrayNotation, runIfFn } from "@chakra-ui/utils";
import { parser } from "./parser";
import { pseudoSelectors } from "./pseudo";
var cache = {
  themeBreakpoints: [],
  breakpoints: [],
  breakpointValues: [],
  mediaQueries: []
};

/**
 *
 */
var calculateBreakpointAndMediaQueries = function calculateBreakpointAndMediaQueries(themeBreakpoints) {
  if (themeBreakpoints === void 0) {
    themeBreakpoints = [];
  }

  // caching here reduces execution time by factor 4-6x
  var isCached = cache.themeBreakpoints === themeBreakpoints;

  if (isCached) {
    return cache;
  }

  var {
    breakpoints,
    breakpointValues
  } = Object.entries(themeBreakpoints).filter((_ref) => {
    var [key] = _ref;
    return isCustomBreakpoint(key);
  }).reduce((carry, _ref2) => {
    var [breakpoint, value] = _ref2;
    carry.breakpoints.push(breakpoint);
    carry.breakpointValues.push(value);
    return carry;
  }, {
    breakpoints: [],
    breakpointValues: []
  });
  var mediaQueries = [null, ...breakpointValues.map(bp => "@media screen and (min-width: " + bp + ")").slice(1)];
  cache.themeBreakpoints = themeBreakpoints;
  cache.mediaQueries = mediaQueries;
  cache.breakpointValues = breakpointValues;
  cache.breakpoints = breakpoints;
  return {
    breakpoints,
    mediaQueries
  };
};

var responsive = styles => theme => {
  var computedStyles = {};
  var {
    breakpoints,
    mediaQueries
  } = calculateBreakpointAndMediaQueries(theme.breakpoints);

  for (var key in styles) {
    var value = runIfFn(styles[key], theme);

    if (value == null) {
      continue;
    }

    value = isResponsiveObjectLike(value, breakpoints) ? objectToArrayNotation(value, breakpoints) : value;

    if (!isArray(value)) {
      computedStyles[key] = value;
      continue;
    }

    var queries = value.slice(0, mediaQueries.length).length;

    for (var index = 0; index < queries; index += 1) {
      var media = mediaQueries[index];

      if (!media) {
        computedStyles[key] = value[index];
        continue;
      }

      computedStyles[media] = computedStyles[media] || {};

      if (value[index] == null) {
        continue;
      }

      computedStyles[media][key] = value[index];
    }
  }

  return computedStyles;
};

export var css = function css(args) {
  if (args === void 0) {
    args = {};
  }

  return function (props) {
    if (props === void 0) {
      props = {};
    }

    var theme = "theme" in props ? props.theme : props;
    var computedStyles = {};
    var styleObject = runIfFn(args, theme);
    var styles = responsive(styleObject)(theme);

    for (var k in styles) {
      var _config, _config$transform, _config2, _config3, _config4;

      var x = styles[k];
      var val = runIfFn(x, theme);
      var key = k in pseudoSelectors ? pseudoSelectors[k] : k;
      var config = parser.config[key];

      if (config === true) {
        // shortcut definition
        config = {
          property: key,
          scale: key
        };
      }

      if (key === "apply") {
        var apply = css(get(theme, val))(theme);
        computedStyles = mergeWith({}, computedStyles, apply);
        continue;
      }

      if (isObject(val)) {
        computedStyles[key] = css(val)(theme);
        continue;
      }

      var scale = get(theme, (_config = config) == null ? void 0 : _config.scale, {});
      var value = (_config$transform = (_config2 = config) == null ? void 0 : _config2.transform == null ? void 0 : _config2.transform(val, scale, props)) != null ? _config$transform : get(scale, val, val);

      if ((_config3 = config) != null && _config3.properties) {
        for (var property of config.properties) {
          computedStyles[property] = value;
        }

        continue;
      }

      if ((_config4 = config) != null && _config4.property) {
        /**
         * Used for styled-system configs that map to multiple computed properties.
         * For example, the `borderLeftRadius` computed keys based on rtl/ltr
         */
        if (config.property === "&") {
          computedStyles = mergeWith({}, computedStyles, value);
        } else {
          computedStyles[config.property] = value;
        }

        continue;
      }

      computedStyles[key] = value;
    }

    return computedStyles;
  };
};
//# sourceMappingURL=css.js.map