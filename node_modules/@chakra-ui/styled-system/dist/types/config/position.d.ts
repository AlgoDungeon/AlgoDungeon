import * as CSS from "csstype";
import { Length, ResponsiveValue } from "../utils";
/**
 * Types for position CSS properties
 */
export interface PositionProps {
    /**
     * The CSS `z-index` property
     */
    zIndex?: ResponsiveValue<string | CSS.Property.ZIndex>;
    /**
     * The CSS `top` property
     */
    top?: ResponsiveValue<CSS.Property.Top<Length>>;
    insetBlockStart?: ResponsiveValue<CSS.Property.InsetBlockStart<Length>>;
    /**
     * The CSS `right` property
     */
    right?: ResponsiveValue<CSS.Property.Right<Length>>;
    /**
     * When the direction is `ltr`, `insetInlineEnd` is equivalent to `right`.
     * When the direction is `rtl`, `insetInlineEnd` is equivalent to `left`.
     */
    insetInlineEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>;
    /**
     * When the direction is `ltr`, `insetEnd` is equivalent to `right`.
     * When the direction is `rtl`, `insetEnd` is equivalent to `left`.
     */
    insetEnd?: ResponsiveValue<CSS.Property.InsetInlineEnd<Length>>;
    /**
     * The CSS `bottom` property
     */
    bottom?: ResponsiveValue<CSS.Property.Bottom<Length>>;
    insetBlockEnd?: ResponsiveValue<CSS.Property.InsetBlockEnd<Length>>;
    /**
     * The CSS `left` property
     */
    left?: ResponsiveValue<CSS.Property.Left<Length>>;
    insetInlineStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>;
    /**
     * When the direction is `start`, `end` is equivalent to `left`.
     * When the direction is `start`, `end` is equivalent to `right`.
     */
    insetStart?: ResponsiveValue<CSS.Property.InsetInlineStart<Length>>;
    /**
     * The CSS `left`, `right`, `top`, `bottom` property
     */
    inset?: ResponsiveValue<CSS.Property.Left<Length>>;
    /**
     * The CSS `left`, and `right` property
     */
    insetX?: ResponsiveValue<CSS.Property.Left<Length>>;
    /**
     * The CSS `top`, and `bottom` property
     */
    insetY?: ResponsiveValue<CSS.Property.Left<Length>>;
    /**
     * The CSS `position` property
     */
    pos?: ResponsiveValue<CSS.Property.Position>;
    /**
     * The CSS `position` property
     */
    position?: ResponsiveValue<CSS.Property.Position>;
    insetInline?: ResponsiveValue<CSS.Property.InsetInline>;
    insetBlock?: ResponsiveValue<CSS.Property.InsetBlock>;
}
export declare const position: import("../core").Parser;
export declare const positionParser: {
    (props: Record<string, any>): Record<string, any>;
    config: import("../core").PropConfig;
    propNames: string[];
    cache: Map<string, any>;
};
