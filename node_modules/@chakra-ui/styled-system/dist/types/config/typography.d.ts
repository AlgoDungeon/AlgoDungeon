import * as CSS from "csstype";
import { ResponsiveValue, Length } from "../utils";
/**
 * Types for typography related CSS properties
 */
export interface TypographyProps {
    /**
     * The CSS `font-weight` property
     */
    fontWeight?: ResponsiveValue<string | number>;
    /**
     * The CSS `line-height` property
     */
    lineHeight?: ResponsiveValue<CSS.Property.LineHeight<Length>>;
    /**
     * The CSS `letter-spacing` property
     */
    letterSpacing?: ResponsiveValue<CSS.Property.LetterSpacing<Length>>;
    /**
     * The CSS `font-size` property
     */
    fontSize?: ResponsiveValue<CSS.Property.FontSize<Length>>;
    /**
     * The CSS `font-family` property
     */
    fontFamily?: ResponsiveValue<CSS.Property.FontFamily>;
    /**
     * The CSS `text-align` property
     */
    textAlign?: ResponsiveValue<CSS.Property.TextAlign>;
    /**
     * The CSS `font-style` property
     */
    fontStyle?: ResponsiveValue<CSS.Property.FontStyle>;
    /**
     * The CSS `word-break` property
     */
    wordBreak?: ResponsiveValue<CSS.Property.WordBreak>;
    /**
     * The CSS `overflow-wrap` property
     */
    overflowWrap?: ResponsiveValue<CSS.Property.OverflowWrap>;
    /**
     * The CSS `text-overflow` property
     */
    textOverflow?: ResponsiveValue<CSS.Property.TextOverflow>;
    /**
     * The CSS `text-transform` property
     */
    textTransform?: ResponsiveValue<CSS.Property.TextTransform>;
    /**
     * The CSS `white-space` property
     */
    whiteSpace?: ResponsiveValue<CSS.Property.WhiteSpace>;
    /**
     * The CSS `text-decoration` property
     */
    textDecoration?: ResponsiveValue<CSS.Property.TextDecoration<Length>>;
    /**
     * The CSS `text-decoration` property
     */
    textDecor?: ResponsiveValue<CSS.Property.TextDecoration<Length>>;
}
export declare const typography: import("../core").Parser;
export declare const typographyParser: {
    (props: Record<string, any>): Record<string, any>;
    config: import("../core").PropConfig;
    propNames: string[];
    cache: Map<string, any>;
};
