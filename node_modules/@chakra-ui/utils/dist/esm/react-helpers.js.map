{"version":3,"sources":["../../src/react-helpers.ts"],"names":["React","isFunction","createContext","options","strict","errorMessage","name","Context","undefined","displayName","useContext","context","Error","Provider","getValidChildren","children","Children","toArray","filter","child","isValidElement","assignRef","ref","value","current","error","mergeRefs","refs","forEach"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,aAA3B;;AAoBA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAoCC,OAApC,EAAwE;AAAA,MAApCA,OAAoC;AAApCA,IAAAA,OAAoC,GAAJ,EAAI;AAAA;;AAC7E,MAAM;AACJC,IAAAA,MAAM,GAAG,IADL;AAEJC,IAAAA,YAAY,GAAG,4FAFX;AAGJC,IAAAA;AAHI,MAIFH,OAJJ;AAMA,MAAMI,OAAO,gBAAGP,KAAK,CAACE,aAAN,CAA6CM,SAA7C,CAAhB;AAEAD,EAAAA,OAAO,CAACE,WAAR,GAAsBH,IAAtB;;AAEA,WAASI,UAAT,GAAsB;AACpB,QAAMC,OAAO,GAAGX,KAAK,CAACU,UAAN,CAAiBH,OAAjB,CAAhB;;AAEA,QAAI,CAACI,OAAD,IAAYP,MAAhB,EAAwB;AACtB,YAAM,IAAIQ,KAAJ,CAAUP,YAAV,CAAN;AACD;;AAED,WAAOM,OAAP;AACD;;AAED,SAAO,CACLJ,OAAO,CAACM,QADH,EAELH,UAFK,EAGLH,OAHK,CAAP;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASO,gBAAT,CAA0BC,QAA1B,EAAqD;AAC1D,SAAOf,KAAK,CAACgB,QAAN,CAAeC,OAAf,CAAuBF,QAAvB,EAAiCG,MAAjC,CAAyCC,KAAD,iBAC7CnB,KAAK,CAACoB,cAAN,CAAqBD,KAArB,CADK,CAAP;AAGD;;AAID;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,SAAT,CAA4BC,GAA5B,EAA0DC,KAA1D,EAAoE;AACzE,MAAID,GAAG,IAAI,IAAX,EAAiB;;AAEjB,MAAIrB,UAAU,CAACqB,GAAD,CAAd,EAAqB;AACnBA,IAAAA,GAAG,CAACC,KAAD,CAAH;AACA;AACD;;AAED,MAAI;AACF;AACAD,IAAAA,GAAG,CAACE,OAAJ,GAAcD,KAAd;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,UAAM,IAAIb,KAAJ,2BAAkCW,KAAlC,kBAAoDD,GAApD,OAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,SAAT,GAA4D;AAAA,oCAAnCC,IAAmC;AAAnCA,IAAAA,IAAmC;AAAA;;AACjE,SAAQJ,KAAD,IAAc;AACnBI,IAAAA,IAAI,CAACC,OAAL,CAAcN,GAAD,IAASD,SAAS,CAACC,GAAD,EAAMC,KAAN,CAA/B;AACD,GAFD;AAGD","sourcesContent":["import * as React from \"react\"\nimport { isFunction } from \"./assertion\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      throw new Error(errorMessage)\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n\n/**\n * Gets only the valid children of a component,\n * and ignores any nullish or falsy child.\n *\n * @param children the children\n */\nexport function getValidChildren(children: React.ReactNode) {\n  return React.Children.toArray(children).filter((child) =>\n    React.isValidElement(child),\n  ) as React.ReactElement[]\n}\n\ntype ReactRef<T> = React.Ref<T> | React.RefObject<T> | React.MutableRefObject<T>\n\n/**\n * Assigns a value to a ref function or object\n *\n * @param ref the ref to assign to\n * @param value the value\n */\nexport function assignRef<T = any>(ref: ReactRef<T> | undefined, value: T) {\n  if (ref == null) return\n\n  if (isFunction(ref)) {\n    ref(value)\n    return\n  }\n\n  try {\n    // @ts-ignore\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\n/**\n * Combine multiple React refs into a single ref function.\n * This is used mostly when you need to allow consumers forward refs to\n * internal components\n *\n * @param refs refs to assign to value to\n */\nexport function mergeRefs<T>(...refs: (ReactRef<T> | undefined)[]) {\n  return (value: T) => {\n    refs.forEach((ref) => assignRef(ref, value))\n  }\n}\n"],"file":"react-helpers.js"}