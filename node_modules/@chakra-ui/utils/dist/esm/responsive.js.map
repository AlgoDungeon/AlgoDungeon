{"version":3,"sources":["../../src/responsive.ts"],"names":["isArray","isObject","objectKeys","getLastItem","breakpoints","Object","freeze","mapResponsive","prop","mapper","map","item","reduce","result","key","objectToArrayNotation","obj","bps","br","pop","arrayToObjectNotation","values","forEach","value","index","isResponsiveObjectLike","keys","length","every","includes"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC;AAEA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAO,IAAMC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,CAAd,CAApB;AAEP,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAAkCC,MAAlC,EAA6D;AAClE,MAAIT,OAAO,CAACQ,IAAD,CAAX,EAAmB;AACjB,WAAOA,IAAI,CAACE,GAAL,CAAUC,IAAD,IAAU;AACxB,UAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAP;AACD;;AACD,aAAOF,MAAM,CAACE,IAAD,CAAb;AACD,KALM,CAAP;AAMD;;AAED,MAAIV,QAAQ,CAACO,IAAD,CAAZ,EAAoB;AAClB,WAAON,UAAU,CAACM,IAAD,CAAV,CAAiBI,MAAjB,CAAwB,CAACC,MAAD,EAAeC,GAAf,KAAuB;AACpDD,MAAAA,MAAM,CAACC,GAAD,CAAN,GAAcL,MAAM,CAACD,IAAI,CAACM,GAAD,CAAL,CAApB;AACA,aAAOD,MAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAED,MAAIL,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAOC,MAAM,CAACD,IAAD,CAAb;AACD;;AAED,SAAO,IAAP;AACD;AAED,OAAO,SAASO,qBAAT,CAA+BC,GAA/B,EAA0CC,GAA1C,EAA6D;AAAA,MAAnBA,GAAmB;AAAnBA,IAAAA,GAAmB,GAAbb,WAAa;AAAA;;AAClE,MAAMS,MAAM,GAAGI,GAAG,CAACP,GAAJ,CAASQ,EAAD;AAAA;;AAAA,sBAAQF,GAAG,CAACE,EAAD,CAAX,sBAAmB,IAAnB;AAAA,GAAR,CAAf;;AACA,SAAOf,WAAW,CAACU,MAAD,CAAX,KAAwB,IAA/B,EAAqC;AACnCA,IAAAA,MAAM,CAACM,GAAP;AACD;;AACD,SAAON,MAAP;AACD;AAED,OAAO,SAASO,qBAAT,CAA+BC,MAA/B,EAA8CJ,GAA9C,EAAiE;AAAA,MAAnBA,GAAmB;AAAnBA,IAAAA,GAAmB,GAAbb,WAAa;AAAA;;AACtE,MAAMS,MAAM,GAAG,EAAf;AACAQ,EAAAA,MAAM,CAACC,OAAP,CAAe,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/B,QAAMV,GAAG,GAAGG,GAAG,CAACO,KAAD,CAAf;AACA,QAAID,KAAK,IAAI,IAAb,EAAmB;AACnBV,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcS,KAAd;AACD,GAJD;AAKA,SAAOV,MAAP;AACD;AAED,OAAO,SAASY,sBAAT,CAAgCT,GAAhC,EAA2CC,GAA3C,EAA8D;AAAA,MAAnBA,GAAmB;AAAnBA,IAAAA,GAAmB,GAAbb,WAAa;AAAA;;AACnE,MAAMsB,IAAI,GAAGrB,MAAM,CAACqB,IAAP,CAAYV,GAAZ,CAAb;AACA,SAAOU,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAACE,KAAL,CAAYd,GAAD,IAASG,GAAG,CAACY,QAAJ,CAAaf,GAAb,CAApB,CAA1B;AACD","sourcesContent":["import { isArray, isObject } from \"./assertion\"\nimport { Dict } from \"./types\"\nimport { objectKeys } from \"./object\"\nimport { getLastItem } from \"./array\"\n\nexport const breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"])\n\nexport function mapResponsive(prop: any, mapper: (val: any) => any) {\n  if (isArray(prop)) {\n    return prop.map((item) => {\n      if (item === null) {\n        return null\n      }\n      return mapper(item)\n    })\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result: Dict, key) => {\n      result[key] = mapper(prop[key])\n      return result\n    }, {})\n  }\n\n  if (prop != null) {\n    return mapper(prop)\n  }\n\n  return null\n}\n\nexport function objectToArrayNotation(obj: Dict, bps = breakpoints) {\n  const result = bps.map((br) => obj[br] ?? null)\n  while (getLastItem(result) === null) {\n    result.pop()\n  }\n  return result\n}\n\nexport function arrayToObjectNotation(values: any[], bps = breakpoints) {\n  const result = {} as Dict\n  values.forEach((value, index) => {\n    const key = bps[index]\n    if (value == null) return\n    result[key] = value\n  })\n  return result\n}\n\nexport function isResponsiveObjectLike(obj: Dict, bps = breakpoints) {\n  const keys = Object.keys(obj)\n  return keys.length > 0 && keys.every((key) => bps.includes(key))\n}\n"],"file":"responsive.js"}