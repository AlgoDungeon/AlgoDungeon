{"version":3,"sources":["../../src/assertion.ts"],"names":["isNumber","value","isNotNumber","Number","isNaN","isFinite","isNumeric","parseFloat","isArray","Array","isEmptyArray","length","isFunction","isDefined","undefined","isUndefined","isObject","type","isEmptyObject","Object","keys","isNotEmptyObject","isNull","isString","prototype","toString","call","isInputEvent","target","isEmpty","__DEV__","process","env","NODE_ENV"],"mappings":"AAGA;AACA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAA+C;AACpD,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;AAED,OAAO,IAAMC,WAAW,GAAID,KAAD,IACzB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BE,MAAM,CAACC,KAAP,CAAaH,KAAb,CAA7B,IAAoD,CAACE,MAAM,CAACE,QAAP,CAAgBJ,KAAhB,CADhD;AAGP,OAAO,SAASK,SAAT,CAAmBL,KAAnB,EAA+B;AACpC,SAAOA,KAAK,IAAI,IAAT,IAAiBA,KAAK,GAAGM,UAAU,CAACN,KAAD,CAAlB,GAA4B,CAA5B,IAAiC,CAAzD;AACD,C,CAED;;AACA,OAAO,SAASO,OAAT,CAAoBP,KAApB,EAAmD;AACxD,SAAOQ,KAAK,CAACD,OAAN,CAAcP,KAAd,CAAP;AACD;AAED,OAAO,IAAMS,YAAY,GAAIT,KAAD,IAAgBO,OAAO,CAACP,KAAD,CAAP,IAAkBA,KAAK,CAACU,MAAN,KAAiB,CAAxE,C,CAEP;;AACA,OAAO,SAASC,UAAT,CAAoBX,KAApB,EAAmD;AACxD,SAAO,OAAOA,KAAP,KAAiB,UAAxB;AACD,C,CAED;;AACA,OAAO,IAAMY,SAAS,GAAIZ,KAAD,IACvB,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAKa,SADrC;AAGP,OAAO,IAAMC,WAAW,GAAId,KAAD,IACzB,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAKa,SADrC,C,CAGP;;AACA,OAAO,IAAME,QAAQ,GAAIf,KAAD,IAA+B;AACrD,MAAMgB,IAAI,GAAG,OAAOhB,KAApB;AACA,SACEA,KAAK,IAAI,IAAT,KACCgB,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,UAD/B,KAEA,CAACT,OAAO,CAACP,KAAD,CAHV;AAKD,CAPM;AASP,OAAO,IAAMiB,aAAa,GAAIjB,KAAD,IAC3Be,QAAQ,CAACf,KAAD,CAAR,IAAmBkB,MAAM,CAACC,IAAP,CAAYnB,KAAZ,EAAmBU,MAAnB,KAA8B,CAD5C;AAGP,OAAO,SAASU,gBAAT,CAA0BpB,KAA1B,EAAuD;AAC5D,SAAOA,KAAK,IAAI,CAACiB,aAAa,CAACjB,KAAD,CAA9B;AACD;AAED,OAAO,IAAMqB,MAAM,GAAIrB,KAAD,IAA+BA,KAAK,IAAI,IAAvD,C,CAEP;;AACA,OAAO,SAASsB,QAAT,CAAkBtB,KAAlB,EAA+C;AACpD,SAAOkB,MAAM,CAACK,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BzB,KAA/B,MAA0C,iBAAjD;AACD,C,CAED;;AACA,OAAO,SAAS0B,YAAT,CAAsB1B,KAAtB,EAAwD;AAC7D,SAAOA,KAAK,IAAIe,QAAQ,CAACf,KAAD,CAAjB,IAA4Be,QAAQ,CAACf,KAAK,CAAC2B,MAAP,CAA3C;AACD,C,CAED;;AACA,OAAO,IAAMC,OAAO,GAAI5B,KAAD,IAAgB;AACrC,MAAIO,OAAO,CAACP,KAAD,CAAX,EAAoB,OAAOS,YAAY,CAACT,KAAD,CAAnB;AACpB,MAAIe,QAAQ,CAACf,KAAD,CAAZ,EAAqB,OAAOiB,aAAa,CAACjB,KAAD,CAApB;AACrB,MAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,EAA/B,EAAmC,OAAO,IAAP;AACnC,SAAO,KAAP;AACD,CALM,C,CAOP;;AACA,OAAO,IAAM6B,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzC","sourcesContent":["import { ChangeEvent } from \"react\"\nimport { Dict } from \"./types\"\n\n// Number assertions\nexport function isNumber(value: any): value is number {\n  return typeof value === \"number\"\n}\n\nexport const isNotNumber = (value: any) =>\n  typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value)\n\nexport function isNumeric(value: any) {\n  return value != null && value - parseFloat(value) + 1 >= 0\n}\n\n// Array assertions\nexport function isArray<T>(value: any): value is Array<T> {\n  return Array.isArray(value)\n}\n\nexport const isEmptyArray = (value: any) => isArray(value) && value.length === 0\n\n// Function assertions\nexport function isFunction(value: any): value is Function {\n  return typeof value === \"function\"\n}\n\n// Generic assertions\nexport const isDefined = (value: any) =>\n  typeof value !== \"undefined\" && value !== undefined\n\nexport const isUndefined = (value: any): value is undefined =>\n  typeof value === \"undefined\" || value === undefined\n\n// Object assertions\nexport const isObject = (value: any): value is Dict => {\n  const type = typeof value\n  return (\n    value != null &&\n    (type === \"object\" || type === \"function\") &&\n    !isArray(value)\n  )\n}\n\nexport const isEmptyObject = (value: any) =>\n  isObject(value) && Object.keys(value).length === 0\n\nexport function isNotEmptyObject(value: any): value is object {\n  return value && !isEmptyObject(value)\n}\n\nexport const isNull = (value: any): value is null => value == null\n\n// String assertions\nexport function isString(value: any): value is string {\n  return Object.prototype.toString.call(value) === \"[object String]\"\n}\n\n// Event assertions\nexport function isInputEvent(value: any): value is ChangeEvent {\n  return value && isObject(value) && isObject(value.target)\n}\n\n// Empty assertions\nexport const isEmpty = (value: any) => {\n  if (isArray(value)) return isEmptyArray(value)\n  if (isObject(value)) return isEmptyObject(value)\n  if (value == null || value === \"\") return true\n  return false\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const __DEV__ = process.env.NODE_ENV !== \"production\"\n"],"file":"assertion.js"}