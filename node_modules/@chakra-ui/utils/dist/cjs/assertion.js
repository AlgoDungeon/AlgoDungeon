"use strict";

exports.__esModule = true;
exports.isNumber = isNumber;
exports.isNumeric = isNumeric;
exports.isArray = isArray;
exports.isFunction = isFunction;
exports.isNotEmptyObject = isNotEmptyObject;
exports.isString = isString;
exports.isInputEvent = isInputEvent;
exports.__DEV__ = exports.isEmpty = exports.isNull = exports.isEmptyObject = exports.isObject = exports.isUndefined = exports.isDefined = exports.isEmptyArray = exports.isNotNumber = void 0;

// Number assertions
function isNumber(value) {
  return typeof value === "number";
}

var isNotNumber = function isNotNumber(value) {
  return typeof value !== "number" || Number.isNaN(value) || !Number.isFinite(value);
};

exports.isNotNumber = isNotNumber;

function isNumeric(value) {
  return value != null && value - parseFloat(value) + 1 >= 0;
} // Array assertions


function isArray(value) {
  return Array.isArray(value);
}

var isEmptyArray = function isEmptyArray(value) {
  return isArray(value) && value.length === 0;
}; // Function assertions


exports.isEmptyArray = isEmptyArray;

function isFunction(value) {
  return typeof value === "function";
} // Generic assertions


var isDefined = function isDefined(value) {
  return typeof value !== "undefined" && value !== undefined;
};

exports.isDefined = isDefined;

var isUndefined = function isUndefined(value) {
  return typeof value === "undefined" || value === undefined;
}; // Object assertions


exports.isUndefined = isUndefined;

var isObject = function isObject(value) {
  var type = typeof value;
  return value != null && (type === "object" || type === "function") && !isArray(value);
};

exports.isObject = isObject;

var isEmptyObject = function isEmptyObject(value) {
  return isObject(value) && Object.keys(value).length === 0;
};

exports.isEmptyObject = isEmptyObject;

function isNotEmptyObject(value) {
  return value && !isEmptyObject(value);
}

var isNull = function isNull(value) {
  return value == null;
}; // String assertions


exports.isNull = isNull;

function isString(value) {
  return Object.prototype.toString.call(value) === "[object String]";
} // Event assertions


function isInputEvent(value) {
  return value && isObject(value) && isObject(value.target);
} // Empty assertions


var isEmpty = function isEmpty(value) {
  if (isArray(value)) return isEmptyArray(value);
  if (isObject(value)) return isEmptyObject(value);
  if (value == null || value === "") return true;
  return false;
}; // eslint-disable-next-line @typescript-eslint/naming-convention


exports.isEmpty = isEmpty;

var __DEV__ = process.env.NODE_ENV !== "production";

exports.__DEV__ = __DEV__;
//# sourceMappingURL=assertion.js.map