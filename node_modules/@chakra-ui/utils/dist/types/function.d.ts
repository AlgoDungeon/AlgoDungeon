import { AnyFunction, FunctionArguments } from "./types";
export declare function runIfFn<T, U>(valueOrFn: T | ((...fnArgs: U[]) => T), ...args: U[]): T;
export declare function callAllHandlers<T extends (event: any) => void>(...fns: (T | undefined)[]): (event: FunctionArguments<T>[0]) => void;
export declare function callAll<T extends AnyFunction>(...fns: (T | undefined)[]): (arg: FunctionArguments<T>[0]) => void;
export declare const compose: <T>(fn1: (...args: T[]) => T, ...fns: ((...args: T[]) => T)[]) => (...args: T[]) => T;
export declare function once(fn?: Function | null): (this: any, ...args: any[]) => any;
export declare const noop: () => void;
export declare const warn: (this: any, ...args: any[]) => any;
export declare const error: (this: any, ...args: any[]) => any;
