{"version":3,"sources":["../../src/radio-group.tsx"],"names":["chakra","forwardRef","createContext","cx","__DEV__","React","useRadioGroup","RadioGroupProvider","useRadioGroupContext","name","strict","RadioGroup","props","ref","colorScheme","size","variant","children","className","rest","value","onChange","getRootProps","htmlProps","group","useMemo","groupProps","_className","displayName"],"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,aAAT,EAAwBC,EAAxB,EAA4BC,OAA5B,QAA2C,kBAA3C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAIO,mBAJP;AAUA,IAAM,CAACC,kBAAD,EAAqBC,oBAArB,IAA6CN,aAAa,CAE9D;AACAO,EAAAA,IAAI,EAAE,mBADN;AAEAC,EAAAA,MAAM,EAAE;AAFR,CAF8D,CAAhE;AAOA,SAASF,oBAAT;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMG,UAAU,gBAAGV,UAAU,CAAyB,CAACW,KAAD,EAAQC,GAAR,KAAgB;AAC3E,MAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,IAAf;AAAqBC,IAAAA,OAArB;AAA8BC,IAAAA,QAA9B;AAAwCC,IAAAA;AAAxC,MAA+DN,KAArE;AAAA,MAA4DO,IAA5D,iCAAqEP,KAArE;;AAEA,MAAM;AAAEQ,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmBC,IAAAA,YAAnB;AAAiCb,IAAAA,IAAjC;AAAuCc,IAAAA;AAAvC,MAAqDjB,aAAa,CAACa,IAAD,CAAxE;AAEA,MAAMK,KAAK,GAAGnB,KAAK,CAACoB,OAAN,CACZ,OAAO;AACLhB,IAAAA,IADK;AAELM,IAAAA,IAFK;AAGLM,IAAAA,QAHK;AAILP,IAAAA,WAJK;AAKLM,IAAAA,KALK;AAMLJ,IAAAA;AANK,GAAP,CADY,EASZ,CAACD,IAAD,EAAON,IAAP,EAAaY,QAAb,EAAuBP,WAAvB,EAAoCM,KAApC,EAA2CJ,OAA3C,CATY,CAAd;AAYA,MAAMU,UAAU,GAAGJ,YAAY,CAACC,SAAD,EAAYV,GAAZ,CAA/B;;AACA,MAAMc,UAAU,GAAGxB,EAAE,CAAC,oBAAD,EAAuBe,SAAvB,CAArB;;AAEA,sBACE,oBAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEM;AAA3B,kBACE,oBAAC,MAAD,CAAQ,GAAR,eAAgBE,UAAhB;AAA4B,IAAA,SAAS,EAAEC;AAAvC,MACGV,QADH,CADF,CADF;AAOD,CA3BmC,CAA7B;;AA6BP,IAAIb,OAAJ,EAAa;AACXO,EAAAA,UAAU,CAACiB,WAAX,GAAyB,YAAzB;AACD","sourcesContent":["import {\n  chakra,\n  forwardRef,\n  ThemingProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  useRadioGroup,\n  UseRadioGroupProps,\n  UseRadioGroupReturn,\n} from \"./use-radio-group\"\n\nexport interface RadioGroupContext\n  extends Pick<UseRadioGroupReturn, \"onChange\" | \"value\" | \"name\">,\n    Omit<ThemingProps, \"orientation\"> {}\n\nconst [RadioGroupProvider, useRadioGroupContext] = createContext<\n  RadioGroupContext\n>({\n  name: \"RadioGroupContext\",\n  strict: false,\n})\n\nexport { useRadioGroupContext }\n\ntype Omitted =\n  | \"onChange\"\n  | \"value\"\n  | \"defaultValue\"\n  | \"defaultChecked\"\n  | \"children\"\nexport interface RadioGroupProps\n  extends UseRadioGroupProps,\n    Omit<HTMLChakraProps<\"div\">, Omitted>,\n    Omit<ThemingProps, \"orientation\"> {\n  children: React.ReactNode\n}\n\n/**\n * Used for multiple radios which are bound in one group,\n * and it indicates which option is selected.\n *\n * @see Docs https://chakra-ui.com/docs/form/radio\n */\nexport const RadioGroup = forwardRef<RadioGroupProps, \"div\">((props, ref) => {\n  const { colorScheme, size, variant, children, className, ...rest } = props\n\n  const { value, onChange, getRootProps, name, htmlProps } = useRadioGroup(rest)\n\n  const group = React.useMemo(\n    () => ({\n      name,\n      size,\n      onChange,\n      colorScheme,\n      value,\n      variant,\n    }),\n    [size, name, onChange, colorScheme, value, variant],\n  )\n\n  const groupProps = getRootProps(htmlProps, ref)\n  const _className = cx(\"chakra-radio-group\", className)\n\n  return (\n    <RadioGroupProvider value={group}>\n      <chakra.div {...groupProps} className={_className}>\n        {children}\n      </chakra.div>\n    </RadioGroupProvider>\n  )\n})\n\nif (__DEV__) {\n  RadioGroup.displayName = \"RadioGroup\"\n}\n"],"file":"radio-group.js"}