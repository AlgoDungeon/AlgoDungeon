{"version":3,"sources":["../../src/use-radio-group.ts"],"names":["useControllableProp","useId","isInputEvent","mergeRefs","useCallback","useRef","useState","useRadioGroup","props","onChange","onChangeProp","value","valueProp","defaultValue","name","nameProp","isNative","htmlProps","valueState","setValue","isControlled","ref","focus","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","fallbackName","undefined","eventOrValue","nextValue","target","getRootProps","forwardedRef","role","getRadioProps","checkedKey"],"mappings":"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","sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport {\n  isInputEvent,\n  mergeRefs,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport {\n  ChangeEvent,\n  useCallback,\n  useRef,\n  useState,\n  InputHTMLAttributes,\n} from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: StringOrNumber): void\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<StringOrNumber>(defaultValue || \"\")\n\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(nextValue)\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = (props = {}, forwardedRef = null) => ({\n    ...props,\n    ref: mergeRefs(forwardedRef, ref),\n    role: \"radiogroup\",\n  })\n\n  type RadioPropGetter = PropGetter<\n    HTMLInputElement,\n    { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n      InputHTMLAttributes<HTMLInputElement>,\n      \"onChange\" | \"size\" | \"value\"\n    >\n  >\n\n  const getRadioProps: RadioPropGetter = (props = {}, ref = null) => {\n    const checkedKey = isNative ? \"checked\" : \"isChecked\"\n    return {\n      ...props,\n      ref,\n      name,\n      [checkedKey]: props.value === value,\n      onChange,\n    }\n  }\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"file":"use-radio-group.js"}