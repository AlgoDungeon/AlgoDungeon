{"version":3,"sources":["../../src/use-breakpoint.ts"],"names":["useTheme","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","mediaQueries","useMemo","base","currentBreakpoint","setCurrentBreakpoint","useState","undefined","mediaQuery","find","breakpoint","current","update","useCallback","query","matches","useEffect","listeners","Set","forEach","window","matchMedia","handleChange","addListener","add","removeListener","clear"],"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAT,CAAuBC,iBAAvB,EAAmD;AACxD,MAAM;AAAEC,IAAAA;AAAF,MAAkBL,QAAQ,EAAhC;AAEA,MAAMM,YAAY,GAAGL,KAAK,CAACM,OAAN,CACnB,MAAML,kBAAkB;AAAGM,IAAAA,IAAI,EAAE;AAAT,KAAmBH,WAAnB,EADL,EAEnB,CAACA,WAAD,CAFmB,CAArB;AAKA,MAAM,CAACI,iBAAD,EAAoBC,oBAApB,IAA4CT,KAAK,CAACU,QAAN,CAAe,MAAM;AACrE,QAAI,CAACP,iBAAL,EAAwB;AACtB,aAAOQ,SAAP;AACD;;AAED,QAAMC,UAAU,GAAGP,YAAY,CAACQ,IAAb,CACjB;AAAA,UAAC;AAAEC,QAAAA;AAAF,OAAD;AAAA,aAAoBA,UAAU,KAAKX,iBAAnC;AAAA,KADiB,CAAnB;;AAIA,QAAIS,UAAJ,EAAgB;AACd,UAAkBE,UAAlB,iCAAiCF,UAAjC;;AACA,aAAOE,UAAP;AACD;;AAED,WAAOH,SAAP;AACD,GAfiD,CAAlD;AAiBA,MAAMI,OAAO,GAAGP,iBAAH,oBAAGA,iBAAiB,CAAEM,UAAnC;AAEA,MAAME,MAAM,GAAGhB,KAAK,CAACiB,WAAN,CACb,CAACC,KAAD,EAAwBJ,UAAxB,KAAmD;AACjD,QAAII,KAAK,CAACC,OAAN,IAAiBJ,OAAO,KAAKD,UAAU,CAACA,UAA5C,EAAwD;AACtDL,MAAAA,oBAAoB,CAACK,UAAD,CAApB;AACD;AACF,GALY,EAMb,CAACC,OAAD,CANa,CAAf;AASAf,EAAAA,KAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,QAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AAEAjB,IAAAA,YAAY,CAACkB,OAAb,CAAqB,WAA8B;AAAA,UAA7B;AAAEL,QAAAA;AAAF,OAA6B;AAAA,UAAjBJ,UAAiB;;AACjD,UAAMF,UAAU,GAAGY,MAAM,CAACC,UAAP,CAAkBP,KAAlB,CAAnB,CADiD,CAGjD;;AACAF,MAAAA,MAAM,CAACJ,UAAD,EAAaE,UAAb,CAAN;;AAEA,UAAMY,YAAY,GAAG,MAAM;AACzBV,QAAAA,MAAM,CAACJ,UAAD,EAAaE,UAAb,CAAN;AACD,OAFD,CANiD,CAUjD;;;AACAF,MAAAA,UAAU,CAACe,WAAX,CAAuBD,YAAvB,EAXiD,CAajD;AACA;;AACAL,MAAAA,SAAS,CAACO,GAAV,CAAc;AAAEhB,QAAAA,UAAF;AAAcc,QAAAA;AAAd,OAAd;AAEA,aAAO,MAAM;AACX;AACAd,QAAAA,UAAU,CAACiB,cAAX,CAA0BH,YAA1B;AACD,OAHD;AAID,KArBD;AAuBA,WAAO,MAAM;AACX;AACAL,MAAAA,SAAS,CAACE,OAAV,CAAkB,WAAkC;AAAA,YAAjC;AAAEX,UAAAA,UAAF;AAAcc,UAAAA;AAAd,SAAiC;AAClDd,QAAAA,UAAU,CAACiB,cAAX,CAA0BH,YAA1B;AACD,OAFD;AAGAL,MAAAA,SAAS,CAACS,KAAV;AACD,KAND;AAOD,GAjCD,EAiCG,CAACzB,YAAD,EAAeD,WAAf,EAA4BY,MAA5B,CAjCH;AAmCA,SAAOD,OAAP;AACD","sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update])\n\n  return current\n}\n"],"file":"use-breakpoint.js"}