{"version":3,"sources":["../../src/use-media-query.ts"],"names":["useSafeLayoutEffect","isBrowser","React","useLayoutEffect","useEffect","useMediaQuery","query","queries","Array","isArray","isSupported","window","useState","map","matchMedia","matches","setMatches","undefined","mediaQueryList","listenerList","mediaQuery","index","listener","prev","prevValue","idx","addListener","forEach","removeListener"],"mappings":";;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,mBAAmB,GAAGC,mBAAYC,KAAK,CAACC,eAAlB,GAAoCD,KAAK,CAACE,SAAtE;AAEA;AACA;AACA;AACA;AACA;;AACO,SAASC,aAAT,CAAuBC,KAAvB,EAA4D;AACjE,MAAMC,OAAO,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;AACA,MAAMI,WAAW,GAAGT,oBAAa,gBAAgBU,MAAjD;;AAFiE,wBAInCT,KAAK,CAACU,QAAN,CAC5BL,OAAO,CAACM,GAAR,CAAY,UAACP,KAAD;AAAA,WACVI,WAAW,GAAG,CAAC,CAACC,MAAM,CAACG,UAAP,CAAkBR,KAAlB,EAAyBS,OAA9B,GAAwC,KADzC;AAAA,GAAZ,CAD4B,CAJmC;AAAA,MAI1DA,OAJ0D;AAAA,MAIjDC,UAJiD;;AAUjEhB,EAAAA,mBAAmB,CAAC,YAAM;AACxB,QAAI,CAACU,WAAL,EAAkB,OAAOO,SAAP;AAElB,QAAMC,cAAc,GAAGX,OAAO,CAACM,GAAR,CAAY,UAACP,KAAD;AAAA,aAAWK,MAAM,CAACG,UAAP,CAAkBR,KAAlB,CAAX;AAAA,KAAZ,CAAvB;AAEA,QAAMa,YAAY,GAAGD,cAAc,CAACL,GAAf,CAAmB,UAACO,UAAD,EAAaC,KAAb,EAAuB;AAC7D,UAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,eACfN,UAAU,CAAC,UAACO,IAAD;AAAA,iBACTA,IAAI,CAACV,GAAL,CAAS,UAACW,SAAD,EAAYC,GAAZ;AAAA,mBACPJ,KAAK,KAAKI,GAAV,GAAgB,CAAC,CAACL,UAAU,CAACL,OAA7B,GAAuCS,SADhC;AAAA,WAAT,CADS;AAAA,SAAD,CADK;AAAA,OAAjB;;AAOAJ,MAAAA,UAAU,CAACM,WAAX,CAAuBJ,QAAvB;AAEA,aAAOA,QAAP;AACD,KAXoB,CAArB;AAaA,WAAO,YAAM;AACXJ,MAAAA,cAAc,CAACS,OAAf,CAAuB,UAACP,UAAD,EAAaC,KAAb,EAAuB;AAC5CD,QAAAA,UAAU,CAACQ,cAAX,CAA0BT,YAAY,CAACE,KAAD,CAAtC;AACD,OAFD;AAGD,KAJD;AAKD,GAvBkB,EAuBhB,CAACf,KAAD,CAvBgB,CAAnB;AAyBA,SAAOS,OAAP;AACD","sourcesContent":["import * as React from \"react\"\nimport { isBrowser } from \"@chakra-ui/utils\"\n\nconst useSafeLayoutEffect = isBrowser ? React.useLayoutEffect : React.useEffect\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n */\nexport function useMediaQuery(query: string | string[]): boolean[] {\n  const queries = Array.isArray(query) ? query : [query]\n  const isSupported = isBrowser && \"matchMedia\" in window\n\n  const [matches, setMatches] = React.useState(\n    queries.map((query) =>\n      isSupported ? !!window.matchMedia(query).matches : false,\n    ),\n  )\n\n  useSafeLayoutEffect(() => {\n    if (!isSupported) return undefined\n\n    const mediaQueryList = queries.map((query) => window.matchMedia(query))\n\n    const listenerList = mediaQueryList.map((mediaQuery, index) => {\n      const listener = () =>\n        setMatches((prev) =>\n          prev.map((prevValue, idx) =>\n            index === idx ? !!mediaQuery.matches : prevValue,\n          ),\n        )\n\n      mediaQuery.addListener(listener)\n\n      return listener\n    })\n\n    return () => {\n      mediaQueryList.forEach((mediaQuery, index) => {\n        mediaQuery.removeListener(listenerList[index])\n      })\n    }\n  }, [query])\n\n  return matches\n}\n"],"file":"use-media-query.js"}