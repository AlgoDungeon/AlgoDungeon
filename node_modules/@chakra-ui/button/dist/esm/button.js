function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { Spinner } from "@chakra-ui/spinner";
import { chakra, forwardRef, omitThemingProps, useStyleConfig } from "@chakra-ui/system";
import { cx, dataAttr, mergeWith, __DEV__ } from "@chakra-ui/utils";
import * as React from "react";
import { useButtonGroup } from "./button-group";
export var Button = /*#__PURE__*/forwardRef((props, ref) => {
  var _styles$_focus;

  var group = useButtonGroup();
  var styles = useStyleConfig("Button", _extends({}, group, props));

  var _omitThemingProps = omitThemingProps(props),
      {
    isDisabled = group == null ? void 0 : group.isDisabled,
    isLoading,
    isActive,
    isFullWidth,
    children,
    leftIcon,
    rightIcon,
    loadingText,
    iconSpacing = "0.5rem",
    type = "button",
    spinner,
    className,
    as
  } = _omitThemingProps,
      rest = _objectWithoutPropertiesLoose(_omitThemingProps, ["isDisabled", "isLoading", "isActive", "isFullWidth", "children", "leftIcon", "rightIcon", "loadingText", "iconSpacing", "type", "spinner", "className", "as"]);
  /**
   * When button is used within ButtonGroup (i.e flushed with sibling buttons),
   * it is important to add a `zIndex` on focus.
   *
   * So let's read the component styles and then add `zIndex` to it.
   */


  var _focus = mergeWith({}, (_styles$_focus = styles == null ? void 0 : styles["_focus"]) != null ? _styles$_focus : {}, {
    zIndex: 1
  });

  var buttonStyles = _extends({
    display: "inline-flex",
    appearance: "none",
    alignItems: "center",
    justifyContent: "center",
    transition: "all 250ms",
    userSelect: "none",
    position: "relative",
    whiteSpace: "nowrap",
    verticalAlign: "middle",
    outline: "none",
    width: isFullWidth ? "100%" : "auto"
  }, styles, !!group && {
    _focus
  });

  return /*#__PURE__*/React.createElement(chakra.button, _extends({
    disabled: isDisabled || isLoading,
    ref: ref,
    as: as,
    type: as ? undefined : type,
    "data-active": dataAttr(isActive),
    "data-loading": dataAttr(isLoading),
    __css: buttonStyles,
    className: cx("chakra-button", className)
  }, rest), leftIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {
    marginEnd: iconSpacing
  }, leftIcon), isLoading && /*#__PURE__*/React.createElement(ButtonSpinner, {
    __css: {
      fontSize: "1em",
      lineHeight: "normal"
    },
    spacing: iconSpacing,
    label: loadingText
  }, spinner), isLoading ? loadingText || /*#__PURE__*/React.createElement(chakra.span, {
    opacity: 0
  }, children) : children, rightIcon && !isLoading && /*#__PURE__*/React.createElement(ButtonIcon, {
    marginStart: iconSpacing
  }, rightIcon));
});

if (__DEV__) {
  Button.displayName = "Button";
}

var ButtonIcon = props => {
  var {
    children,
    className
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["children", "className"]);

  var _children = /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, {
    "aria-hidden": true,
    focusable: false
  }) : children;

  var _className = cx("chakra-button__icon", className);

  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, rest, {
    className: _className
  }), _children);
};

if (__DEV__) {
  ButtonIcon.displayName = "ButtonIcon";
}

var ButtonSpinner = props => {
  var {
    label,
    spacing,
    children = /*#__PURE__*/React.createElement(Spinner, {
      color: "currentColor",
      width: "1em",
      height: "1em"
    }),
    className,
    __css
  } = props,
      rest = _objectWithoutPropertiesLoose(props, ["label", "spacing", "children", "className", "__css"]);

  var _className = cx("chakra-button__spinner", className);

  var spinnerStyles = _extends({
    display: "flex",
    alignItems: "center",
    position: label ? "relative" : "absolute",
    marginEnd: label ? spacing : 0
  }, __css);

  return /*#__PURE__*/React.createElement(chakra.div, _extends({
    className: _className
  }, rest, {
    __css: spinnerStyles
  }), children);
};

if (__DEV__) {
  ButtonSpinner.displayName = "ButtonSpinner";
}
//# sourceMappingURL=button.js.map