{"version":3,"sources":["../../src/button.tsx"],"names":["Spinner","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","mergeWith","__DEV__","React","useButtonGroup","Button","props","ref","group","styles","isDisabled","isLoading","isActive","isFullWidth","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","className","as","rest","_focus","zIndex","buttonStyles","display","appearance","alignItems","justifyContent","transition","userSelect","position","whiteSpace","verticalAlign","outline","width","undefined","fontSize","lineHeight","displayName","ButtonIcon","_children","isValidElement","cloneElement","focusable","_className","ButtonSpinner","label","spacing","__css","spinnerStyles","marginEnd"],"mappings":"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","sourcesContent":["import { Spinner } from \"@chakra-ui/spinner\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useButtonGroup } from \"./button-group\"\n\nexport interface ButtonOptions {\n  /**\n   * If `true`, the button will show a spinner.\n   */\n  isLoading?: boolean\n  /**\n   * If `true`, the button will be styled in its active state.\n   */\n  isActive?: boolean\n  /**\n   * If `true`, the button will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * The label to show in the button when `isLoading` is true\n   * If no text is passed, it only shows the spinner\n   */\n  loadingText?: string\n  /**\n   * If `true`, the button will take up the full width of its container.\n   */\n  isFullWidth?: boolean\n  /**\n   * The html button type to use.\n   */\n  type?: \"button\" | \"reset\" | \"submit\"\n  /**\n   * If added, the button will show an icon before the button's label.\n   * @type React.ReactElement\n   */\n  leftIcon?: React.ReactElement\n  /**\n   * If added, the button will show an icon after the button's label.\n   * @type React.ReactElement\n   */\n  rightIcon?: React.ReactElement\n  /**\n   * The space between the button icon and label.\n   * @type SystemProps[\"marginRight\"]\n   */\n  iconSpacing?: SystemProps[\"marginRight\"]\n  /**\n   * Replace the spinner component when `isLoading` is set to `true`\n   * @type React.ReactElement\n   */\n  spinner?: React.ReactElement\n}\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps {}\n\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    isFullWidth,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type = \"button\",\n    spinner,\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const _focus = mergeWith({}, styles?.[\"_focus\"] ?? {}, { zIndex: 1 })\n\n  const buttonStyles: SystemStyleObject = {\n    display: \"inline-flex\",\n    appearance: \"none\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    transition: \"all 250ms\",\n    userSelect: \"none\",\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    verticalAlign: \"middle\",\n    outline: \"none\",\n    width: isFullWidth ? \"100%\" : \"auto\",\n    ...styles,\n    ...(!!group && { _focus }),\n  }\n\n  return (\n    <chakra.button\n      disabled={isDisabled || isLoading}\n      ref={ref}\n      as={as}\n      type={as ? undefined : type}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n    >\n      {leftIcon && !isLoading && (\n        <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>\n      )}\n      {isLoading && (\n        <ButtonSpinner\n          __css={{ fontSize: \"1em\", lineHeight: \"normal\" }}\n          spacing={iconSpacing}\n          label={loadingText}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n      {isLoading\n        ? loadingText || <chakra.span opacity={0}>{children}</chakra.span>\n        : children}\n      {rightIcon && !isLoading && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </chakra.button>\n  )\n})\n\nif (__DEV__) {\n  Button.displayName = \"Button\"\n}\n\nconst ButtonIcon: React.FC<HTMLChakraProps<\"span\">> = (props) => {\n  const { children, className, ...rest } = props\n\n  const _children = React.isValidElement(children)\n    ? React.cloneElement(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span {...rest} className={_className}>\n      {_children}\n    </chakra.span>\n  )\n}\n\nif (__DEV__) {\n  ButtonIcon.displayName = \"ButtonIcon\"\n}\n\ninterface ButtonSpinnerProps extends HTMLChakraProps<\"div\"> {\n  label?: string\n  /**\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n}\n\nconst ButtonSpinner: React.FC<ButtonSpinnerProps> = (props) => {\n  const {\n    label,\n    spacing,\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const spinnerStyles: SystemStyleObject = {\n    display: \"flex\",\n    alignItems: \"center\",\n    position: label ? \"relative\" : \"absolute\",\n    marginEnd: label ? spacing : 0,\n    ...__css,\n  }\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  ButtonSpinner.displayName = \"ButtonSpinner\"\n}\n"],"file":"button.js"}