{"version":3,"sources":["../../src/providers.tsx"],"names":["useColorMode","css","createContext","memoizedGet","get","runIfFn","Global","ThemeContext","React","ThemeProvider","useTheme","theme","useContext","Error","StylesProvider","useStyles","name","errorMessage","GlobalStyle","colorMode","styleObjectOrFn","globalStyles","undefined","styles"],"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,GAAT,QAAuC,0BAAvC;AACA,SACEC,aADF,EAGEC,WAAW,IAAIC,GAHjB,EAIEC,OAJF,QAKO,kBALP;AAMA,SAASC,MAAT,EAAgCC,YAAhC,QAAoD,gBAApD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAEA,SAASC,aAAT,QAA8B,gBAA9B;AAGA,OAAO,SAASC,QAAT,GAA6C;AAClD,MAAMC,KAAK,GAAGH,KAAK,CAACI,UAAN,CACXL,YADW,CAAd;;AAGA,MAAI,CAACI,KAAL,EAAY;AACV,UAAME,KAAK,CACT,2FADS,CAAX;AAGD;;AAED,SAAOF,KAAP;AACD;AAED,IAAM,CAACG,cAAD,EAAiBC,SAAjB,IAA8Bb,aAAa,CAA0B;AACzEc,EAAAA,IAAI,EAAE,eADmE;AAEzEC,EAAAA,YAAY,EACV;AAHuE,CAA1B,CAAjD;AAMA,SAASH,cAAT,EAAyBC,SAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMG,WAAW,GAAG,MAAM;AAC/B,MAAM;AAAEC,IAAAA;AAAF,MAAgBnB,YAAY,EAAlC;AACA,sBACE,oBAAC,MAAD;AACE,IAAA,MAAM,EAAGW,KAAD,IAAW;AACjB,UAAMS,eAAe,GAAGhB,GAAG,CAACO,KAAD,EAAQ,eAAR,CAA3B;AACA,UAAMU,YAAY,GAAGhB,OAAO,CAACe,eAAD,EAAkB;AAAET,QAAAA,KAAF;AAASQ,QAAAA;AAAT,OAAlB,CAA5B;AACA,UAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;AACnB,UAAMC,MAAM,GAAGtB,GAAG,CAACoB,YAAD,CAAH,CAAkBV,KAAlB,CAAf;AACA,aAAOY,MAAP;AACD;AAPH,IADF;AAWD,CAbM","sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { css, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  createContext,\n  Dict,\n  memoizedGet as get,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport { Global, Interpolation, ThemeContext } from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport { ThemeProvider } from \"@emotion/react\"\nexport type { ThemeProviderProps } from \"@emotion/react\"\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\",\n    )\n  }\n\n  return theme\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"],"file":"providers.js"}