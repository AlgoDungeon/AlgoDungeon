import { useColorMode } from "@chakra-ui/color-mode";
import { css } from "@chakra-ui/styled-system";
import { createContext, memoizedGet as get, runIfFn } from "@chakra-ui/utils";
import { Global, ThemeContext } from "@emotion/react";
import * as React from "react";
export { ThemeProvider } from "@emotion/react";
export function useTheme() {
  var theme = React.useContext(ThemeContext);

  if (!theme) {
    throw Error("useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`");
  }

  return theme;
}
var [StylesProvider, useStyles] = createContext({
  name: "StylesContext",
  errorMessage: "useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` "
});
export { StylesProvider, useStyles };
/**
 * Applies styles defined in `theme.styles.global` globally
 * using emotion's `Global` component
 */

export var GlobalStyle = () => {
  var {
    colorMode
  } = useColorMode();
  return /*#__PURE__*/React.createElement(Global, {
    styles: theme => {
      var styleObjectOrFn = get(theme, "styles.global");
      var globalStyles = runIfFn(styleObjectOrFn, {
        theme,
        colorMode
      });
      if (!globalStyles) return undefined;
      var styles = css(globalStyles)(theme);
      return styles;
    }
  });
};
//# sourceMappingURL=providers.js.map