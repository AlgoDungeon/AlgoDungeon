{"version":3,"sources":["../../src/use-style-config.ts"],"names":["filterUndefined","memoizedGet","get","mergeWith","runIfFn","omit","useMemo","useRef","isEqual","useChakra","useStyleConfig","themeKey","props","opts","styleConfig","styleConfigProp","rest","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","baseStyles","baseStyle","variants","variant","sizes","size","styles","isMultiPart","parts","forEach","part","isStyleEqual","current","useMultiStyleConfig"],"mappings":";;AACA,SACEA,eADF,EAEEC,WAAW,IAAIC,GAFjB,EAGEC,SAHF,EAIEC,OAJF,EAKEC,IALF,QAMO,kBANP;AAOA,SAASC,OAAT,EAAkBC,MAAlB,QAAgC,OAAhC;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAASC,SAAT,QAA0B,SAA1B;AAeA,OAAO,SAASC,cAAT,CAAwBC,QAAxB,EAAuCC,KAAvC,EAAwDC,IAAxD,EAAwE;AAAA;;AAAA,MAAjCD,KAAiC;AAAjCA,IAAAA,KAAiC,GAApB,EAAoB;AAAA;;AAAA,MAAhBC,IAAgB;AAAhBA,IAAAA,IAAgB,GAAJ,EAAI;AAAA;;AAC7E,MAAM;AAAEC,IAAAA,WAAW,EAAEC;AAAf,MAA4CH,KAAlD;AAAA,MAAyCI,IAAzC,iCAAkDJ,KAAlD;;AAEA,MAAM;AAAEK,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAuBT,SAAS,EAAtC;AACA,MAAMU,gBAAgB,GAAGjB,GAAG,CAACe,KAAD,kBAAsBN,QAAtB,CAA5B;AACA,MAAMG,WAAW,GAAGC,eAAe,IAAII,gBAAvC;AAEA,MAAMC,WAAW,GAAGjB,SAAS,CAC3B;AAAEc,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAD2B,2BAE3BJ,WAF2B,oBAE3BA,WAAW,CAAEO,YAFc,oCAEE,EAFF,EAG3BrB,eAAe,CAACK,IAAI,CAACW,IAAD,EAAO,CAAC,UAAD,CAAP,CAAL,CAHY,CAA7B;AAMA;AACF;AACA;;AAEE,MAAMM,SAAS,GAAGf,MAAM,CAAY,EAAZ,CAAxB;AAEA,SAAOD,OAAO,CAAC,MAAM;AACnB,QAAIQ,WAAJ,EAAiB;AAAA;;AACf,UAAMS,UAAU,GAAGnB,OAAO,0BAACU,WAAW,CAACU,SAAb,oCAA0B,EAA1B,EAA8BJ,WAA9B,CAA1B;AAEA,UAAMK,QAAQ,GAAGrB,OAAO,oDACtBU,WAAW,CAACW,QADU,qBACtB,uBAAuBL,WAAW,CAACM,OAAnC,CADsB,oCACyB,EADzB,EAEtBN,WAFsB,CAAxB;AAKA,UAAMO,KAAK,GAAGvB,OAAO,gDACnBU,WAAW,CAACa,KADO,qBACnB,mBAAoBP,WAAW,CAACQ,IAAhC,CADmB,oCACsB,EADtB,EAEnBR,WAFmB,CAArB;AAKA,UAAMS,MAAM,GAAG1B,SAAS,CAAC,EAAD,EAAKoB,UAAL,EAAiBI,KAAjB,EAAwBF,QAAxB,CAAxB;;AAEA,UAAI,SAAAZ,IAAI,SAAJ,UAAMiB,WAAN,IAAqBhB,WAAW,CAACiB,KAArC,EAA4C;AAC1CjB,QAAAA,WAAW,CAACiB,KAAZ,CAAkBC,OAAlB,CAA2BC,IAAD,IAAkB;AAAA;;AAC1CJ,UAAAA,MAAM,CAACI,IAAD,CAAN,mBAAeJ,MAAM,CAACI,IAAD,CAArB,2BAA+B,EAA/B;AACD,SAFD;AAGD;;AAED,UAAMC,YAAY,GAAG1B,OAAO,CAACc,SAAS,CAACa,OAAX,EAAoBN,MAApB,CAA5B;;AAEA,UAAI,CAACK,YAAL,EAAmB;AACjBZ,QAAAA,SAAS,CAACa,OAAV,GAAoBN,MAApB;AACD;AACF;;AAED,WAAOP,SAAS,CAACa,OAAjB;AACD,GA9Ba,EA8BX,CAACrB,WAAD,EAAcM,WAAd,YAA2BP,IAA3B,qBAA2B,OAAMiB,WAAjC,CA9BW,CAAd;AA+BD;AAED,OAAO,SAASM,mBAAT,CAA6BzB,QAA7B,EAA+CC,KAA/C,EAA2D;AAChE,SAAOF,cAAc,CAACC,QAAD,EAAWC,KAAX,EAAkB;AAAEkB,IAAAA,WAAW,EAAE;AAAf,GAAlB,CAArB;AACD","sourcesContent":["import { SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport {\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  runIfFn,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useMemo, useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\nimport { ThemingProps } from \"./system.types\"\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps,\n  opts: { isMultiPart: true },\n): Record<string, SystemStyleObject>\n\nexport function useStyleConfig(\n  themeKey: string,\n  props?: ThemingProps,\n  opts?: { isMultiPart?: boolean },\n): SystemStyleObject\n\nexport function useStyleConfig(themeKey: any, props: any = {}, opts: any = {}) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n  const themeStyleConfig = get(theme, `components.${themeKey}`)\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  type StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n  const stylesRef = useRef<StylesRef>({})\n\n  return useMemo(() => {\n    if (styleConfig) {\n      const baseStyles = runIfFn(styleConfig.baseStyle ?? {}, mergedProps)\n\n      const variants = runIfFn(\n        styleConfig.variants?.[mergedProps.variant] ?? {},\n        mergedProps,\n      )\n\n      const sizes = runIfFn(\n        styleConfig.sizes?.[mergedProps.size] ?? {},\n        mergedProps,\n      )\n\n      const styles = mergeWith({}, baseStyles, sizes, variants)\n\n      if (opts?.isMultiPart && styleConfig.parts) {\n        styleConfig.parts.forEach((part: string) => {\n          styles[part] = styles[part] ?? {}\n        })\n      }\n\n      const isStyleEqual = isEqual(stylesRef.current, styles)\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles\n      }\n    }\n\n    return stylesRef.current\n  }, [styleConfig, mergedProps, opts?.isMultiPart])\n}\n\nexport function useMultiStyleConfig(themeKey: string, props: any) {\n  return useStyleConfig(themeKey, props, { isMultiPart: true })\n}\n"],"file":"use-style-config.js"}