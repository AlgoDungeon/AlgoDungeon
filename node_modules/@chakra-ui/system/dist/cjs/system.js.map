{"version":3,"sources":["../../src/system.ts"],"names":["stylePropNames","propNames","reduce","keymirror","key","getStyleObject","baseStyle","props","theme","layerStyle","textStyle","apply","noOfLines","isTruncated","cssProp","css","__css","sx","rest","_layerStyle","_textStyle","styleProps","_","prop","truncateStyle","overflow","textOverflow","display","WebkitBoxOrient","WebkitLineClamp","whiteSpace","finalStyles","computedCSS","cssObject","styled","component","options","styledOptions","shouldForwardProp","styleObject","chakra","domElements","forEach","tag"],"mappings":"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","sourcesContent":["import {\n  css,\n  propNames,\n  ResponsiveValue,\n  SystemProps,\n  SystemStyleObject,\n  ChakraStyleProps,\n} from \"@chakra-ui/styled-system\"\nimport {\n  memoizedGet as get,\n  objectFilter,\n  objectAssign,\n  Dict,\n  isFunction,\n} from \"@chakra-ui/utils\"\nimport _styled, {\n  CSSObject,\n  FunctionInterpolation,\n  Interpolation,\n} from \"@emotion/styled\"\nimport { shouldForwardProp } from \"./should-forward-prop\"\nimport { As, ChakraComponent, ChakraProps, PropsOf } from \"./system.types\"\nimport { domElements, DOMElements } from \"./system.utils\"\n\n/**\n * Convert propNames array to object to faster lookup perf\n */\nconst stylePropNames = propNames.reduce((keymirror, key) => {\n  if (typeof key !== \"object\" && typeof key !== \"function\") keymirror[key] = key\n  return keymirror\n}, {})\n\ninterface StyleResolverProps extends SystemProps {\n  __css?: SystemStyleObject\n  sx?: SystemStyleObject\n  theme: Dict\n  css?: CSSObject\n  noOfLines?: ResponsiveValue<number>\n  isTruncated?: boolean\n  layerStyle?: string\n  textStyle?: string\n  apply?: ResponsiveValue<string>\n}\n\ntype GetStyleObject = (options: {\n  baseStyle?: SystemStyleObject\n}) => FunctionInterpolation<StyleResolverProps>\n\n/**\n * Style resolver function that manages how style props are merged\n * in combination with other possible ways of defining styles.\n *\n * For example, take a component defined this way:\n * ```jsx\n * <Box fontSize=\"24px\" sx={{ fontSize: \"40px\" }}></Box>\n * ```\n *\n * We want to manage the priority of the styles properly to prevent unwanted\n * behaviors. Right now, the `sx` prop has the highest priority so the resolved\n * fontSize will be `40px`\n */\nexport const getStyleObject: GetStyleObject = ({ baseStyle }) => (props) => {\n  const {\n    theme,\n    layerStyle,\n    textStyle,\n    apply,\n    noOfLines,\n    isTruncated,\n    css: cssProp,\n    __css,\n    sx,\n    ...rest\n  } = props\n\n  const _layerStyle = get(theme, `layerStyles.${layerStyle}`, {})\n  const _textStyle = get(theme, `textStyles.${textStyle}`, {})\n\n  // filter out props that aren't style props\n  const styleProps = objectFilter(rest, (_, prop) => prop in stylePropNames)\n\n  let truncateStyle: any = {}\n\n  if (noOfLines != null) {\n    truncateStyle = {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      display: \"-webkit-box\",\n      WebkitBoxOrient: \"vertical\",\n      WebkitLineClamp: noOfLines,\n    }\n  } else if (isTruncated) {\n    truncateStyle = {\n      overflow: \"hidden\",\n      textOverflow: \"ellipsis\",\n      whiteSpace: \"nowrap\",\n    }\n  }\n\n  /**\n   * The computed, theme-aware style object. The other of the properties\n   * within `objectAssign` determines how styles are overriden.\n   */\n  const finalStyles = objectAssign(\n    {},\n    __css,\n    baseStyle,\n    { apply },\n    _layerStyle,\n    _textStyle,\n    truncateStyle,\n    styleProps,\n    sx,\n  )\n\n  // Converts theme-aware style object to real css object\n  const computedCSS = css(finalStyles)(props.theme)\n\n  // Merge the computed css object with styles in css prop\n  const cssObject: Interpolation<StyleResolverProps> = objectAssign(\n    computedCSS,\n    isFunction(cssProp) ? cssProp(theme) : cssProp,\n  )\n\n  return cssObject\n}\n\ninterface StyledOptions {\n  shouldForwardProp?(prop: string): boolean\n  label?: string\n  baseStyle?: SystemStyleObject\n}\n\nexport function styled<T extends As, P = {}>(\n  component: T,\n  options?: StyledOptions,\n) {\n  const { baseStyle, ...styledOptions } = options ?? {}\n\n  if (!styledOptions.shouldForwardProp) {\n    styledOptions.shouldForwardProp = shouldForwardProp\n  }\n\n  const styleObject = getStyleObject({ baseStyle })\n  return _styled(\n    component as React.ComponentType<any>,\n    styledOptions,\n  )(styleObject) as ChakraComponent<T, P>\n}\n\nexport type HTMLChakraComponents = {\n  [Tag in DOMElements]: ChakraComponent<Tag, {}>\n}\n\nexport type HTMLChakraProps<T extends As> = Omit<\n  PropsOf<T>,\n  T extends \"svg\"\n    ? \"ref\" | \"children\" | keyof ChakraStyleProps\n    : \"ref\" | keyof ChakraStyleProps\n> &\n  ChakraProps & { as?: As }\n\ntype ChakraFactory = {\n  <T extends As, P = {}>(\n    component: T,\n    options?: StyledOptions,\n  ): ChakraComponent<T, P>\n}\n\nexport const chakra = (styled as unknown) as ChakraFactory &\n  HTMLChakraComponents\n\ndomElements.forEach((tag) => {\n  chakra[tag] = chakra(tag)\n})\n"],"file":"system.js"}