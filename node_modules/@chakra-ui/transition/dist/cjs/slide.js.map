{"version":3,"sources":["../../src/slide.tsx"],"names":["directions","bottom","motion","y","baseStyle","maxWidth","left","right","top","x","width","height","variants","exit","direction","transition","duration","ease","EASINGS","easeInOut","enter","Object","keys","axis","type","damping","stiffness","Slide","React","forwardRef","props","ref","style","unmountOnExit","isOpen","className","rest","shouldExpand","position","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\nexport type SlideDirection = keyof typeof directions\n\nconst directions = {\n  bottom: {\n    motion: { y: \"100%\" },\n    baseStyle: {\n      maxWidth: \"100vw\",\n      bottom: 0,\n      left: 0,\n      right: 0,\n    },\n  },\n  top: {\n    motion: { y: \"-100%\" },\n    baseStyle: {\n      maxWidth: \"100vw\",\n      top: 0,\n      left: 0,\n      right: 0,\n    },\n  },\n  left: {\n    motion: { x: \"-100%\" },\n    baseStyle: {\n      width: \"100%\",\n      height: \"100vh\",\n      left: 0,\n      top: 0,\n    },\n  },\n  right: {\n    motion: { x: \"100%\" },\n    baseStyle: {\n      width: \"100%\",\n      right: 0,\n      top: 0,\n      height: \"100vh\",\n    },\n  },\n}\n\ntype SlideVariants = MotionVariants<\"enter\" | \"exit\">\n\nconst variants: SlideVariants = {\n  exit: (direction: string) => {\n    const { motion } = directions[direction] ?? {}\n    return {\n      ...motion,\n      transition: {\n        duration: 0.15,\n        ease: EASINGS.easeInOut,\n      },\n    }\n  },\n  enter: (direction: string) => {\n    const { motion } = directions[direction] ?? {}\n    const [axis] = motion ? Object.keys(motion) : [\"x\"]\n    return {\n      [axis]: 0,\n      transition: {\n        type: \"spring\",\n        damping: 25,\n        stiffness: 180,\n      },\n    }\n  },\n}\n\nexport interface SlideOptions {\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * The direction to slide from\n   * @default \"right\"\n   */\n  direction?: SlideDirection\n  /**\n   * Show the component; triggers the enter or exit states\n   */\n  in?: boolean\n}\n\nexport interface SlideProps extends HTMLMotionProps<\"div\">, SlideOptions {}\n\nexport const Slide = React.forwardRef<HTMLDivElement, SlideProps>(\n  (props, ref) => {\n    const {\n      direction = \"right\",\n      style,\n      unmountOnExit,\n      in: isOpen,\n      className,\n      ...rest\n    } = props\n\n    const { baseStyle } = directions[direction] ?? {}\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    return (\n      <AnimatePresence custom={direction}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            initial=\"exit\"\n            className={cx(\"chakra-slide\", className)}\n            animate={isOpen || unmountOnExit ? \"enter\" : \"exit\"}\n            exit=\"exit\"\n            custom={direction}\n            variants={variants}\n            style={{\n              position: \"fixed\",\n              ...baseStyle,\n              ...style,\n            }}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  Slide.displayName = \"Slide\"\n}\n"],"file":"slide.js"}