{"version":3,"sources":["../../src/slide-fade.tsx"],"names":["transitions","enter","duration","ease","EASINGS","easeOut","exit","easeIn","variants","initial","props","opacity","x","offsetX","y","offsetY","transition","reverse","transitionEnd","slideFadeConfig","animate","SlideFade","React","forwardRef","ref","unmountOnExit","isOpen","className","rest","shouldExpand","custom","motionProps","__DEV__","displayName"],"mappings":"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","sourcesContent":["import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype SlideFadeVariant = MotionVariants<\"initial\" | \"enter\" | \"exit\">\n\nconst transitions = {\n  enter: {\n    duration: 0.2,\n    ease: EASINGS.easeOut,\n  },\n  exit: {\n    duration: 0.1,\n    ease: EASINGS.easeIn,\n  },\n}\n\nconst variants: SlideFadeVariant = {\n  initial: (props) => ({\n    opacity: 0,\n    x: props.offsetX,\n    y: props.offsetY,\n    transition: transitions.exit,\n  }),\n  exit: (props) => ({\n    opacity: 0,\n    transition: transitions.exit,\n    ...(props.reverse && {\n      x: props.offsetX,\n      y: props.offsetY,\n    }),\n    ...(!props.reverse && {\n      transitionEnd: {\n        x: props.offsetX,\n        y: props.offsetY,\n      },\n    }),\n  }),\n  enter: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n    transition: transitions.enter,\n  },\n}\n\nexport const slideFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"initial\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface SlideFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The offset on the horizontal or `x` axis\n   * @default 0\n   */\n  offsetX?: string | number\n  /**\n   * The offset on the vertical or `y` axis\n   * @default 8\n   */\n  offsetY?: string | number\n  /**\n   * If `true`, the element will be transitioned back to the offset when it leaves.\n   * Otherwise, it'll only fade out\n   * @default true\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will animate in\n   */\n  in?: boolean\n}\n\nexport const SlideFade = React.forwardRef<HTMLDivElement, SlideFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      className,\n      offsetX = 0,\n      offsetY = 8,\n      ...rest\n    } = props\n\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    const custom = { offsetX, offsetY, reverse }\n    const motionProps = mergeWith(slideFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  SlideFade.displayName = \"SlideFade\"\n}\n"],"file":"slide-fade.js"}