{"version":3,"sources":["../../src/slide-fade.tsx"],"names":["cx","mergeWith","__DEV__","AnimatePresence","motion","React","EASINGS","transitions","enter","duration","ease","easeOut","exit","easeIn","variants","initial","props","opacity","x","offsetX","y","offsetY","transition","reverse","transitionEnd","slideFadeConfig","animate","SlideFade","forwardRef","ref","unmountOnExit","in","isOpen","className","rest","shouldExpand","custom","motionProps","displayName"],"mappings":"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","sourcesContent":["import { cx, mergeWith, __DEV__ } from \"@chakra-ui/utils\"\nimport { AnimatePresence, HTMLMotionProps, motion } from \"framer-motion\"\nimport * as React from \"react\"\nimport { EASINGS, MotionVariants } from \"./__utils\"\n\ntype SlideFadeVariant = MotionVariants<\"initial\" | \"enter\" | \"exit\">\n\nconst transitions = {\n  enter: {\n    duration: 0.2,\n    ease: EASINGS.easeOut,\n  },\n  exit: {\n    duration: 0.1,\n    ease: EASINGS.easeIn,\n  },\n}\n\nconst variants: SlideFadeVariant = {\n  initial: (props) => ({\n    opacity: 0,\n    x: props.offsetX,\n    y: props.offsetY,\n    transition: transitions.exit,\n  }),\n  exit: (props) => ({\n    opacity: 0,\n    transition: transitions.exit,\n    ...(props.reverse && {\n      x: props.offsetX,\n      y: props.offsetY,\n    }),\n    ...(!props.reverse && {\n      transitionEnd: {\n        x: props.offsetX,\n        y: props.offsetY,\n      },\n    }),\n  }),\n  enter: {\n    opacity: 1,\n    x: 0,\n    y: 0,\n    transition: transitions.enter,\n  },\n}\n\nexport const slideFadeConfig: HTMLMotionProps<\"div\"> = {\n  initial: \"initial\",\n  animate: \"enter\",\n  exit: \"exit\",\n  variants,\n}\n\nexport interface SlideFadeProps extends HTMLMotionProps<\"div\"> {\n  /**\n   * The offset on the horizontal or `x` axis\n   * @default 0\n   */\n  offsetX?: string | number\n  /**\n   * The offset on the vertical or `y` axis\n   * @default 8\n   */\n  offsetY?: string | number\n  /**\n   * If `true`, the element will be transitioned back to the offset when it leaves.\n   * Otherwise, it'll only fade out\n   * @default true\n   */\n  reverse?: boolean\n  /**\n   * If `true`, the element will unmount when `in={false}` and animation is done\n   */\n  unmountOnExit?: boolean\n  /**\n   * If `true`, the content will animate in\n   */\n  in?: boolean\n}\n\nexport const SlideFade = React.forwardRef<HTMLDivElement, SlideFadeProps>(\n  (props, ref) => {\n    const {\n      unmountOnExit,\n      in: isOpen,\n      reverse = true,\n      className,\n      offsetX = 0,\n      offsetY = 8,\n      ...rest\n    } = props\n\n    const shouldExpand = unmountOnExit ? isOpen && unmountOnExit : true\n\n    const custom = { offsetX, offsetY, reverse }\n    const motionProps = mergeWith(slideFadeConfig, {\n      custom,\n      animate: isOpen || unmountOnExit ? \"enter\" : \"exit\",\n    })\n\n    return (\n      <AnimatePresence custom={custom}>\n        {shouldExpand && (\n          <motion.div\n            ref={ref}\n            className={cx(\"chakra-offset-slide\", className)}\n            {...motionProps}\n            {...rest}\n          />\n        )}\n      </AnimatePresence>\n    )\n  },\n)\n\nif (__DEV__) {\n  SlideFade.displayName = \"SlideFade\"\n}\n"],"file":"slide-fade.js"}