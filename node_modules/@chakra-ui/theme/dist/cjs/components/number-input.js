"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _themeTools = require("@chakra-ui/theme-tools");

var _input = _interopRequireDefault(require("./input"));

var _typography = _interopRequireDefault(require("../foundations/typography"));

var _Input$baseStyle;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var parts = ["field", "stepper", "stepperGroup"];
var variants = _input["default"].variants,
    defaultProps = _input["default"].defaultProps;
var baseStyleField = (_Input$baseStyle = _input["default"].baseStyle) == null ? void 0 : _Input$baseStyle.field;
var baseStyleStepperGroup = {
  width: "24px"
};

function baseStyleStepper(props) {
  return {
    borderLeft: "1px solid",
    borderColor: (0, _themeTools.mode)("inherit", "whiteAlpha.300")(props),
    color: (0, _themeTools.mode)("inherit", "whiteAlpha.800")(props),
    _active: {
      bg: (0, _themeTools.mode)("gray.200", "whiteAlpha.300")(props)
    },
    _disabled: {
      opacity: 0.4,
      cursor: "not-allowed"
    }
  };
}

var baseStyle = function baseStyle(props) {
  return {
    field: baseStyleField,
    stepperGroup: baseStyleStepperGroup,
    stepper: baseStyleStepper(props)
  };
};

function getSize(size) {
  var sizeStyle = _input["default"].sizes[size];
  var radius = {
    lg: "md",
    md: "md",
    sm: "sm",
    xs: "sm"
  };
  var resolvedFontSize = _typography["default"].fontSizes[sizeStyle.field.fontSize];
  return {
    field: _extends({}, sizeStyle.field, {
      verticalAlign: "top"
    }),
    stepper: {
      fontSize: "calc(" + resolvedFontSize + " * 0.75)",
      _first: {
        borderTopRightRadius: radius[size]
      },
      _last: {
        borderBottomRightRadius: radius[size],
        mt: "-1px",
        borderTopWidth: 1
      }
    }
  };
}

var sizes = {
  xs: getSize("xs"),
  sm: getSize("sm"),
  md: getSize("md"),
  lg: getSize("lg")
};
var _default = {
  parts: parts,
  baseStyle: baseStyle,
  sizes: sizes,
  variants: variants,
  defaultProps: defaultProps
};
exports["default"] = _default;
//# sourceMappingURL=number-input.js.map