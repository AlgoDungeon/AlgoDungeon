{"version":3,"sources":["../../../src/components/avatar.ts"],"names":["parts","baseStyleBadge","props","transform","borderRadius","border","borderColor","baseStyleExcessLabel","bg","baseStyleContainer","name","theme","string","isBgDark","color","verticalAlign","baseStyle","badge","excessLabel","container","getSize","size","themeSize","themeSizes","width","height","fontSize","label","lineHeight","undefined","sizes","xs","sm","md","lg","xl","full","defaultProps"],"mappings":"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","sourcesContent":["import { isDark, mode, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\n\nconst parts = [\"container\", \"excessLabel\", \"badge\", \"label\"]\n\nfunction baseStyleBadge(props: Record<string, any>) {\n  return {\n    transform: \"translate(25%, 25%)\",\n    borderRadius: \"full\",\n    border: \"0.2em solid\",\n    borderColor: mode(\"white\", \"gray.800\")(props),\n  }\n}\n\nfunction baseStyleExcessLabel(props: Record<string, any>) {\n  return {\n    bg: mode(\"gray.200\", \"whiteAlpha.400\")(props),\n  }\n}\n\nfunction baseStyleContainer(props: Record<string, any>) {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  const borderColor = mode(\"white\", \"gray.800\")(props)\n\n  return {\n    bg,\n    color,\n    borderColor,\n    verticalAlign: \"top\",\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => ({\n  badge: baseStyleBadge(props),\n  excessLabel: baseStyleExcessLabel(props),\n  container: baseStyleContainer(props),\n})\n\nfunction getSize(size: string) {\n  const themeSize = themeSizes[size]\n  return {\n    container: {\n      width: size,\n      height: size,\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      width: size,\n      height: size,\n    },\n    label: {\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n      lineHeight: size !== \"100%\" ? themeSize ?? size : undefined,\n    },\n  }\n}\n\nconst sizes = {\n  \"2xs\": getSize(\"4\"),\n  xs: getSize(\"6\"),\n  sm: getSize(\"8\"),\n  md: getSize(\"12\"),\n  lg: getSize(\"16\"),\n  xl: getSize(\"24\"),\n  \"2xl\": getSize(\"32\"),\n  full: getSize(\"100%\"),\n}\n\nconst defaultProps = {\n  size: \"md\",\n}\n\nexport default {\n  parts,\n  baseStyle,\n  sizes,\n  defaultProps,\n}\n"],"file":"avatar.js"}