{"version":3,"sources":["../../../src/components/avatar.ts"],"names":["isDark","mode","randomColor","themeSizes","parts","baseStyleBadge","props","transform","borderRadius","border","borderColor","baseStyleExcessLabel","bg","baseStyleContainer","name","theme","string","isBgDark","color","verticalAlign","baseStyle","badge","excessLabel","container","getSize","size","themeSize","width","height","fontSize","label","lineHeight","undefined","sizes","xs","sm","md","lg","xl","full","defaultProps"],"mappings":"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","sourcesContent":["import { isDark, mode, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\n\nconst parts = [\"container\", \"excessLabel\", \"badge\", \"label\"]\n\nfunction baseStyleBadge(props: Record<string, any>) {\n  return {\n    transform: \"translate(25%, 25%)\",\n    borderRadius: \"full\",\n    border: \"0.2em solid\",\n    borderColor: mode(\"white\", \"gray.800\")(props),\n  }\n}\n\nfunction baseStyleExcessLabel(props: Record<string, any>) {\n  return {\n    bg: mode(\"gray.200\", \"whiteAlpha.400\")(props),\n  }\n}\n\nfunction baseStyleContainer(props: Record<string, any>) {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  const borderColor = mode(\"white\", \"gray.800\")(props)\n\n  return {\n    bg,\n    color,\n    borderColor,\n    verticalAlign: \"top\",\n  }\n}\n\nconst baseStyle = (props: Record<string, any>) => ({\n  badge: baseStyleBadge(props),\n  excessLabel: baseStyleExcessLabel(props),\n  container: baseStyleContainer(props),\n})\n\nfunction getSize(size: string) {\n  const themeSize = themeSizes[size]\n  return {\n    container: {\n      width: size,\n      height: size,\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      width: size,\n      height: size,\n    },\n    label: {\n      fontSize: `calc(${themeSize ?? size} / 2.5)`,\n      lineHeight: size !== \"100%\" ? themeSize ?? size : undefined,\n    },\n  }\n}\n\nconst sizes = {\n  \"2xs\": getSize(\"4\"),\n  xs: getSize(\"6\"),\n  sm: getSize(\"8\"),\n  md: getSize(\"12\"),\n  lg: getSize(\"16\"),\n  xl: getSize(\"24\"),\n  \"2xl\": getSize(\"32\"),\n  full: getSize(\"100%\"),\n}\n\nconst defaultProps = {\n  size: \"md\",\n}\n\nexport default {\n  parts,\n  baseStyle,\n  sizes,\n  defaultProps,\n}\n"],"file":"avatar.js"}