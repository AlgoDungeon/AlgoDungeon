{"version":3,"sources":["../../../src/components/tag.ts"],"names":["Badge","parts","baseStyleContainer","fontWeight","lineHeight","outline","_focus","boxShadow","baseStyleLabel","baseStyleCloseButton","fontSize","w","h","borderRadius","ms","me","opacity","_disabled","bg","_hover","_active","baseStyle","container","label","closeButton","sizes","sm","minH","minW","px","md","lg","variants","subtle","props","solid","defaultProps","size","variant","colorScheme"],"mappings":"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","sourcesContent":["import Badge from \"./badge\"\n\nconst parts = [\"container\", \"label\", \"closeButton\"]\n\ntype Dict = Record<string, any>\n\nconst baseStyleContainer = {\n  fontWeight: \"medium\",\n  lineHeight: 1.2,\n  outline: 0,\n  _focus: {\n    boxShadow: \"outline\",\n  },\n}\n\nconst baseStyleLabel = {\n  lineHeight: 1.2,\n}\n\nconst baseStyleCloseButton = {\n  fontSize: \"18px\",\n  w: \"1.25rem\",\n  h: \"1.25rem\",\n  borderRadius: \"full\",\n  ms: \"0.375rem\",\n  me: \"-1\",\n  opacity: 0.5,\n  _disabled: {\n    opacity: 0.4,\n  },\n  _focus: {\n    boxShadow: \"outline\",\n    bg: \"rgba(0, 0, 0, 0.14)\",\n  },\n  _hover: { opacity: 0.8 },\n  _active: { opacity: 1 },\n}\n\nconst baseStyle = {\n  container: baseStyleContainer,\n  label: baseStyleLabel,\n  closeButton: baseStyleCloseButton,\n}\n\nconst sizes = {\n  sm: {\n    container: {\n      minH: \"1.25rem\",\n      minW: \"1.25rem\",\n      fontSize: \"xs\",\n      px: 2,\n      borderRadius: \"md\",\n    },\n    closeButton: {\n      me: \"-2px\",\n      ms: \"0.35rem\",\n    },\n  },\n  md: {\n    container: {\n      minH: \"1.5rem\",\n      minW: \"1.5rem\",\n      fontSize: \"sm\",\n      borderRadius: \"md\",\n      px: 2,\n    },\n  },\n  lg: {\n    container: {\n      minH: 8,\n      minW: 8,\n      fontSize: \"md\",\n      borderRadius: \"md\",\n      px: 3,\n    },\n  },\n}\n\nconst variants = {\n  subtle: (props: Dict) => ({\n    container: Badge.variants.subtle(props),\n  }),\n  solid: (props: Dict) => ({\n    container: Badge.variants.solid(props),\n  }),\n  outline: (props: Dict) => ({\n    container: Badge.variants.outline(props),\n  }),\n}\n\nconst defaultProps = {\n  size: \"md\",\n  variant: \"subtle\",\n  colorScheme: \"gray\",\n}\n\nexport default {\n  parts,\n  variants,\n  baseStyle,\n  sizes,\n  defaultProps,\n}\n"],"file":"tag.js"}