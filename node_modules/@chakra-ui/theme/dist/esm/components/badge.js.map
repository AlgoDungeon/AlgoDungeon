{"version":3,"sources":["../../../src/components/badge.ts"],"names":["getColor","mode","transparentize","baseStyle","px","textTransform","fontSize","borderRadius","fontWeight","variantSolid","props","colorScheme","c","theme","dark","bg","color","variantSubtle","darkBg","variantOutline","darkColor","lightColor","boxShadow","variants","solid","subtle","outline","defaultProps","variant"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,IAAnB,EAAyBC,cAAzB,QAA+C,wBAA/C;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,EAAE,EAAE,CADY;AAEhBC,EAAAA,aAAa,EAAE,WAFC;AAGhBC,EAAAA,QAAQ,EAAE,IAHM;AAIhBC,EAAAA,YAAY,EAAE,IAJE;AAKhBC,EAAAA,UAAU,EAAE;AALI,CAAlB;;AAQA,SAASC,YAAT,CAAsBC,KAAtB,EAAkD;AAChD,MAAM;AAAEC,IAAAA,WAAW,EAAEC,CAAf;AAAkBC,IAAAA;AAAlB,MAA4BH,KAAlC;AACA,MAAMI,IAAI,GAAGZ,cAAc,CAAIU,CAAJ,WAAa,GAAb,CAAd,CAAgCC,KAAhC,CAAb;AACA,SAAO;AACLE,IAAAA,EAAE,EAAEd,IAAI,CAAIW,CAAJ,WAAaE,IAAb,CAAJ,CAAuBJ,KAAvB,CADC;AAELM,IAAAA,KAAK,EAAEf,IAAI,2BAAJ,CAAgCS,KAAhC;AAFF,GAAP;AAID;;AAED,SAASO,aAAT,CAAuBP,KAAvB,EAAmD;AACjD,MAAM;AAAEC,IAAAA,WAAW,EAAEC,CAAf;AAAkBC,IAAAA;AAAlB,MAA4BH,KAAlC;AACA,MAAMQ,MAAM,GAAGhB,cAAc,CAAIU,CAAJ,WAAa,IAAb,CAAd,CAAiCC,KAAjC,CAAf;AACA,SAAO;AACLE,IAAAA,EAAE,EAAEd,IAAI,CAAIW,CAAJ,WAAaM,MAAb,CAAJ,CAAyBR,KAAzB,CADC;AAELM,IAAAA,KAAK,EAAEf,IAAI,CAAIW,CAAJ,WAAgBA,CAAhB,UAAJ,CAA6BF,KAA7B;AAFF,GAAP;AAID;;AAED,SAASS,cAAT,CAAwBT,KAAxB,EAAoD;AAClD,MAAM;AAAEC,IAAAA,WAAW,EAAEC,CAAf;AAAkBC,IAAAA;AAAlB,MAA4BH,KAAlC;AACA,MAAMU,SAAS,GAAGlB,cAAc,CAAIU,CAAJ,WAAa,GAAb,CAAd,CAAgCC,KAAhC,CAAlB;AACA,MAAMQ,UAAU,GAAGrB,QAAQ,CAACa,KAAD,EAAWD,CAAX,UAA3B;AACA,MAAMI,KAAK,GAAGf,IAAI,CAACoB,UAAD,EAAaD,SAAb,CAAJ,CAA4BV,KAA5B,CAAd;AAEA,SAAO;AACLM,IAAAA,KADK;AAELM,IAAAA,SAAS,yBAAuBN;AAF3B,GAAP;AAID;;AAED,IAAMO,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAEf,YADQ;AAEfgB,EAAAA,MAAM,EAAER,aAFO;AAGfS,EAAAA,OAAO,EAAEP;AAHM,CAAjB;AAMA,IAAMQ,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,QADU;AAEnBjB,EAAAA,WAAW,EAAE;AAFM,CAArB;AAKA,eAAe;AACbR,EAAAA,SADa;AAEboB,EAAAA,QAFa;AAGbI,EAAAA;AAHa,CAAf","sourcesContent":["import { getColor, mode, transparentize } from \"@chakra-ui/theme-tools\"\n\nconst baseStyle = {\n  px: 1,\n  textTransform: \"uppercase\",\n  fontSize: \"xs\",\n  borderRadius: \"sm\",\n  fontWeight: \"bold\",\n}\n\nfunction variantSolid(props: Record<string, any>) {\n  const { colorScheme: c, theme } = props\n  const dark = transparentize(`${c}.500`, 0.6)(theme)\n  return {\n    bg: mode(`${c}.500`, dark)(props),\n    color: mode(`white`, `whiteAlpha.800`)(props),\n  }\n}\n\nfunction variantSubtle(props: Record<string, any>) {\n  const { colorScheme: c, theme } = props\n  const darkBg = transparentize(`${c}.200`, 0.16)(theme)\n  return {\n    bg: mode(`${c}.100`, darkBg)(props),\n    color: mode(`${c}.800`, `${c}.200`)(props),\n  }\n}\n\nfunction variantOutline(props: Record<string, any>) {\n  const { colorScheme: c, theme } = props\n  const darkColor = transparentize(`${c}.200`, 0.8)(theme)\n  const lightColor = getColor(theme, `${c}.500`)\n  const color = mode(lightColor, darkColor)(props)\n\n  return {\n    color,\n    boxShadow: `inset 0 0 0px 1px ${color}`,\n  }\n}\n\nconst variants = {\n  solid: variantSolid,\n  subtle: variantSubtle,\n  outline: variantOutline,\n}\n\nconst defaultProps = {\n  variant: \"subtle\",\n  colorScheme: \"gray\",\n}\n\nexport default {\n  baseStyle,\n  variants,\n  defaultProps,\n}\n"],"file":"badge.js"}