declare type Dict = Record<string, any>;
declare function variantGhost(props: Dict): {
    color: any;
    _hover: {
        bg: any;
    };
    _active: {
        bg: any;
    };
    bg?: undefined;
} | {
    color: any;
    bg: string;
    _hover: {
        bg: any;
    };
    _active: {
        bg: any;
    };
};
declare function variantOutline(props: Dict): {
    color: any;
    _hover: {
        bg: any;
    };
    _active: {
        bg: any;
    };
    bg?: undefined;
    border: string;
    borderColor: any;
} | {
    color: any;
    bg: string;
    _hover: {
        bg: any;
    };
    _active: {
        bg: any;
    };
    border: string;
    borderColor: any;
};
declare function variantSolid(props: Dict): {
    bg: any;
    _hover: {
        bg: any;
        _disabled: {
            bg: any;
        };
    };
    _active: {
        bg: any;
    };
    color?: undefined;
} | {
    bg: any;
    color: any;
    _hover: {
        bg: any;
        _disabled: {
            bg: any;
        };
    };
    _active: {
        bg: any;
    };
};
declare function variantLink(props: Dict): {
    padding: number;
    height: string;
    lineHeight: string;
    color: any;
    _hover: {
        textDecoration: string;
        _disabled: {
            textDecoration: string;
        };
    };
    _active: {
        color: any;
    };
};
declare const _default: {
    baseStyle: {
        lineHeight: string;
        borderRadius: string;
        fontWeight: string;
        _focus: {
            boxShadow: string;
        };
        _disabled: {
            opacity: number;
            cursor: string;
            boxShadow: string;
        };
        _hover: {
            _disabled: {
                bg: string;
            };
        };
    };
    variants: {
        ghost: typeof variantGhost;
        outline: typeof variantOutline;
        solid: typeof variantSolid;
        link: typeof variantLink;
        unstyled: {
            bg: string;
            color: string;
            display: string;
            lineHeight: string;
            m: number;
            p: number;
        };
    };
    sizes: {
        lg: {
            h: number;
            minW: number;
            fontSize: string;
            px: number;
        };
        md: {
            h: number;
            minW: number;
            fontSize: string;
            px: number;
        };
        sm: {
            h: number;
            minW: number;
            fontSize: string;
            px: number;
        };
        xs: {
            h: number;
            minW: number;
            fontSize: string;
            px: number;
        };
    };
    defaultProps: {
        variant: string;
        size: string;
        colorScheme: string;
    };
};
export default _default;
