declare function variantOutline(props: Record<string, any>): {
    field: {
        border: string;
        borderColor: string;
        bg: string;
        _hover: {
            borderColor: any;
        };
        _readOnly: {
            boxShadow: string;
            userSelect: string;
        };
        _disabled: {
            opacity: number;
            cursor: string;
        };
        _invalid: {
            borderColor: any;
            boxShadow: string;
        };
        _focus: {
            zIndex: number;
            borderColor: any;
            boxShadow: string;
        };
    };
    addon: {
        border: string;
        borderColor: any;
        bg: any;
    };
};
declare function variantFilled(props: Record<string, any>): {
    field: {
        border: string;
        borderColor: string;
        bg: any;
        _hover: {
            bg: any;
        };
        _readOnly: {
            boxShadow: string;
            userSelect: string;
        };
        _disabled: {
            opacity: number;
            cursor: string;
        };
        _invalid: {
            borderColor: any;
        };
        _focus: {
            bg: string;
            borderColor: any;
        };
    };
    addon: {
        border: string;
        borderColor: string;
        bg: any;
    };
};
declare function variantFlushed(props: Record<string, any>): {
    field: {
        borderBottom: string;
        borderColor: string;
        borderRadius: number;
        pl: number;
        pr: number;
        bg: string;
        _readOnly: {
            boxShadow: string;
            userSelect: string;
        };
        _invalid: {
            borderColor: any;
            boxShadow: string;
        };
        _focus: {
            borderColor: any;
            boxShadow: string;
        };
    };
    addon: {
        borderBottom: string;
        borderColor: string;
        borderRadius: number;
        paddingX: number;
        bg: string;
    };
};
declare const _default: {
    parts: string[];
    baseStyle: {
        field: {
            width: string;
            outline: number;
            position: string;
            appearance: string;
            transition: string;
        };
    };
    sizes: {
        lg: {
            field: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            addon: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
        };
        md: {
            field: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            addon: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
        };
        sm: {
            field: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            addon: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
        };
        xs: {
            field: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
            addon: {
                fontSize: string;
                px: number;
                h: number;
                borderRadius: string;
            };
        };
    };
    variants: {
        outline: typeof variantOutline;
        filled: typeof variantFilled;
        flushed: typeof variantFlushed;
        unstyled: {
            field: {
                bg: string;
                pl: number;
                pr: number;
                height: string;
            };
            addon: {
                bg: string;
                pl: number;
                pr: number;
                height: string;
            };
        };
    };
    defaultProps: {
        size: string;
        variant: string;
    };
};
export default _default;
