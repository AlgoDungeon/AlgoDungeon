{"version":3,"sources":["../../src/extend-theme.ts"],"names":["defaultTheme","isFunction","mergeWith","extendTheme","overrides","baseTheme","customizer","source","override","sourceValue","overrideValue","undefined"],"mappings":"AAAA,OAAOA,YAAP,MAAoC,kBAApC;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,kBAAtC;;AAwBA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAT,CACLC,SADK,EAELC,SAFK,EAGL;AAAA,MADAA,SACA;AADAA,IAAAA,SACA,GADiBL,YACjB;AAAA;;AACA,WAASM,UAAT,CAAoBC,MAApB,EAAqCC,QAArC,EAAwD;AACtD,QAAIP,UAAU,CAACM,MAAD,CAAd,EAAwB;AACtB,aAAO,YAAwB;AAC7B,YAAME,WAAW,GAAGF,MAAM,CAAC,YAAD,CAA1B;AAEA,YAAMG,aAAa,GAAGT,UAAU,CAACO,QAAD,CAAV,GAClBA,QAAQ,CAAC,YAAD,CADU,GAElBA,QAFJ;AAIA,eAAON,SAAS,CAAC,EAAD,EAAKO,WAAL,EAAkBC,aAAlB,EAAiCJ,UAAjC,CAAhB;AACD,OARD;AASD,KAXqD,CAatD;;;AACA,WAAOK,SAAP;AACD;;AAED,SAAOT,SAAS,CAAC,EAAD,EAAKG,SAAL,EAAgBD,SAAhB,EAA2BE,UAA3B,CAAhB;AACD","sourcesContent":["import defaultTheme, { Theme } from \"@chakra-ui/theme\"\nimport { isFunction, mergeWith } from \"@chakra-ui/utils\"\nimport { ColorHues } from \"@chakra-ui/theme/dist/types/foundations/colors\"\n\ntype ThemeExtensionTypeHints = {\n  colors: Record<string, Partial<ColorHues> | Record<string, string> | string> // typehints for color definitions\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<ThemeObject, TypeHints> = {\n  [Key in keyof ThemeObject]?:\n    | Omit<DeepThemeExtension<ThemeObject[Key], TypeHints>, keyof TypeHints> // recursive type clone\n    | (ThemeObject[Key] extends (...args: any[]) => any\n        ? Partial<ReturnType<ThemeObject[Key]>>\n        : Partial<ThemeObject[Key]>) // allow function or object\n} &\n  Partial<TypeHints> &\n  Record<string, any> // escape hatch\n\nexport type ThemeOverride = DeepThemeExtension<Theme, ThemeExtensionTypeHints>\n\n/**\n * Function to override or customize the Chakra UI theme conveniently\n * @param overrides - Your custom theme object overrides\n * @param baseTheme - theme to customize\n */\nexport function extendTheme<T extends ThemeOverride>(\n  overrides: T,\n  baseTheme: any = defaultTheme,\n) {\n  function customizer(source: unknown, override: unknown) {\n    if (isFunction(source)) {\n      return (...args: unknown[]) => {\n        const sourceValue = source(...args)\n\n        const overrideValue = isFunction(override)\n          ? override(...args)\n          : override\n\n        return mergeWith({}, sourceValue, overrideValue, customizer)\n      }\n    }\n\n    // fallback to default behaviour\n    return undefined\n  }\n\n  return mergeWith({}, baseTheme, overrides, customizer)\n}\n"],"file":"extend-theme.js"}