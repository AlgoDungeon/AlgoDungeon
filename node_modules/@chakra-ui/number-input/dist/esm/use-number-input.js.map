{"version":3,"sources":["../../src/use-number-input.ts"],"names":["useCounter","useFormControl","useBoolean","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","mergeRefs","minSafeInteger","normalizeEventKey","pick","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","getAriaValueText","pattern","inputMode","allowMouseWheel","name","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","useRef","current","notInSync","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","_getAriaValueText","text","defaultText","toString","undefined","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","controlProps","inputProps","getInputProps","type","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","onFocus","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  useBoolean,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  pick,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    name,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value !== counter.value\n    if (notInSync) {\n      counter.update(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    if (counter.value !== next) {\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const controlProps = useFormControl<HTMLInputElement>(props)\n  const inputProps = pick(controlProps, [\n    \"id\",\n    \"disabled\",\n    \"readOnly\",\n    \"required\",\n    \"aria-invalid\",\n    \"aria-required\",\n    \"aria-readonly\",\n    \"aria-describedby\",\n    \"onFocus\",\n    \"onBlur\",\n  ])\n\n  const getInputProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      ...props,\n      ...inputProps,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": inputProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(\n        inputProps[\"aria-invalid\"] || counter.isOutOfRange,\n      ),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(inputProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(inputProps.onBlur, onBlur),\n    }),\n    [\n      name,\n      inputProps,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      inputMode,\n      pattern,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n      onBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}