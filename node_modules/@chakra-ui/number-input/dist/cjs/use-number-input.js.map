{"version":3,"sources":["../../src/use-number-input.ts"],"names":["sanitize","value","split","filter","isFloatingPointNumericCharacter","join","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","minSafeInteger","max","maxSafeInteger","step","stepProp","isReadOnly","isDisabled","getAriaValueText","isInvalid","pattern","inputMode","allowMouseWheel","id","onChangeProp","onChange","precision","name","htmlProps","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","isFocused","setFocused","inputRef","React","useRef","current","notInSync","isInteractive","useCallback","spinner","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","_getAriaValueText","text","defaultText","toString","undefined","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","spinUp","up","spinDown","down","pointerDown","isBrowser","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","controlProps","inputProps","getInputProps","type","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","onFocus","on"],"mappings":"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","sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  useBoolean,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  EventKeyMap,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  mergeRefs,\n  minSafeInteger,\n  normalizeEventKey,\n  pick,\n  PropGetter,\n  StringOrNumber,\n} from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    /**\n     * These props are destructured to ensure `htmlProps` resolves to the correct type\n     */\n    onChange: onChangeProp,\n    precision,\n    name,\n    ...htmlProps\n  } = props\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value !== counter.value\n    if (notInSync) {\n      counter.update(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const _getAriaValueText = () => {\n    const text = getAriaValueText?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }\n\n  const ariaValueText = _getAriaValueText()\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    if (counter.value !== next) {\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current)\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const controlProps = useFormControl<HTMLInputElement>(props)\n  const inputProps = pick(controlProps, [\n    \"id\",\n    \"disabled\",\n    \"readOnly\",\n    \"required\",\n    \"aria-invalid\",\n    \"aria-required\",\n    \"aria-readonly\",\n    \"aria-describedby\",\n    \"onFocus\",\n    \"onBlur\",\n  ])\n\n  const getInputProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      ...props,\n      ...inputProps,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": inputProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(\n        inputProps[\"aria-invalid\"] || counter.isOutOfRange,\n      ),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(inputProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(inputProps.onBlur, onBlur),\n    }),\n    [\n      name,\n      inputProps,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      inputMode,\n      pattern,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      setFocused.on,\n      onBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"file":"use-number-input.js"}