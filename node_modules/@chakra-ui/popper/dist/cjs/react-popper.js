"use strict";

exports.__esModule = true;
exports.usePopper = usePopper;

var _hooks = require("@chakra-ui/hooks");

var _utils = require("@chakra-ui/utils");

var _core = require("@popperjs/core");

var _dequal = require("dequal");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function resolve(obj, elements) {
  return function (prev) {
    var next = (0, _utils.fromEntries)(elements.map(function (element) {
      return [element, obj[element]];
    }));
    var isPopperEqual = (0, _dequal.dequal)(prev.popper, next.popper);
    var isArrowEqual = (0, _dequal.dequal)(prev.arrow, next.arrow);
    if (isArrowEqual && isPopperEqual) return prev;
    return next;
  };
}

var EMPTY_MODIFIERS = [];

function usePopper(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }

  var prevOptions = React.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };

  var _React$useState = React.useState({
    popper: {
      position: optionsWithDefaults.strategy,
      left: "0",
      top: "0"
    }
  }),
      styles = _React$useState[0],
      setStyles = _React$useState[1];

  var _React$useState2 = React.useState({}),
      attrs = _React$useState2[0],
      setAttrs = _React$useState2[1];

  var updateStateModifier = React.useMemo(function () {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn(_ref) {
        var state = _ref.state;
        var elements = Object.keys(state.elements);
        setStyles(resolve(state.styles, elements));
        setAttrs(resolve(state.attributes, elements));
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React.useMemo(function () {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };

    if ((0, _dequal.dequal)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    }

    prevOptions.current = newOptions;
    return newOptions;
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React.useRef();
  (0, _hooks.useSafeLayoutEffect)(function () {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  (0, _hooks.useSafeLayoutEffect)(function () {
    if (referenceElement == null || popperElement == null) {
      return;
    }

    var createPopper = options.createPopper || _core.createPopper;
    var popperInstance = createPopper(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function () {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  React.useEffect(function () {
    var id = requestAnimationFrame(function () {
      var _popperInstanceRef$cu;

      (_popperInstanceRef$cu = popperInstanceRef.current) == null ? void 0 : _popperInstanceRef$cu.forceUpdate();
    });
    return function () {
      cancelAnimationFrame(id);
    };
  }, []);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: styles,
    attributes: attrs,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
}
//# sourceMappingURL=react-popper.js.map