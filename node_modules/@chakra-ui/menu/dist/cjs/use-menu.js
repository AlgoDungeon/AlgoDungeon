"use strict";

exports.__esModule = true;
exports.useMenu = useMenu;
exports.useMenuButton = useMenuButton;
exports.useMenuList = useMenuList;
exports.useMenuPositioner = useMenuPositioner;
exports.useMenuItem = useMenuItem;
exports.useMenuOption = useMenuOption;
exports.useMenuOptionGroup = useMenuOptionGroup;
exports.useMenuState = useMenuState;
exports.useMenuContext = exports.MenuProvider = void 0;

var _clickable = require("@chakra-ui/clickable");

var _descendant = require("@chakra-ui/descendant");

var _hooks = require("@chakra-ui/hooks");

var _popper = require("@chakra-ui/popper");

var _utils = require("@chakra-ui/utils");

var React = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

var _createContext = (0, _utils.createContext)({
  strict: false,
  name: "MenuContext"
}),
    MenuProvider = _createContext[0],
    useMenuContext = _createContext[1];

exports.useMenuContext = useMenuContext;
exports.MenuProvider = MenuProvider;

/**
 * React Hook to manage a menu
 *
 * It provides the logic and will be used with react context
 * to propagate its return value to all children
 */
function useMenu(props) {
  var id = props.id,
      _props$closeOnSelect = props.closeOnSelect,
      closeOnSelect = _props$closeOnSelect === void 0 ? true : _props$closeOnSelect,
      _props$closeOnBlur = props.closeOnBlur,
      closeOnBlur = _props$closeOnBlur === void 0 ? true : _props$closeOnBlur,
      _props$autoSelect = props.autoSelect,
      autoSelect = _props$autoSelect === void 0 ? true : _props$autoSelect,
      isLazy = props.isLazy,
      _props$placement = props.placement,
      placement = _props$placement === void 0 ? "bottom-start" : _props$placement;

  var _useDisclosure = (0, _hooks.useDisclosure)(props),
      isOpen = _useDisclosure.isOpen,
      onOpen = _useDisclosure.onOpen,
      onClose = _useDisclosure.onClose,
      onToggle = _useDisclosure.onToggle;
  /**
   * Prepare the reference to the menu and disclosure
   */


  var menuRef = React.useRef(null);
  var buttonRef = React.useRef(null);
  (0, _hooks.useOutsideClick)({
    ref: menuRef,
    handler: function handler(event) {
      var _buttonRef$current;

      if (isOpen && closeOnBlur && !((_buttonRef$current = buttonRef.current) != null && _buttonRef$current.contains(event.target))) {
        onClose();
      }
    }
  });
  /**
   * Add some popper.js for dynamic positioning
   */

  var popper = (0, _popper.usePopper)(_extends({
    placement: placement
  }, props));

  var _React$useState = React.useState(-1),
      focusedIndex = _React$useState[0],
      setFocusedIndex = _React$useState[1];
  /**
   * Context to register all menu item nodes
   */


  var domContext = (0, _descendant.useDescendants)();
  /**
   * Focus the button when we close the menu
   */

  (0, _hooks.useUpdateEffect)(function () {
    if (!isOpen) {
      setFocusedIndex(-1);
    }
  }, [isOpen]);
  (0, _hooks.useFocusOnHide)(menuRef, {
    focusRef: buttonRef,
    visible: isOpen,
    shouldFocus: true
  });
  /**
   * Generate unique ids for menu's list and button
   */

  var _useIds = (0, _hooks.useIds)(id, "menu-button", "menu-list"),
      buttonId = _useIds[0],
      menuId = _useIds[1];

  var openAndFocusMenu = React.useCallback(function () {
    onOpen();
    if (menuRef.current) (0, _utils.focus)(menuRef.current);
  }, [onOpen, menuRef]);
  var openAndFocusFirstItem = React.useCallback(function () {
    onOpen();
    setFocusedIndex(0);
  }, [onOpen, setFocusedIndex]);
  var openAndFocusLastItem = React.useCallback(function () {
    onOpen();
    setFocusedIndex(domContext.descendants.length - 1);
  }, [onOpen, setFocusedIndex, domContext.descendants]);
  var refocus = React.useCallback(function () {
    var _menuRef$current, _domContext$descendan;

    var hasFocusWithin = (_menuRef$current = menuRef.current) == null ? void 0 : _menuRef$current.contains(document.activeElement);
    var shouldRefocus = isOpen && !hasFocusWithin;
    if (!shouldRefocus) return;
    var el = (_domContext$descendan = domContext.descendants[focusedIndex]) == null ? void 0 : _domContext$descendan.element;
    el == null ? void 0 : el.focus({
      preventScroll: true
    });
  }, [isOpen, focusedIndex, domContext.descendants]);
  return {
    openAndFocusMenu: openAndFocusMenu,
    openAndFocusFirstItem: openAndFocusFirstItem,
    openAndFocusLastItem: openAndFocusLastItem,
    onTransitionEnd: refocus,
    domContext: domContext,
    popper: popper,
    buttonId: buttonId,
    menuId: menuId,
    forceUpdate: popper.forceUpdate,
    orientation: "vertical",
    isOpen: isOpen,
    onToggle: onToggle,
    onOpen: onOpen,
    onClose: onClose,
    menuRef: menuRef,
    buttonRef: buttonRef,
    focusedIndex: focusedIndex,
    closeOnSelect: closeOnSelect,
    closeOnBlur: closeOnBlur,
    autoSelect: autoSelect,
    setFocusedIndex: setFocusedIndex,
    isLazy: isLazy
  };
}

function useMenuButton(props, externalRef) {
  if (externalRef === void 0) {
    externalRef = null;
  }

  var menu = useMenuContext();
  var isOpen = menu.isOpen,
      onClose = menu.onClose,
      autoSelect = menu.autoSelect,
      popper = menu.popper,
      openAndFocusFirstItem = menu.openAndFocusFirstItem,
      openAndFocusLastItem = menu.openAndFocusLastItem,
      openAndFocusMenu = menu.openAndFocusMenu;
  var onClick = React.useCallback(function () {
    if (isOpen) {
      onClose();
    } else {
      var action = autoSelect ? openAndFocusFirstItem : openAndFocusMenu;
      action();
    }
  }, [autoSelect, isOpen, onClose, openAndFocusFirstItem, openAndFocusMenu]);
  var onKeyDown = React.useCallback(function (event) {
    var eventKey = (0, _utils.normalizeEventKey)(event);
    var keyMap = {
      Enter: openAndFocusFirstItem,
      ArrowDown: openAndFocusFirstItem,
      ArrowUp: openAndFocusLastItem
    };
    var action = keyMap[eventKey];

    if (action) {
      event.preventDefault();
      event.stopPropagation();
      action(event);
    }
  }, [openAndFocusFirstItem, openAndFocusLastItem]);

  var buttonProps = _extends({}, props, {
    id: menu.buttonId,
    "data-active": (0, _utils.dataAttr)(menu.isOpen),
    "aria-expanded": menu.isOpen,
    "aria-haspopup": "menu",
    "aria-controls": menu.menuId,
    onClick: (0, _utils.callAllHandlers)(props.onClick, onClick),
    onKeyDown: (0, _utils.callAllHandlers)(props.onKeyDown, onKeyDown)
  });

  return popper.getReferenceProps(buttonProps, (0, _utils.mergeRefs)(menu.buttonRef, externalRef));
}
/**
 * React Hook to manage a menu list.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and its return value
 * is passed as `context` to this hook.
 */


function useMenuList(props, ref) {
  if (ref === void 0) {
    ref = null;
  }

  var menu = useMenuContext();

  if (!menu) {
    throw new Error("useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>");
  }

  var focusedIndex = menu.focusedIndex,
      setFocusedIndex = menu.setFocusedIndex,
      menuRef = menu.menuRef,
      isOpen = menu.isOpen,
      onClose = menu.onClose,
      menuId = menu.menuId,
      popper = menu.popper,
      descendants = menu.domContext.descendants,
      isLazy = menu.isLazy;
  /**
   * Hook that creates a keydown event handler that listens
   * to printable keyboard character press
   */

  var onCharacterPress = (0, _hooks.useShortcut)({
    preventDefault: function preventDefault(event) {
      return event.key !== " ";
    }
  });
  var onKeyDown = React.useCallback(function (event) {
    var eventKey = (0, _utils.normalizeEventKey)(event);
    var keyMap = {
      Tab: function Tab(event) {
        event.preventDefault();
      },
      Escape: onClose,
      ArrowDown: function ArrowDown() {
        var nextIndex = (0, _utils.getNextIndex)(focusedIndex, descendants.length);
        setFocusedIndex(nextIndex);
      },
      ArrowUp: function ArrowUp() {
        var prevIndex = (0, _utils.getPrevIndex)(focusedIndex, descendants.length);
        setFocusedIndex(prevIndex);
      }
    };
    var fn = keyMap[eventKey];

    if (fn) {
      event.preventDefault();
      fn(event);
      return;
    }

    var characterHandler = onCharacterPress(function (character) {
      /**
       * Typeahead: Based on current character pressed,
       * find the next item to be selected
       */
      var nextItem = (0, _utils.getNextItemFromSearch)(descendants, character, function (node) {
        var _node$element;

        return ((_node$element = node.element) == null ? void 0 : _node$element.textContent) || "";
      }, descendants[focusedIndex]);

      if (nextItem) {
        var index = descendants.indexOf(nextItem);
        setFocusedIndex(index);
      }
    });
    characterHandler(event);
  }, [descendants, focusedIndex, onCharacterPress, onClose, setFocusedIndex]);

  var menulistProps = _extends({}, props, {
    ref: (0, _utils.mergeRefs)(menuRef, ref),
    children: !isLazy || isOpen ? props.children : null,
    tabIndex: -1,
    role: "menu",
    id: menuId,
    style: _extends({}, props.style, {
      transformOrigin: popper.transformOrigin
    }),
    "aria-orientation": "vertical",
    onKeyDown: (0, _utils.callAllHandlers)(props.onKeyDown, onKeyDown)
  });

  return menulistProps;
}

function useMenuPositioner(props) {
  if (props === void 0) {
    props = {};
  }

  var _useMenuContext = useMenuContext(),
      popper = _useMenuContext.popper,
      isOpen = _useMenuContext.isOpen;

  return (0, _utils.mergeWith)(popper.getPopperProps(props), {
    style: {
      visibility: isOpen ? "visible" : "hidden"
    }
  });
}

function useMenuItem(props, externalRef) {
  if (externalRef === void 0) {
    externalRef = null;
  }

  var onMouseEnterProp = props.onMouseEnter,
      onMouseMoveProp = props.onMouseMove,
      onMouseLeaveProp = props.onMouseLeave,
      onClickProp = props.onClick,
      isDisabled = props.isDisabled,
      isFocusable = props.isFocusable,
      htmlProps = _objectWithoutPropertiesLoose(props, ["onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "isDisabled", "isFocusable"]);

  var menu = useMenuContext();
  var domContext = menu.domContext,
      setFocusedIndex = menu.setFocusedIndex,
      focusedIndex = menu.focusedIndex,
      closeOnSelect = menu.closeOnSelect,
      onClose = menu.onClose,
      menuRef = menu.menuRef,
      isOpen = menu.isOpen;
  var ref = React.useRef(null);
  var id = "menuitem-" + (0, _hooks.useId)();
  /**
   * Register the menuitem's node into the domContext
   */

  var index = (0, _descendant.useDescendant)({
    element: ref.current,
    context: domContext,
    disabled: isDisabled,
    focusable: isFocusable
  });
  var onMouseEnter = React.useCallback(function (event) {
    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);
    if (isDisabled) return;
    setFocusedIndex(index);
  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);
  var onMouseMove = React.useCallback(function (event) {
    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);

    if (document.activeElement !== ref.current) {
      onMouseEnter(event);
    }
  }, [onMouseEnter, onMouseMoveProp]);
  var onMouseLeave = React.useCallback(function (event) {
    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);
    if (isDisabled) return;
    setFocusedIndex(-1);
  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);
  var onClick = React.useCallback(function (event) {
    onClickProp == null ? void 0 : onClickProp(event);
    /**
     * Close menu and parent menu's if `closeOnSelect` is set to `true`
     */

    if (closeOnSelect) {
      onClose();
    }
  }, [onClose, onClickProp, closeOnSelect]);
  var isFocused = index === focusedIndex;
  var trulyDisabled = isDisabled && !isFocusable;
  (0, _hooks.useUpdateEffect)(function () {
    if (!isOpen) return;

    if (isFocused && !trulyDisabled && ref.current) {
      (0, _utils.focus)(ref.current);
    } else if (document.activeElement !== menuRef.current) {
      var _menuRef$current2;

      (_menuRef$current2 = menuRef.current) == null ? void 0 : _menuRef$current2.focus();
    }
  }, [isFocused, trulyDisabled, menuRef, isOpen]);
  var tabbable = (0, _clickable.useClickable)({
    onClick: onClick,
    onMouseEnter: onMouseEnter,
    onMouseMove: onMouseMove,
    onMouseLeave: onMouseLeave,
    ref: (0, _utils.mergeRefs)(ref, externalRef),
    isDisabled: isDisabled,
    isFocusable: isFocusable
  });
  return _extends({}, htmlProps, tabbable, {
    id: id,
    role: "menuitem",
    tabIndex: isFocused ? 0 : -1
  });
}

function useMenuOption(props, externalRef) {
  if (externalRef === void 0) {
    externalRef = null;
  }

  var onClick = props.onClick,
      isDisabled = props.isDisabled,
      isFocusable = props.isFocusable,
      _props$type = props.type,
      type = _props$type === void 0 ? "radio" : _props$type,
      isChecked = props.isChecked,
      rest = _objectWithoutPropertiesLoose(props, ["onClick", "isDisabled", "isFocusable", "type", "isChecked"]);

  var hookProps = {
    isDisabled: isDisabled,
    isFocusable: isFocusable,
    onClick: onClick
  };
  var optionsProps = useMenuItem(hookProps, externalRef);
  return _extends({}, rest, optionsProps, {
    role: "menuitem" + type,
    "aria-checked": isChecked
  });
}

function useMenuOptionGroup(props) {
  var children = props.children,
      _props$type2 = props.type,
      type = _props$type2 === void 0 ? "radio" : _props$type2,
      valueProp = props.value,
      defaultValue = props.defaultValue,
      onChangeProp = props.onChange,
      htmlProps = _objectWithoutPropertiesLoose(props, ["children", "type", "value", "defaultValue", "onChange"]);

  var isRadio = type === "radio";
  var fallback = isRadio ? "" : [];

  var _useControllableState = (0, _hooks.useControllableState)({
    defaultValue: defaultValue != null ? defaultValue : fallback,
    value: valueProp,
    onChange: onChangeProp
  }),
      value = _useControllableState[0],
      setValue = _useControllableState[1];

  var onChange = React.useCallback(function (selectedValue) {
    if (type === "radio" && (0, _utils.isString)(value)) {
      setValue(selectedValue);
    }

    if (type === "checkbox" && (0, _utils.isArray)(value)) {
      var nextValue = value.includes(selectedValue) ? (0, _utils.removeItem)(value, selectedValue) : (0, _utils.addItem)(value, selectedValue);
      setValue(nextValue);
    }
  }, [value, setValue, type]);
  var validChildren = (0, _utils.getValidChildren)(children);
  var clones = validChildren.map(function (child) {
    /**
     * We've added an internal `id` to each `MenuItemOption`,
     * let's use that for type-checking.
     *
     * We can't rely on displayName or the element's type since
     * they can be changed by the user.
     */
    if (child.type.id !== "MenuItemOption") return child;

    var onClick = function onClick(event) {
      onChange(child.props.value);
      child.props.onClick == null ? void 0 : child.props.onClick(event);
    };

    var isChecked = type === "radio" ? child.props.value === value : value.includes(child.props.value);
    return /*#__PURE__*/React.cloneElement(child, {
      type: type,
      onClick: onClick,
      isChecked: isChecked
    });
  });
  return _extends({}, htmlProps, {
    children: clones
  });
}

function useMenuState() {
  var _useMenuContext2 = useMenuContext(),
      isOpen = _useMenuContext2.isOpen,
      onClose = _useMenuContext2.onClose;

  return {
    isOpen: isOpen,
    onClose: onClose
  };
}
//# sourceMappingURL=use-menu.js.map